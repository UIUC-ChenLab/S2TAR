-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_port_c_AWVALID : OUT STD_LOGIC;
    m_axi_port_c_AWREADY : IN STD_LOGIC;
    m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WVALID : OUT STD_LOGIC;
    m_axi_port_c_WREADY : IN STD_LOGIC;
    m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WLAST : OUT STD_LOGIC;
    m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_ARVALID : OUT STD_LOGIC;
    m_axi_port_c_ARREADY : IN STD_LOGIC;
    m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RVALID : IN STD_LOGIC;
    m_axi_port_c_RREADY : OUT STD_LOGIC;
    m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_RLAST : IN STD_LOGIC;
    m_axi_port_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BVALID : IN STD_LOGIC;
    m_axi_port_c_BREADY : OUT STD_LOGIC;
    m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Cstream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    Cstream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    Cstream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    Cstream_empty_n : IN STD_LOGIC;
    Cstream_read : OUT STD_LOGIC;
    sext_ln198 : IN STD_LOGIC_VECTOR (10 downto 0);
    out_load : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of tiled_mm_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_240 : STD_LOGIC_VECTOR (10 downto 0) := "01001000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal or_ln204_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln204_reg_673_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal icmp_ln206_1_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln198_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Cstream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal port_c_blk_n_B : STD_LOGIC;
    signal port_c_blk_n_W : STD_LOGIC;
    signal port_c_blk_n_AW : STD_LOGIC;
    signal first_iter_0_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln198_cast_fu_168_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln198_cast_reg_659 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln198_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln201_1_fu_348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln201_1_reg_668 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln204_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln204_fu_368_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln204_reg_677 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_41_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_41_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_42_fu_408_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_42_reg_687 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln206_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_1_reg_692_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal port_c_addr_reg_696 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_160_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal empty_47_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal j_01_fu_94 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal j_fu_430_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln204_1_fu_450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_fu_106 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten12_fu_110 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal select_ln201_2_fu_464_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_fu_114 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln198_1_fu_296_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten34_fu_118 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln198_fu_225_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln201_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln198_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_2_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln198_fu_252_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln198_1_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln201_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln201_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln201_2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_304_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln201_fu_316_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln201_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln201_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_356_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_39_fu_376_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_fu_380_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_40_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln206_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln206_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln206_fu_412_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln204_1_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln201_1_fu_458_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln201_fu_507_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_fu_519_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_43_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_cast_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_535_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_44_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln204_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_45_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_554_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl7_fu_566_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl6_cast_fu_562_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl7_cast_fu_574_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_46_fu_578_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast4_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_cast_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tiled_mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln198_reg_664 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_156 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_156 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    i_fu_98 <= select_ln204_fu_368_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_110 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    indvar_flatten12_fu_110 <= select_ln201_2_fu_464_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten34_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten34_fu_118 <= ap_const_lv14_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    indvar_flatten34_fu_118 <= add_ln198_fu_225_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_102 <= select_ln204_1_fu_450_p3;
                end if;
            end if; 
        end if;
    end process;

    j_01_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_01_fu_94 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    j_01_fu_94 <= j_fu_430_p3;
                end if;
            end if; 
        end if;
    end process;

    m_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_106 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    m_fu_106 <= select_ln201_1_fu_348_p3;
                end if;
            end if; 
        end if;
    end process;

    n_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_114 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln198_fu_219_p2 = ap_const_lv1_0))) then 
                    n_fu_114 <= select_ln198_1_fu_296_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    empty_41_reg_682(7 downto 1) <= empty_41_fu_402_p2(7 downto 1);
                empty_42_reg_687 <= empty_42_fu_408_p1;
                icmp_ln198_reg_664 <= icmp_ln198_fu_219_p2;
                icmp_ln206_1_reg_692 <= icmp_ln206_1_fu_438_p2;
                or_ln204_reg_673 <= or_ln204_fu_362_p2;
                select_ln201_1_reg_668 <= select_ln201_1_fu_348_p3;
                select_ln204_reg_677 <= select_ln204_fu_368_p3;
                sext_ln198_cast_reg_659 <= sext_ln198_cast_fu_168_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln206_1_reg_692_pp0_iter2_reg <= icmp_ln206_1_reg_692;
                icmp_ln206_1_reg_692_pp0_iter3_reg <= icmp_ln206_1_reg_692_pp0_iter2_reg;
                icmp_ln206_1_reg_692_pp0_iter4_reg <= icmp_ln206_1_reg_692_pp0_iter3_reg;
                icmp_ln206_1_reg_692_pp0_iter5_reg <= icmp_ln206_1_reg_692_pp0_iter4_reg;
                icmp_ln206_1_reg_692_pp0_iter6_reg <= icmp_ln206_1_reg_692_pp0_iter5_reg;
                icmp_ln206_1_reg_692_pp0_iter7_reg <= icmp_ln206_1_reg_692_pp0_iter6_reg;
                icmp_ln206_1_reg_692_pp0_iter8_reg <= icmp_ln206_1_reg_692_pp0_iter7_reg;
                or_ln204_reg_673_pp0_iter2_reg <= or_ln204_reg_673;
                port_c_addr_reg_696 <= empty_47_fu_593_p2;
                tmp_reg_702 <= Cstream_dout;
            end if;
        end if;
    end process;
    empty_41_reg_682(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Cstream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, Cstream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Cstream_blk_n <= Cstream_empty_n;
        else 
            Cstream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Cstream_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Cstream_read <= ap_const_logic_1;
        else 
            Cstream_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln198_fu_225_p2 <= std_logic_vector(unsigned(indvar_flatten34_fu_118) + unsigned(ap_const_lv14_1));
    add_ln201_1_fu_458_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_110) + unsigned(ap_const_lv11_1));
    add_ln204_1_fu_444_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_102) + unsigned(ap_const_lv6_1));
    add_ln206_fu_412_p2 <= std_logic_vector(unsigned(j_01_fu_94) + unsigned(ap_const_lv3_1));
    and_ln198_1_fu_290_p2 <= (xor_ln198_fu_266_p2 and icmp_ln204_fu_284_p2);
    and_ln198_fu_278_p2 <= (xor_ln198_fu_266_p2 and icmp_ln206_fu_272_p2);
    and_ln201_fu_342_p2 <= (or_ln201_2_fu_336_p2 and and_ln198_fu_278_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter9, ap_block_state4_pp0_stage0_iter3, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter9, m_axi_port_c_WREADY, ap_block_state4_pp0_stage0_iter3, ap_block_state4_io, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((m_axi_port_c_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter9, m_axi_port_c_WREADY, ap_block_state4_pp0_stage0_iter3, ap_block_state4_io, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((m_axi_port_c_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3))));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_port_c_BVALID, icmp_ln206_1_reg_692_pp0_iter8_reg)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((icmp_ln206_1_reg_692_pp0_iter8_reg = ap_const_lv1_1) and (m_axi_port_c_BVALID = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_port_c_AWREADY, or_ln204_reg_673_pp0_iter2_reg)
    begin
                ap_block_state4_io <= ((m_axi_port_c_AWREADY = ap_const_logic_0) and (or_ln204_reg_673_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(Cstream_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (ap_const_logic_0 = Cstream_empty_n);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln198_fu_219_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln198_fu_219_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_160_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, first_iter_0_reg_156, icmp_ln198_reg_664)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln198_reg_664 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_160_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_160_p4 <= first_iter_0_reg_156;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_39_fu_376_p1 <= select_ln198_1_fu_296_p3(4 - 1 downto 0);
    empty_40_fu_392_p2 <= std_logic_vector(shift_left(unsigned(select_ln198_1_fu_296_p3),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    empty_41_fu_402_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_388_p1) - unsigned(p_shl3_cast_fu_398_p1));
    empty_42_fu_408_p1 <= select_ln201_1_fu_348_p3(4 - 1 downto 0);
    empty_43_fu_530_p2 <= std_logic_vector(shift_left(unsigned(select_ln201_1_reg_668),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    empty_44_fu_539_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_526_p1) - unsigned(p_shl5_cast_fu_535_p1));
    empty_45_fu_548_p2 <= std_logic_vector(unsigned(empty_44_fu_539_p2) + unsigned(zext_ln204_fu_545_p1));
    empty_46_fu_578_p2 <= std_logic_vector(signed(p_shl6_cast_fu_562_p1) - signed(p_shl7_cast_fu_574_p1));
    empty_47_fu_593_p2 <= std_logic_vector(signed(tmp2_cast_fu_515_p1) + signed(tmp1_fu_588_p2));
    i_4_fu_356_p2 <= std_logic_vector(unsigned(select_ln201_fu_316_p3) + unsigned(ap_const_lv3_1));
    icmp_ln198_fu_219_p2 <= "1" when (indvar_flatten34_fu_118 = ap_const_lv14_2400) else "0";
    icmp_ln201_fu_246_p2 <= "1" when (indvar_flatten12_fu_110 = ap_const_lv11_240) else "0";
    icmp_ln204_fu_284_p2 <= "1" when (indvar_flatten_fu_102 = ap_const_lv6_24) else "0";
    icmp_ln206_1_fu_438_p2 <= "1" when (j_fu_430_p3 = ap_const_lv3_6) else "0";
    icmp_ln206_fu_272_p2 <= "1" when (j_01_fu_94 = ap_const_lv3_6) else "0";
    j_fu_430_p3 <= 
        ap_const_lv3_1 when (or_ln206_1_fu_424_p2(0) = '1') else 
        add_ln206_fu_412_p2;
    m_2_fu_304_p2 <= std_logic_vector(unsigned(select_ln198_fu_252_p3) + unsigned(ap_const_lv5_1));
    m_axi_port_c_ARADDR <= ap_const_lv64_0;
    m_axi_port_c_ARBURST <= ap_const_lv2_0;
    m_axi_port_c_ARCACHE <= ap_const_lv4_0;
    m_axi_port_c_ARID <= ap_const_lv1_0;
    m_axi_port_c_ARLEN <= ap_const_lv32_0;
    m_axi_port_c_ARLOCK <= ap_const_lv2_0;
    m_axi_port_c_ARPROT <= ap_const_lv3_0;
    m_axi_port_c_ARQOS <= ap_const_lv4_0;
    m_axi_port_c_ARREGION <= ap_const_lv4_0;
    m_axi_port_c_ARSIZE <= ap_const_lv3_0;
    m_axi_port_c_ARUSER <= ap_const_lv1_0;
    m_axi_port_c_ARVALID <= ap_const_logic_0;
    m_axi_port_c_AWADDR <= port_c_addr_reg_696;
    m_axi_port_c_AWBURST <= ap_const_lv2_0;
    m_axi_port_c_AWCACHE <= ap_const_lv4_0;
    m_axi_port_c_AWID <= ap_const_lv1_0;
    m_axi_port_c_AWLEN <= ap_const_lv32_6;
    m_axi_port_c_AWLOCK <= ap_const_lv2_0;
    m_axi_port_c_AWPROT <= ap_const_lv3_0;
    m_axi_port_c_AWQOS <= ap_const_lv4_0;
    m_axi_port_c_AWREGION <= ap_const_lv4_0;
    m_axi_port_c_AWSIZE <= ap_const_lv3_0;
    m_axi_port_c_AWUSER <= ap_const_lv1_0;

    m_axi_port_c_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln204_reg_673_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln204_reg_673_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_port_c_AWVALID <= ap_const_logic_1;
        else 
            m_axi_port_c_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_port_c_BREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln206_1_reg_692_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln206_1_reg_692_pp0_iter8_reg = ap_const_lv1_1))) then 
            m_axi_port_c_BREADY <= ap_const_logic_1;
        else 
            m_axi_port_c_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_c_RREADY <= ap_const_logic_0;
    m_axi_port_c_WDATA <= tmp_reg_702;
    m_axi_port_c_WID <= ap_const_lv1_0;
    m_axi_port_c_WLAST <= ap_const_logic_0;
    m_axi_port_c_WSTRB <= ap_const_lv1_1;
    m_axi_port_c_WUSER <= ap_const_lv1_0;

    m_axi_port_c_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_port_c_WVALID <= ap_const_logic_1;
        else 
            m_axi_port_c_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    n_2_fu_240_p2 <= std_logic_vector(unsigned(n_fu_114) + unsigned(ap_const_lv5_1));
    or_ln198_fu_260_p2 <= (icmp_ln201_fu_246_p2 or ap_phi_mux_first_iter_0_phi_fu_160_p4);
    or_ln201_1_fu_324_p2 <= (or_ln198_fu_260_p2 or and_ln198_1_fu_290_p2);
    or_ln201_2_fu_336_p2 <= (xor_ln201_fu_330_p2 or icmp_ln201_fu_246_p2);
    or_ln201_fu_310_p2 <= (icmp_ln201_fu_246_p2 or and_ln198_1_fu_290_p2);
    or_ln204_fu_362_p2 <= (or_ln201_1_fu_324_p2 or and_ln201_fu_342_p2);
    or_ln206_1_fu_424_p2 <= (or_ln206_fu_418_p2 or icmp_ln201_fu_246_p2);
    or_ln206_fu_418_p2 <= (and_ln201_fu_342_p2 or and_ln198_1_fu_290_p2);
        p_cast4_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_46_fu_578_p2),64));

    p_shl2_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_380_p3),8));
    p_shl2_fu_380_p3 <= (empty_39_fu_376_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_40_fu_392_p2),8));
    p_shl4_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_519_p3),8));
    p_shl4_fu_519_p3 <= (empty_42_reg_687 & ap_const_lv3_0);
    p_shl5_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_43_fu_530_p2),8));
        p_shl6_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl6_fu_554_p3),19));

    p_shl6_fu_554_p3 <= (empty_45_fu_548_p2 & ap_const_lv10_0);
        p_shl7_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_566_p3),19));

    p_shl7_fu_566_p3 <= (empty_45_fu_548_p2 & ap_const_lv8_0);

    port_c_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_port_c_AWREADY, or_ln204_reg_673_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln204_reg_673_pp0_iter2_reg = ap_const_lv1_1))) then 
            port_c_blk_n_AW <= m_axi_port_c_AWREADY;
        else 
            port_c_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    port_c_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_port_c_BVALID, icmp_ln206_1_reg_692_pp0_iter8_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln206_1_reg_692_pp0_iter8_reg = ap_const_lv1_1))) then 
            port_c_blk_n_B <= m_axi_port_c_BVALID;
        else 
            port_c_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    port_c_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_port_c_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            port_c_blk_n_W <= m_axi_port_c_WREADY;
        else 
            port_c_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    select_ln198_1_fu_296_p3 <= 
        n_2_fu_240_p2 when (icmp_ln201_fu_246_p2(0) = '1') else 
        n_fu_114;
    select_ln198_fu_252_p3 <= 
        ap_const_lv5_0 when (icmp_ln201_fu_246_p2(0) = '1') else 
        m_fu_106;
    select_ln201_1_fu_348_p3 <= 
        m_2_fu_304_p2 when (and_ln198_1_fu_290_p2(0) = '1') else 
        select_ln198_fu_252_p3;
    select_ln201_2_fu_464_p3 <= 
        ap_const_lv11_1 when (icmp_ln201_fu_246_p2(0) = '1') else 
        add_ln201_1_fu_458_p2;
    select_ln201_fu_316_p3 <= 
        ap_const_lv3_0 when (or_ln201_fu_310_p2(0) = '1') else 
        i_fu_98;
    select_ln204_1_fu_450_p3 <= 
        ap_const_lv6_1 when (or_ln201_fu_310_p2(0) = '1') else 
        add_ln204_1_fu_444_p2;
    select_ln204_fu_368_p3 <= 
        i_4_fu_356_p2 when (and_ln201_fu_342_p2(0) = '1') else 
        select_ln201_fu_316_p3;
        sext_ln198_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln198),12));

        sext_ln201_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_41_reg_682),12));

    tmp1_fu_588_p2 <= std_logic_vector(unsigned(out_load) + unsigned(p_cast4_fu_584_p1));
        tmp2_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_510_p2),64));

    tmp2_fu_510_p2 <= std_logic_vector(signed(sext_ln198_cast_reg_659) + signed(sext_ln201_fu_507_p1));
    xor_ln198_fu_266_p2 <= (icmp_ln201_fu_246_p2 xor ap_const_lv1_1);
    xor_ln201_fu_330_p2 <= (icmp_ln204_fu_284_p2 xor ap_const_lv1_1);
    zext_ln204_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln204_reg_677),8));
end behav;
