-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_tn_loop_proc is
port (
    h_fifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_empty_n : IN STD_LOGIC;
    h_fifo_read : OUT STD_LOGIC;
    v_fifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_empty_n : IN STD_LOGIC;
    v_fifo_read : OUT STD_LOGIC;
    v_fifo_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_1_empty_n : IN STD_LOGIC;
    v_fifo_1_read : OUT STD_LOGIC;
    v_fifo_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_2_empty_n : IN STD_LOGIC;
    v_fifo_2_read : OUT STD_LOGIC;
    v_fifo_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_3_empty_n : IN STD_LOGIC;
    v_fifo_3_read : OUT STD_LOGIC;
    v_fifo_4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_4_empty_n : IN STD_LOGIC;
    v_fifo_4_read : OUT STD_LOGIC;
    v_fifo_5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_5_empty_n : IN STD_LOGIC;
    v_fifo_5_read : OUT STD_LOGIC;
    h_fifo_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_1_empty_n : IN STD_LOGIC;
    h_fifo_1_read : OUT STD_LOGIC;
    h_fifo_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_2_empty_n : IN STD_LOGIC;
    h_fifo_2_read : OUT STD_LOGIC;
    h_fifo_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_3_empty_n : IN STD_LOGIC;
    h_fifo_3_read : OUT STD_LOGIC;
    h_fifo_4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_4_empty_n : IN STD_LOGIC;
    h_fifo_4_read : OUT STD_LOGIC;
    h_fifo_5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_5_empty_n : IN STD_LOGIC;
    h_fifo_5_read : OUT STD_LOGIC;
    Cstream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    Cstream_full_n : IN STD_LOGIC;
    Cstream_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of tiled_mm_tn_loop_proc is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal dataflow_parent_loop_proc_U0_h_fifo_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_v_fifo_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_v_fifo_1_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_v_fifo_2_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_v_fifo_3_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_v_fifo_4_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_v_fifo_5_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_h_fifo_1_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_h_fifo_2_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_h_fifo_3_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_h_fifo_4_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_h_fifo_5_read : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_Cstream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_parent_loop_proc_U0_Cstream_write : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_start : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_done : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_ready : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_idle : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_continue : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_dataflow_parent_loop_proc IS
    port (
        h_fifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_empty_n : IN STD_LOGIC;
        h_fifo_read : OUT STD_LOGIC;
        v_fifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_empty_n : IN STD_LOGIC;
        v_fifo_read : OUT STD_LOGIC;
        v_fifo_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_1_empty_n : IN STD_LOGIC;
        v_fifo_1_read : OUT STD_LOGIC;
        v_fifo_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_2_empty_n : IN STD_LOGIC;
        v_fifo_2_read : OUT STD_LOGIC;
        v_fifo_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_3_empty_n : IN STD_LOGIC;
        v_fifo_3_read : OUT STD_LOGIC;
        v_fifo_4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_4_empty_n : IN STD_LOGIC;
        v_fifo_4_read : OUT STD_LOGIC;
        v_fifo_5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_5_empty_n : IN STD_LOGIC;
        v_fifo_5_read : OUT STD_LOGIC;
        h_fifo_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_1_empty_n : IN STD_LOGIC;
        h_fifo_1_read : OUT STD_LOGIC;
        h_fifo_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_2_empty_n : IN STD_LOGIC;
        h_fifo_2_read : OUT STD_LOGIC;
        h_fifo_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_3_empty_n : IN STD_LOGIC;
        h_fifo_3_read : OUT STD_LOGIC;
        h_fifo_4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_4_empty_n : IN STD_LOGIC;
        h_fifo_4_read : OUT STD_LOGIC;
        h_fifo_5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_5_empty_n : IN STD_LOGIC;
        h_fifo_5_read : OUT STD_LOGIC;
        Cstream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        Cstream_full_n : IN STD_LOGIC;
        Cstream_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_parent_loop_proc_U0 : component tiled_mm_dataflow_parent_loop_proc
    port map (
        h_fifo_dout => h_fifo_dout,
        h_fifo_empty_n => h_fifo_empty_n,
        h_fifo_read => dataflow_parent_loop_proc_U0_h_fifo_read,
        v_fifo_dout => v_fifo_dout,
        v_fifo_empty_n => v_fifo_empty_n,
        v_fifo_read => dataflow_parent_loop_proc_U0_v_fifo_read,
        v_fifo_1_dout => v_fifo_1_dout,
        v_fifo_1_empty_n => v_fifo_1_empty_n,
        v_fifo_1_read => dataflow_parent_loop_proc_U0_v_fifo_1_read,
        v_fifo_2_dout => v_fifo_2_dout,
        v_fifo_2_empty_n => v_fifo_2_empty_n,
        v_fifo_2_read => dataflow_parent_loop_proc_U0_v_fifo_2_read,
        v_fifo_3_dout => v_fifo_3_dout,
        v_fifo_3_empty_n => v_fifo_3_empty_n,
        v_fifo_3_read => dataflow_parent_loop_proc_U0_v_fifo_3_read,
        v_fifo_4_dout => v_fifo_4_dout,
        v_fifo_4_empty_n => v_fifo_4_empty_n,
        v_fifo_4_read => dataflow_parent_loop_proc_U0_v_fifo_4_read,
        v_fifo_5_dout => v_fifo_5_dout,
        v_fifo_5_empty_n => v_fifo_5_empty_n,
        v_fifo_5_read => dataflow_parent_loop_proc_U0_v_fifo_5_read,
        h_fifo_1_dout => h_fifo_1_dout,
        h_fifo_1_empty_n => h_fifo_1_empty_n,
        h_fifo_1_read => dataflow_parent_loop_proc_U0_h_fifo_1_read,
        h_fifo_2_dout => h_fifo_2_dout,
        h_fifo_2_empty_n => h_fifo_2_empty_n,
        h_fifo_2_read => dataflow_parent_loop_proc_U0_h_fifo_2_read,
        h_fifo_3_dout => h_fifo_3_dout,
        h_fifo_3_empty_n => h_fifo_3_empty_n,
        h_fifo_3_read => dataflow_parent_loop_proc_U0_h_fifo_3_read,
        h_fifo_4_dout => h_fifo_4_dout,
        h_fifo_4_empty_n => h_fifo_4_empty_n,
        h_fifo_4_read => dataflow_parent_loop_proc_U0_h_fifo_4_read,
        h_fifo_5_dout => h_fifo_5_dout,
        h_fifo_5_empty_n => h_fifo_5_empty_n,
        h_fifo_5_read => dataflow_parent_loop_proc_U0_h_fifo_5_read,
        Cstream_din => dataflow_parent_loop_proc_U0_Cstream_din,
        Cstream_full_n => Cstream_full_n,
        Cstream_write => dataflow_parent_loop_proc_U0_Cstream_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_parent_loop_proc_U0_ap_start,
        ap_done => dataflow_parent_loop_proc_U0_ap_done,
        ap_ready => dataflow_parent_loop_proc_U0_ap_ready,
        ap_idle => dataflow_parent_loop_proc_U0_ap_idle,
        ap_continue => dataflow_parent_loop_proc_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv5_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv5_1));
                elsif (((ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1) and (loop_dataflow_input_count = bound_minus_1))) then 
                    loop_dataflow_input_count <= ap_const_lv5_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv5_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_parent_loop_proc_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv5_1));
                elsif (((dataflow_parent_loop_proc_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1) and (loop_dataflow_output_count = bound_minus_1))) then 
                    loop_dataflow_output_count <= ap_const_lv5_0;
                end if; 
            end if;
        end if;
    end process;

    Cstream_din <= dataflow_parent_loop_proc_U0_Cstream_din;
    Cstream_write <= dataflow_parent_loop_proc_U0_Cstream_write;

    ap_done_assign_proc : process(dataflow_parent_loop_proc_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1) and (loop_dataflow_output_count = bound_minus_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_parent_loop_proc_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((ap_start = ap_const_logic_0) and (dataflow_parent_loop_proc_U0_ap_idle = ap_const_logic_1) and (loop_dataflow_output_count = ap_const_lv5_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_parent_loop_proc_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1) and (loop_dataflow_input_count = bound_minus_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_minus_1 <= std_logic_vector(unsigned(ap_const_lv5_10) - unsigned(ap_const_lv5_1));

    dataflow_parent_loop_proc_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_parent_loop_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_parent_loop_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_parent_loop_proc_U0_ap_start <= ap_start;
    h_fifo_1_read <= dataflow_parent_loop_proc_U0_h_fifo_1_read;
    h_fifo_2_read <= dataflow_parent_loop_proc_U0_h_fifo_2_read;
    h_fifo_3_read <= dataflow_parent_loop_proc_U0_h_fifo_3_read;
    h_fifo_4_read <= dataflow_parent_loop_proc_U0_h_fifo_4_read;
    h_fifo_5_read <= dataflow_parent_loop_proc_U0_h_fifo_5_read;
    h_fifo_read <= dataflow_parent_loop_proc_U0_h_fifo_read;
    v_fifo_1_read <= dataflow_parent_loop_proc_U0_v_fifo_1_read;
    v_fifo_2_read <= dataflow_parent_loop_proc_U0_v_fifo_2_read;
    v_fifo_3_read <= dataflow_parent_loop_proc_U0_v_fifo_3_read;
    v_fifo_4_read <= dataflow_parent_loop_proc_U0_v_fifo_4_read;
    v_fifo_5_read <= dataflow_parent_loop_proc_U0_v_fifo_5_read;
    v_fifo_read <= dataflow_parent_loop_proc_U0_v_fifo_read;
end behav;
