-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_writehfifo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_fifo_0_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_0_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_0_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_0_0_full_n : IN STD_LOGIC;
    h_fifo_0_0_write : OUT STD_LOGIC;
    h_fifo_1_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_1_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_1_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_1_0_full_n : IN STD_LOGIC;
    h_fifo_1_0_write : OUT STD_LOGIC;
    h_fifo_2_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_2_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_2_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_2_0_full_n : IN STD_LOGIC;
    h_fifo_2_0_write : OUT STD_LOGIC;
    h_fifo_3_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_3_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_3_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_3_0_full_n : IN STD_LOGIC;
    h_fifo_3_0_write : OUT STD_LOGIC;
    h_fifo_4_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_4_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_4_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_4_0_full_n : IN STD_LOGIC;
    h_fifo_4_0_write : OUT STD_LOGIC;
    h_fifo_5_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    h_fifo_5_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_5_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    h_fifo_5_0_full_n : IN STD_LOGIC;
    h_fifo_5_0_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    a_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_0_ce0 : OUT STD_LOGIC;
    a_cache_0_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    a_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_1_ce0 : OUT STD_LOGIC;
    a_cache_1_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    a_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_2_ce0 : OUT STD_LOGIC;
    a_cache_2_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    a_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_3_ce0 : OUT STD_LOGIC;
    a_cache_3_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    a_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_4_ce0 : OUT STD_LOGIC;
    a_cache_4_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    a_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_5_ce0 : OUT STD_LOGIC;
    a_cache_5_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of tiled_mm_writehfifo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_18000 : STD_LOGIC_VECTOR (16 downto 0) := "11000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv14_1800 : STD_LOGIC_VECTOR (13 downto 0) := "01100000000000";
    constant ap_const_lv10_180 : STD_LOGIC_VECTOR (9 downto 0) := "0110000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln112_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal h_fifo_0_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal h_fifo_1_0_blk_n : STD_LOGIC;
    signal h_fifo_2_0_blk_n : STD_LOGIC;
    signal h_fifo_3_0_blk_n : STD_LOGIC;
    signal h_fifo_4_0_blk_n : STD_LOGIC;
    signal h_fifo_5_0_blk_n : STD_LOGIC;
    signal icmp_ln115_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_1_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln115_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln115_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_fu_499_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_37_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln128_fu_505_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln128_reg_767 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln128_reg_767_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal Atmp_fu_562_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_1_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_1_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_2_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_2_reg_812 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_3_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_3_reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_4_fu_602_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_4_reg_822 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_5_fu_612_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Atmp_5_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast56_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_fu_102 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal p_2_fu_509_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_106 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln118_1_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_110 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln118_2_fu_333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal tm_fu_114 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln115_1_fu_426_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_tm_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten12_fu_118 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal select_ln115_2_fu_347_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten12_load : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten33_fu_122 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln112_fu_285_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_indvar_flatten33_load : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln118_1_fu_327_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln115_1_fu_341_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln112_fu_379_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln115_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln115_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tm_2_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln115_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln118_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln118_fu_433_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_477_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_469_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_cast_fu_485_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln118_1_cast_fu_495_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln118_fu_453_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_539_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln128_fu_546_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln128_fu_552_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln128_fu_556_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln128_1_fu_566_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln128_2_fu_576_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln128_3_fu_586_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln128_4_fu_596_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln128_5_fu_606_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal A_pack_fu_616_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_pack_1_fu_628_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_pack_2_fu_640_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_pack_3_fu_652_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_pack_4_fu_664_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_pack_5_fu_676_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_259 : BOOLEAN;
    signal ap_condition_238 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_delay_pipe_U : component tiled_mm_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten12_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_259)) then
                if ((icmp_ln112_fu_279_p2 = ap_const_lv1_0)) then 
                    indvar_flatten12_fu_118 <= select_ln115_2_fu_347_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_118 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten33_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_259)) then
                if ((icmp_ln112_fu_279_p2 = ap_const_lv1_0)) then 
                    indvar_flatten33_fu_122 <= add_ln112_fu_285_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten33_fu_122 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_259)) then
                if ((icmp_ln112_fu_279_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_110 <= select_ln118_2_fu_333_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_110 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_238)) then
                j_fu_106 <= select_ln118_1_fu_461_p3;
            end if;
        end if;
    end process;

    p_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_238)) then
                p_fu_102 <= p_2_fu_509_p2;
            end if;
        end if;
    end process;

    tm_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_238)) then
                tm_fu_114 <= select_ln115_1_fu_426_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Atmp_1_reg_807 <= Atmp_1_fu_572_p1;
                Atmp_2_reg_812 <= Atmp_2_fu_582_p1;
                Atmp_3_reg_817 <= Atmp_3_fu_592_p1;
                Atmp_4_reg_822 <= Atmp_4_fu_602_p1;
                Atmp_5_reg_827 <= Atmp_5_fu_612_p1;
                Atmp_reg_802 <= Atmp_fu_562_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                trunc_ln128_reg_767_pp0_iter2_reg <= trunc_ln128_reg_767;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln112_1_reg_751 <= and_ln112_1_fu_315_p2;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                empty_37_reg_762 <= empty_37_fu_499_p2;
                icmp_ln115_reg_734 <= icmp_ln115_fu_297_p2;
                icmp_ln118_reg_746 <= icmp_ln118_fu_309_p2;
                or_ln115_reg_757 <= or_ln115_fu_321_p2;
                trunc_ln128_reg_767 <= trunc_ln128_fu_505_p1;
                xor_ln112_reg_741 <= xor_ln112_fu_303_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_pack_1_fu_628_p1 <= "XXXXXXXXXXXXXXXX";
    A_pack_2_fu_640_p1 <= "XXXXXXXXXXXXXXXX";
    A_pack_3_fu_652_p1 <= "XXXXXXXXXXXXXXXX";
    A_pack_4_fu_664_p1 <= "XXXXXXXXXXXXXXXX";
    A_pack_5_fu_676_p1 <= "XXXXXXXXXXXXXXXX";
    A_pack_fu_616_p1 <= "XXXXXXXXXXXXXXXX";
    Atmp_1_fu_572_p1 <= lshr_ln128_1_fu_566_p2(8 - 1 downto 0);
    Atmp_2_fu_582_p1 <= lshr_ln128_2_fu_576_p2(8 - 1 downto 0);
    Atmp_3_fu_592_p1 <= lshr_ln128_3_fu_586_p2(8 - 1 downto 0);
    Atmp_4_fu_602_p1 <= lshr_ln128_4_fu_596_p2(8 - 1 downto 0);
    Atmp_5_fu_612_p1 <= lshr_ln128_5_fu_606_p2(8 - 1 downto 0);
    Atmp_fu_562_p1 <= lshr_ln128_fu_556_p2(8 - 1 downto 0);
    a_cache_0_address0 <= p_cast56_fu_530_p1(8 - 1 downto 0);

    a_cache_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_cache_0_ce0 <= ap_const_logic_1;
        else 
            a_cache_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_1_address0 <= p_cast56_fu_530_p1(8 - 1 downto 0);

    a_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_cache_1_ce0 <= ap_const_logic_1;
        else 
            a_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_2_address0 <= p_cast56_fu_530_p1(8 - 1 downto 0);

    a_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_cache_2_ce0 <= ap_const_logic_1;
        else 
            a_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_3_address0 <= p_cast56_fu_530_p1(8 - 1 downto 0);

    a_cache_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_cache_3_ce0 <= ap_const_logic_1;
        else 
            a_cache_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_4_address0 <= p_cast56_fu_530_p1(8 - 1 downto 0);

    a_cache_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_cache_4_ce0 <= ap_const_logic_1;
        else 
            a_cache_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_5_address0 <= p_cast56_fu_530_p1(8 - 1 downto 0);

    a_cache_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_cache_5_ce0 <= ap_const_logic_1;
        else 
            a_cache_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln112_fu_285_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten33_load) + unsigned(ap_const_lv17_1));
    add_ln115_1_fu_341_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten12_load) + unsigned(ap_const_lv14_1));
    add_ln118_1_fu_327_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    and_ln112_1_fu_315_p2 <= (xor_ln112_fu_303_p2 and icmp_ln118_fu_309_p2);
    and_ln112_fu_415_p2 <= (xor_ln112_reg_741 and or_ln115_1_fu_410_p2);
    and_ln115_fu_420_p2 <= (icmp_ln120_fu_386_p2 and and_ln112_fu_415_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(h_fifo_0_0_full_n, h_fifo_1_0_full_n, h_fifo_2_0_full_n, h_fifo_3_0_full_n, h_fifo_4_0_full_n, h_fifo_5_0_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((h_fifo_5_0_full_n = ap_const_logic_0) or (h_fifo_4_0_full_n = ap_const_logic_0) or (h_fifo_3_0_full_n = ap_const_logic_0) or (h_fifo_2_0_full_n = ap_const_logic_0) or (h_fifo_1_0_full_n = ap_const_logic_0) or (h_fifo_0_0_full_n = ap_const_logic_0));
    end process;


    ap_condition_238_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_238 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_259_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_259 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln112_fu_279_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln112_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten12_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten12_fu_118, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten12_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten12_load <= indvar_flatten12_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten33_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten33_fu_122, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten33_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten33_load <= indvar_flatten33_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_110, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_loop_init_pp0_iter1_reg, j_fu_106)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, p_fu_102, ap_loop_init_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_p_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_p_load <= p_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_tm_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_loop_init_pp0_iter1_reg, tm_fu_114)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_tm_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_tm_load <= tm_fu_114;
        end if; 
    end process;

    empty_37_fu_499_p2 <= std_logic_vector(unsigned(empty_fu_489_p2) + unsigned(select_ln118_1_cast_fu_495_p1));
    empty_fu_489_p2 <= std_logic_vector(unsigned(tmp_fu_469_p3) - unsigned(tmp_2_cast_fu_485_p1));

    h_fifo_0_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, h_fifo_0_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            h_fifo_0_0_blk_n <= h_fifo_0_0_full_n;
        else 
            h_fifo_0_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_fifo_0_0_din <= (Atmp_reg_802 & A_pack_fu_616_p1(7 downto 0));

    h_fifo_0_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            h_fifo_0_0_write <= ap_const_logic_1;
        else 
            h_fifo_0_0_write <= ap_const_logic_0;
        end if; 
    end process;


    h_fifo_1_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, h_fifo_1_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            h_fifo_1_0_blk_n <= h_fifo_1_0_full_n;
        else 
            h_fifo_1_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_fifo_1_0_din <= (Atmp_1_reg_807 & A_pack_1_fu_628_p1(7 downto 0));

    h_fifo_1_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            h_fifo_1_0_write <= ap_const_logic_1;
        else 
            h_fifo_1_0_write <= ap_const_logic_0;
        end if; 
    end process;


    h_fifo_2_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, h_fifo_2_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            h_fifo_2_0_blk_n <= h_fifo_2_0_full_n;
        else 
            h_fifo_2_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_fifo_2_0_din <= (Atmp_2_reg_812 & A_pack_2_fu_640_p1(7 downto 0));

    h_fifo_2_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            h_fifo_2_0_write <= ap_const_logic_1;
        else 
            h_fifo_2_0_write <= ap_const_logic_0;
        end if; 
    end process;


    h_fifo_3_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, h_fifo_3_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            h_fifo_3_0_blk_n <= h_fifo_3_0_full_n;
        else 
            h_fifo_3_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_fifo_3_0_din <= (Atmp_3_reg_817 & A_pack_3_fu_652_p1(7 downto 0));

    h_fifo_3_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            h_fifo_3_0_write <= ap_const_logic_1;
        else 
            h_fifo_3_0_write <= ap_const_logic_0;
        end if; 
    end process;


    h_fifo_4_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, h_fifo_4_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            h_fifo_4_0_blk_n <= h_fifo_4_0_full_n;
        else 
            h_fifo_4_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_fifo_4_0_din <= (Atmp_4_reg_822 & A_pack_4_fu_664_p1(7 downto 0));

    h_fifo_4_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            h_fifo_4_0_write <= ap_const_logic_1;
        else 
            h_fifo_4_0_write <= ap_const_logic_0;
        end if; 
    end process;


    h_fifo_5_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, h_fifo_5_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            h_fifo_5_0_blk_n <= h_fifo_5_0_full_n;
        else 
            h_fifo_5_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_fifo_5_0_din <= (Atmp_5_reg_827 & A_pack_5_fu_676_p1(7 downto 0));

    h_fifo_5_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            h_fifo_5_0_write <= ap_const_logic_1;
        else 
            h_fifo_5_0_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln112_fu_279_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten33_load = ap_const_lv17_18000) else "0";
    icmp_ln115_fu_297_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten12_load = ap_const_lv14_1800) else "0";
    icmp_ln118_fu_309_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_180) else "0";
    icmp_ln120_fu_386_p2 <= "1" when (ap_sig_allocacmp_p_load = ap_const_lv6_20) else "0";
    j_2_fu_437_p2 <= std_logic_vector(unsigned(select_ln115_fu_398_p3) + unsigned(ap_const_lv4_1));
    lshr_ln128_1_fu_566_p2 <= std_logic_vector(shift_right(unsigned(a_cache_1_q0),to_integer(unsigned('0' & zext_ln128_fu_552_p1(31-1 downto 0)))));
    lshr_ln128_2_fu_576_p2 <= std_logic_vector(shift_right(unsigned(a_cache_2_q0),to_integer(unsigned('0' & zext_ln128_fu_552_p1(31-1 downto 0)))));
    lshr_ln128_3_fu_586_p2 <= std_logic_vector(shift_right(unsigned(a_cache_3_q0),to_integer(unsigned('0' & zext_ln128_fu_552_p1(31-1 downto 0)))));
    lshr_ln128_4_fu_596_p2 <= std_logic_vector(shift_right(unsigned(a_cache_4_q0),to_integer(unsigned('0' & zext_ln128_fu_552_p1(31-1 downto 0)))));
    lshr_ln128_5_fu_606_p2 <= std_logic_vector(shift_right(unsigned(a_cache_5_q0),to_integer(unsigned('0' & zext_ln128_fu_552_p1(31-1 downto 0)))));
    lshr_ln128_fu_556_p2 <= std_logic_vector(shift_right(unsigned(a_cache_0_q0),to_integer(unsigned('0' & zext_ln128_fu_552_p1(31-1 downto 0)))));
    or_ln115_1_fu_410_p2 <= (xor_ln115_fu_405_p2 or icmp_ln115_reg_734);
    or_ln115_fu_321_p2 <= (icmp_ln115_fu_297_p2 or and_ln112_1_fu_315_p2);
    or_ln118_1_fu_447_p2 <= (or_ln118_fu_443_p2 or and_ln115_fu_420_p2);
    or_ln118_fu_443_p2 <= (icmp_ln115_reg_734 or and_ln112_1_reg_751);
    or_ln128_fu_546_p2 <= (shl_ln_fu_539_p3 or ap_const_lv9_8);
    p_2_fu_509_p2 <= std_logic_vector(unsigned(select_ln118_fu_453_p3) + unsigned(ap_const_lv6_1));
    p_cast56_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_reg_762),64));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln112_fu_379_p3 <= 
        ap_const_lv5_0 when (icmp_ln115_reg_734(0) = '1') else 
        ap_sig_allocacmp_tm_load;
    select_ln115_1_fu_426_p3 <= 
        tm_2_fu_392_p2 when (and_ln112_1_reg_751(0) = '1') else 
        select_ln112_fu_379_p3;
    select_ln115_2_fu_347_p3 <= 
        ap_const_lv14_1 when (icmp_ln115_fu_297_p2(0) = '1') else 
        add_ln115_1_fu_341_p2;
    select_ln115_fu_398_p3 <= 
        ap_const_lv4_0 when (or_ln115_reg_757(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln118_1_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_1_fu_461_p3),8));
    select_ln118_1_fu_461_p3 <= 
        j_2_fu_437_p2 when (and_ln115_fu_420_p2(0) = '1') else 
        select_ln115_fu_398_p3;
    select_ln118_2_fu_333_p3 <= 
        ap_const_lv10_1 when (or_ln115_fu_321_p2(0) = '1') else 
        add_ln118_1_fu_327_p2;
    select_ln118_fu_453_p3 <= 
        ap_const_lv6_0 when (or_ln118_1_fu_447_p2(0) = '1') else 
        ap_sig_allocacmp_p_load;
    shl_ln_fu_539_p3 <= (trunc_ln128_reg_767_pp0_iter2_reg & ap_const_lv4_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tm_2_fu_392_p2 <= std_logic_vector(unsigned(select_ln112_fu_379_p3) + unsigned(ap_const_lv5_1));
    tmp_2_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_477_p3),8));
    tmp_2_fu_477_p3 <= (select_ln115_1_fu_426_p3 & ap_const_lv2_0);
    tmp_fu_469_p3 <= (trunc_ln118_fu_433_p1 & ap_const_lv4_0);
    trunc_ln118_fu_433_p1 <= select_ln115_1_fu_426_p3(4 - 1 downto 0);
    trunc_ln128_fu_505_p1 <= select_ln118_fu_453_p3(5 - 1 downto 0);
    xor_ln112_fu_303_p2 <= (icmp_ln115_fu_297_p2 xor ap_const_lv1_1);
    xor_ln115_fu_405_p2 <= (icmp_ln118_reg_746 xor ap_const_lv1_1);
    zext_ln128_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln128_fu_546_p2),512));
end behav;
