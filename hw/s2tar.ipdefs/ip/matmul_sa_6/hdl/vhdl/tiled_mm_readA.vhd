-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_readA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_port_a_AWVALID : OUT STD_LOGIC;
    m_axi_port_a_AWREADY : IN STD_LOGIC;
    m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WVALID : OUT STD_LOGIC;
    m_axi_port_a_WREADY : IN STD_LOGIC;
    m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WLAST : OUT STD_LOGIC;
    m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_ARVALID : OUT STD_LOGIC;
    m_axi_port_a_ARREADY : IN STD_LOGIC;
    m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RVALID : IN STD_LOGIC;
    m_axi_port_a_RREADY : OUT STD_LOGIC;
    m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_RLAST : IN STD_LOGIC;
    m_axi_port_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BVALID : IN STD_LOGIC;
    m_axi_port_a_BREADY : OUT STD_LOGIC;
    m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    a_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_0_ce0 : OUT STD_LOGIC;
    a_cache_0_we0 : OUT STD_LOGIC;
    a_cache_0_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    a_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_1_ce0 : OUT STD_LOGIC;
    a_cache_1_we0 : OUT STD_LOGIC;
    a_cache_1_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    a_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_2_ce0 : OUT STD_LOGIC;
    a_cache_2_we0 : OUT STD_LOGIC;
    a_cache_2_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    a_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_3_ce0 : OUT STD_LOGIC;
    a_cache_3_we0 : OUT STD_LOGIC;
    a_cache_3_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    a_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_4_ce0 : OUT STD_LOGIC;
    a_cache_4_we0 : OUT STD_LOGIC;
    a_cache_4_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    a_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_cache_5_ce0 : OUT STD_LOGIC;
    a_cache_5_we0 : OUT STD_LOGIC;
    a_cache_5_d0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of tiled_mm_readA is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_480 : STD_LOGIC_VECTOR (10 downto 0) := "10010000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal port_a_blk_n_AR : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal add_ln95_fu_246_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln95_reg_435 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln95_fu_270_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln95_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln95_1_fu_278_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln95_1_reg_446 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln95_reg_453 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln105_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_reg_458 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_ap_start : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_ap_done : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_ap_idle : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_ap_ready : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWVALID : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WVALID : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WLAST : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARVALID : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_RREADY : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_BREADY : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out_ap_vld : STD_LOGIC;
    signal grp_readA_Pipeline_rd_a_pack_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln95_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln105_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_fu_100 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_7_fu_377_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_fu_104 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal trunc_ln95_fu_356_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln98_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_4_fu_258_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln95_fu_295_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln95_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln95_fu_295_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_fu_311_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast1_fu_301_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_329_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_321_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln105_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_1_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_286_ap_start : STD_LOGIC;
    signal grp_fu_286_ap_done : STD_LOGIC;
    signal grp_fu_286_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal mul_ln95_fu_295_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_readA_Pipeline_rd_a_pack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_port_a_AWVALID : OUT STD_LOGIC;
        m_axi_port_a_AWREADY : IN STD_LOGIC;
        m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WVALID : OUT STD_LOGIC;
        m_axi_port_a_WREADY : IN STD_LOGIC;
        m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WLAST : OUT STD_LOGIC;
        m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_ARVALID : OUT STD_LOGIC;
        m_axi_port_a_ARREADY : IN STD_LOGIC;
        m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RVALID : IN STD_LOGIC;
        m_axi_port_a_RREADY : OUT STD_LOGIC;
        m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_a_RLAST : IN STD_LOGIC;
        m_axi_port_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_BVALID : IN STD_LOGIC;
        m_axi_port_a_BREADY : OUT STD_LOGIC;
        m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        a_line_02_out : OUT STD_LOGIC_VECTOR (511 downto 0);
        a_line_02_out_ap_vld : OUT STD_LOGIC );
    end component;


    component tiled_mm_urem_7ns_4ns_3_11_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component tiled_mm_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    grp_readA_Pipeline_rd_a_pack_fu_207 : component tiled_mm_readA_Pipeline_rd_a_pack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_readA_Pipeline_rd_a_pack_fu_207_ap_start,
        ap_done => grp_readA_Pipeline_rd_a_pack_fu_207_ap_done,
        ap_idle => grp_readA_Pipeline_rd_a_pack_fu_207_ap_idle,
        ap_ready => grp_readA_Pipeline_rd_a_pack_fu_207_ap_ready,
        m_axi_port_a_AWVALID => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWVALID,
        m_axi_port_a_AWREADY => ap_const_logic_0,
        m_axi_port_a_AWADDR => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWADDR,
        m_axi_port_a_AWID => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWID,
        m_axi_port_a_AWLEN => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWLEN,
        m_axi_port_a_AWSIZE => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWSIZE,
        m_axi_port_a_AWBURST => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWBURST,
        m_axi_port_a_AWLOCK => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWLOCK,
        m_axi_port_a_AWCACHE => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWCACHE,
        m_axi_port_a_AWPROT => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWPROT,
        m_axi_port_a_AWQOS => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWQOS,
        m_axi_port_a_AWREGION => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWREGION,
        m_axi_port_a_AWUSER => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_AWUSER,
        m_axi_port_a_WVALID => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WVALID,
        m_axi_port_a_WREADY => ap_const_logic_0,
        m_axi_port_a_WDATA => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WDATA,
        m_axi_port_a_WSTRB => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WSTRB,
        m_axi_port_a_WLAST => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WLAST,
        m_axi_port_a_WID => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WID,
        m_axi_port_a_WUSER => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_WUSER,
        m_axi_port_a_ARVALID => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARVALID,
        m_axi_port_a_ARREADY => m_axi_port_a_ARREADY,
        m_axi_port_a_ARADDR => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARADDR,
        m_axi_port_a_ARID => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARID,
        m_axi_port_a_ARLEN => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLEN,
        m_axi_port_a_ARSIZE => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARSIZE,
        m_axi_port_a_ARBURST => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARBURST,
        m_axi_port_a_ARLOCK => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLOCK,
        m_axi_port_a_ARCACHE => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARCACHE,
        m_axi_port_a_ARPROT => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARPROT,
        m_axi_port_a_ARQOS => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARQOS,
        m_axi_port_a_ARREGION => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARREGION,
        m_axi_port_a_ARUSER => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARUSER,
        m_axi_port_a_RVALID => m_axi_port_a_RVALID,
        m_axi_port_a_RREADY => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_RREADY,
        m_axi_port_a_RDATA => m_axi_port_a_RDATA,
        m_axi_port_a_RLAST => m_axi_port_a_RLAST,
        m_axi_port_a_RID => m_axi_port_a_RID,
        m_axi_port_a_RFIFONUM => m_axi_port_a_RFIFONUM,
        m_axi_port_a_RUSER => m_axi_port_a_RUSER,
        m_axi_port_a_RRESP => m_axi_port_a_RRESP,
        m_axi_port_a_BVALID => ap_const_logic_0,
        m_axi_port_a_BREADY => grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_BREADY,
        m_axi_port_a_BRESP => ap_const_lv2_0,
        m_axi_port_a_BID => ap_const_lv1_0,
        m_axi_port_a_BUSER => ap_const_lv1_0,
        a => a,
        a_line_02_out => grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out,
        a_line_02_out_ap_vld => grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out_ap_vld);

    urem_7ns_4ns_3_11_seq_1_U6 : component tiled_mm_urem_7ns_4ns_3_11_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_286_ap_start,
        done => grp_fu_286_ap_done,
        din0 => grp_fu_286_p0,
        din1 => grp_fu_286_p1,
        ce => grp_fu_286_ce,
        dout => grp_fu_286_p2);

    mul_7ns_9ns_15_1_1_U7 : component tiled_mm_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln95_fu_295_p0,
        din1 => mul_ln95_fu_295_p1,
        dout => mul_ln95_fu_295_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln95_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_readA_Pipeline_rd_a_pack_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_readA_Pipeline_rd_a_pack_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_readA_Pipeline_rd_a_pack_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_readA_Pipeline_rd_a_pack_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_readA_Pipeline_rd_a_pack_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_100 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_fu_100 <= i_7_fu_377_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_108 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten_fu_108 <= add_ln95_reg_435;
            end if; 
        end if;
    end process;

    m_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_fu_104 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                m_fu_104 <= select_ln95_1_reg_446;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln105_reg_458 <= add_ln105_fu_350_p2;
                urem_ln95_reg_453 <= grp_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln95_reg_435 <= add_ln95_fu_246_p2;
                select_ln95_1_reg_446 <= select_ln95_1_fu_278_p3;
                select_ln95_reg_440 <= select_ln95_fu_270_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, m_axi_port_a_ARREADY, ap_block_state1, ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_ap_done, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln95_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_readA_Pipeline_rd_a_pack_fu_207_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_cache_0_address0 <= zext_ln105_2_fu_359_p1(8 - 1 downto 0);

    a_cache_0_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_cache_0_ce0 <= ap_const_logic_1;
        else 
            a_cache_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_0_d0 <= grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out;

    a_cache_0_we0_assign_proc : process(ap_CS_fsm_state20, trunc_ln95_fu_356_p1)
    begin
        if (((trunc_ln95_fu_356_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            a_cache_0_we0 <= ap_const_logic_1;
        else 
            a_cache_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_1_address0 <= zext_ln105_2_fu_359_p1(8 - 1 downto 0);

    a_cache_1_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_cache_1_ce0 <= ap_const_logic_1;
        else 
            a_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_1_d0 <= grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out;

    a_cache_1_we0_assign_proc : process(ap_CS_fsm_state20, trunc_ln95_fu_356_p1)
    begin
        if (((trunc_ln95_fu_356_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            a_cache_1_we0 <= ap_const_logic_1;
        else 
            a_cache_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_2_address0 <= zext_ln105_2_fu_359_p1(8 - 1 downto 0);

    a_cache_2_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_cache_2_ce0 <= ap_const_logic_1;
        else 
            a_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_2_d0 <= grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out;

    a_cache_2_we0_assign_proc : process(ap_CS_fsm_state20, trunc_ln95_fu_356_p1)
    begin
        if (((trunc_ln95_fu_356_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            a_cache_2_we0 <= ap_const_logic_1;
        else 
            a_cache_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_3_address0 <= zext_ln105_2_fu_359_p1(8 - 1 downto 0);

    a_cache_3_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_cache_3_ce0 <= ap_const_logic_1;
        else 
            a_cache_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_3_d0 <= grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out;

    a_cache_3_we0_assign_proc : process(ap_CS_fsm_state20, trunc_ln95_fu_356_p1)
    begin
        if (((trunc_ln95_fu_356_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            a_cache_3_we0 <= ap_const_logic_1;
        else 
            a_cache_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_4_address0 <= zext_ln105_2_fu_359_p1(8 - 1 downto 0);

    a_cache_4_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_cache_4_ce0 <= ap_const_logic_1;
        else 
            a_cache_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_4_d0 <= grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out;

    a_cache_4_we0_assign_proc : process(ap_CS_fsm_state20, trunc_ln95_fu_356_p1)
    begin
        if (((trunc_ln95_fu_356_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            a_cache_4_we0 <= ap_const_logic_1;
        else 
            a_cache_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_5_address0 <= zext_ln105_2_fu_359_p1(8 - 1 downto 0);

    a_cache_5_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_cache_5_ce0 <= ap_const_logic_1;
        else 
            a_cache_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_cache_5_d0 <= grp_readA_Pipeline_rd_a_pack_fu_207_a_line_02_out;

    a_cache_5_we0_assign_proc : process(ap_CS_fsm_state20, trunc_ln95_fu_356_p1)
    begin
        if ((not((trunc_ln95_fu_356_p1 = ap_const_lv3_0)) and not((trunc_ln95_fu_356_p1 = ap_const_lv3_1)) and not((trunc_ln95_fu_356_p1 = ap_const_lv3_2)) and not((trunc_ln95_fu_356_p1 = ap_const_lv3_3)) and not((trunc_ln95_fu_356_p1 = ap_const_lv3_4)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            a_cache_5_we0 <= ap_const_logic_1;
        else 
            a_cache_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_350_p2 <= std_logic_vector(unsigned(sub_ln105_fu_341_p2) + unsigned(zext_ln105_1_fu_347_p1));
    add_ln95_fu_246_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_108) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_readA_Pipeline_rd_a_pack_fu_207_ap_done)
    begin
        if ((grp_readA_Pipeline_rd_a_pack_fu_207_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(m_axi_port_a_ARREADY, ap_block_state1)
    begin
        if (((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, icmp_ln95_fu_240_p2)
    begin
        if (((icmp_ln95_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln95_fu_240_p2)
    begin
        if (((icmp_ln95_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_286_ap_start_assign_proc : process(ap_CS_fsm_state9, icmp_ln95_fu_240_p2)
    begin
        if (((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_286_ap_start <= ap_const_logic_1;
        else 
            grp_fu_286_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_286_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_286_ce <= ap_const_logic_1;
        else 
            grp_fu_286_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_286_p0 <= 
        m_4_fu_258_p2 when (icmp_ln98_fu_264_p2(0) = '1') else 
        m_fu_104;
    grp_fu_286_p1 <= ap_const_lv7_6(4 - 1 downto 0);
    grp_readA_Pipeline_rd_a_pack_fu_207_ap_start <= grp_readA_Pipeline_rd_a_pack_fu_207_ap_start_reg;
    i_7_fu_377_p2 <= std_logic_vector(unsigned(select_ln95_reg_440) + unsigned(ap_const_lv4_1));
    icmp_ln95_fu_240_p2 <= "1" when (indvar_flatten_fu_108 = ap_const_lv11_480) else "0";
    icmp_ln98_fu_264_p2 <= "1" when (i_fu_100 = ap_const_lv4_C) else "0";
    m_4_fu_258_p2 <= std_logic_vector(unsigned(m_fu_104) + unsigned(ap_const_lv7_1));

    m_axi_port_a_ARADDR_assign_proc : process(ap_CS_fsm_state1, m_axi_port_a_ARREADY, a, ap_block_state1, ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARADDR, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_port_a_ARADDR <= a;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARADDR <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARADDR;
        else 
            m_axi_port_a_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_port_a_ARBURST_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARBURST, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARBURST <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARBURST;
        else 
            m_axi_port_a_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_port_a_ARCACHE_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARCACHE, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARCACHE <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARCACHE;
        else 
            m_axi_port_a_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_port_a_ARID_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARID, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARID <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARID;
        else 
            m_axi_port_a_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_port_a_ARLEN_assign_proc : process(ap_CS_fsm_state1, m_axi_port_a_ARREADY, ap_block_state1, ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLEN, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_port_a_ARLEN <= ap_const_lv32_12000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARLEN <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLEN;
        else 
            m_axi_port_a_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_port_a_ARLOCK_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLOCK, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARLOCK <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARLOCK;
        else 
            m_axi_port_a_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_port_a_ARPROT_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARPROT, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARPROT <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARPROT;
        else 
            m_axi_port_a_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_port_a_ARQOS_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARQOS, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARQOS <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARQOS;
        else 
            m_axi_port_a_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_port_a_ARREGION_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARREGION, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARREGION <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARREGION;
        else 
            m_axi_port_a_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_port_a_ARSIZE_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARSIZE, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARSIZE <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARSIZE;
        else 
            m_axi_port_a_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_port_a_ARUSER_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARUSER, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARUSER <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARUSER;
        else 
            m_axi_port_a_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_port_a_ARVALID_assign_proc : process(ap_CS_fsm_state1, m_axi_port_a_ARREADY, ap_block_state1, ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARVALID, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if ((not(((m_axi_port_a_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_port_a_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_ARVALID <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_ARVALID;
        else 
            m_axi_port_a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_a_AWADDR <= ap_const_lv64_0;
    m_axi_port_a_AWBURST <= ap_const_lv2_0;
    m_axi_port_a_AWCACHE <= ap_const_lv4_0;
    m_axi_port_a_AWID <= ap_const_lv1_0;
    m_axi_port_a_AWLEN <= ap_const_lv32_0;
    m_axi_port_a_AWLOCK <= ap_const_lv2_0;
    m_axi_port_a_AWPROT <= ap_const_lv3_0;
    m_axi_port_a_AWQOS <= ap_const_lv4_0;
    m_axi_port_a_AWREGION <= ap_const_lv4_0;
    m_axi_port_a_AWSIZE <= ap_const_lv3_0;
    m_axi_port_a_AWUSER <= ap_const_lv1_0;
    m_axi_port_a_AWVALID <= ap_const_logic_0;
    m_axi_port_a_BREADY <= ap_const_logic_0;

    m_axi_port_a_RREADY_assign_proc : process(ap_CS_fsm_state9, grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_RREADY, icmp_ln95_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln95_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_port_a_RREADY <= grp_readA_Pipeline_rd_a_pack_fu_207_m_axi_port_a_RREADY;
        else 
            m_axi_port_a_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_a_WDATA <= ap_const_lv8_0;
    m_axi_port_a_WID <= ap_const_lv1_0;
    m_axi_port_a_WLAST <= ap_const_logic_0;
    m_axi_port_a_WSTRB <= ap_const_lv1_0;
    m_axi_port_a_WUSER <= ap_const_lv1_0;
    m_axi_port_a_WVALID <= ap_const_logic_0;
    mul_ln95_fu_295_p0 <= mul_ln95_fu_295_p00(7 - 1 downto 0);
    mul_ln95_fu_295_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln95_1_reg_446),15));
    mul_ln95_fu_295_p1 <= ap_const_lv15_AB(9 - 1 downto 0);

    port_a_blk_n_AR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_port_a_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            port_a_blk_n_AR <= m_axi_port_a_ARREADY;
        else 
            port_a_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    select_ln95_1_fu_278_p3 <= 
        m_4_fu_258_p2 when (icmp_ln98_fu_264_p2(0) = '1') else 
        m_fu_104;
    select_ln95_fu_270_p3 <= 
        ap_const_lv4_0 when (icmp_ln98_fu_264_p2(0) = '1') else 
        i_fu_100;
    sub_ln105_fu_341_p2 <= std_logic_vector(unsigned(tmp_9_fu_321_p3) - unsigned(zext_ln105_fu_337_p1));
    tmp_9_fu_321_p3 <= (tmp_cast_fu_311_p4 & ap_const_lv4_0);
    tmp_cast1_fu_301_p4 <= mul_ln95_fu_295_p2(14 downto 10);
    tmp_cast_fu_311_p4 <= mul_ln95_fu_295_p2(13 downto 10);
    tmp_s_fu_329_p3 <= (tmp_cast1_fu_301_p4 & ap_const_lv2_0);
    trunc_ln95_fu_356_p1 <= urem_ln95_reg_453(3 - 1 downto 0);
    zext_ln105_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln95_reg_440),8));
    zext_ln105_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_reg_458),64));
    zext_ln105_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_329_p3),8));
end behav;
