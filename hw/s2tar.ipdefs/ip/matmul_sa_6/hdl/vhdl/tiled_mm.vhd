-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm is
generic (
    C_M_AXI_PORT_A_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_PORT_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PORT_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_B_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_PORT_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PORT_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_C_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_PORT_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PORT_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PORT_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PORT_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_PORT_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PORT_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_PORT_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_PORT_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PORT_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_PORT_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_PORT_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PORT_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_port_a_AWVALID : OUT STD_LOGIC;
    m_axi_port_a_AWREADY : IN STD_LOGIC;
    m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ADDR_WIDTH-1 downto 0);
    m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ID_WIDTH-1 downto 0);
    m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_AWUSER_WIDTH-1 downto 0);
    m_axi_port_a_WVALID : OUT STD_LOGIC;
    m_axi_port_a_WREADY : IN STD_LOGIC;
    m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_DATA_WIDTH-1 downto 0);
    m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_DATA_WIDTH/8-1 downto 0);
    m_axi_port_a_WLAST : OUT STD_LOGIC;
    m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ID_WIDTH-1 downto 0);
    m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_WUSER_WIDTH-1 downto 0);
    m_axi_port_a_ARVALID : OUT STD_LOGIC;
    m_axi_port_a_ARREADY : IN STD_LOGIC;
    m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ADDR_WIDTH-1 downto 0);
    m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ID_WIDTH-1 downto 0);
    m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ARUSER_WIDTH-1 downto 0);
    m_axi_port_a_RVALID : IN STD_LOGIC;
    m_axi_port_a_RREADY : OUT STD_LOGIC;
    m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_A_DATA_WIDTH-1 downto 0);
    m_axi_port_a_RLAST : IN STD_LOGIC;
    m_axi_port_a_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ID_WIDTH-1 downto 0);
    m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_A_RUSER_WIDTH-1 downto 0);
    m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BVALID : IN STD_LOGIC;
    m_axi_port_a_BREADY : OUT STD_LOGIC;
    m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_A_ID_WIDTH-1 downto 0);
    m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_A_BUSER_WIDTH-1 downto 0);
    m_axi_port_b_AWVALID : OUT STD_LOGIC;
    m_axi_port_b_AWREADY : IN STD_LOGIC;
    m_axi_port_b_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ADDR_WIDTH-1 downto 0);
    m_axi_port_b_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ID_WIDTH-1 downto 0);
    m_axi_port_b_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_AWUSER_WIDTH-1 downto 0);
    m_axi_port_b_WVALID : OUT STD_LOGIC;
    m_axi_port_b_WREADY : IN STD_LOGIC;
    m_axi_port_b_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_DATA_WIDTH-1 downto 0);
    m_axi_port_b_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_DATA_WIDTH/8-1 downto 0);
    m_axi_port_b_WLAST : OUT STD_LOGIC;
    m_axi_port_b_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ID_WIDTH-1 downto 0);
    m_axi_port_b_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_WUSER_WIDTH-1 downto 0);
    m_axi_port_b_ARVALID : OUT STD_LOGIC;
    m_axi_port_b_ARREADY : IN STD_LOGIC;
    m_axi_port_b_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ADDR_WIDTH-1 downto 0);
    m_axi_port_b_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ID_WIDTH-1 downto 0);
    m_axi_port_b_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ARUSER_WIDTH-1 downto 0);
    m_axi_port_b_RVALID : IN STD_LOGIC;
    m_axi_port_b_RREADY : OUT STD_LOGIC;
    m_axi_port_b_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_B_DATA_WIDTH-1 downto 0);
    m_axi_port_b_RLAST : IN STD_LOGIC;
    m_axi_port_b_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ID_WIDTH-1 downto 0);
    m_axi_port_b_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_B_RUSER_WIDTH-1 downto 0);
    m_axi_port_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_BVALID : IN STD_LOGIC;
    m_axi_port_b_BREADY : OUT STD_LOGIC;
    m_axi_port_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_B_ID_WIDTH-1 downto 0);
    m_axi_port_b_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_B_BUSER_WIDTH-1 downto 0);
    m_axi_port_c_AWVALID : OUT STD_LOGIC;
    m_axi_port_c_AWREADY : IN STD_LOGIC;
    m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ADDR_WIDTH-1 downto 0);
    m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ID_WIDTH-1 downto 0);
    m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_AWUSER_WIDTH-1 downto 0);
    m_axi_port_c_WVALID : OUT STD_LOGIC;
    m_axi_port_c_WREADY : IN STD_LOGIC;
    m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_DATA_WIDTH-1 downto 0);
    m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_DATA_WIDTH/8-1 downto 0);
    m_axi_port_c_WLAST : OUT STD_LOGIC;
    m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ID_WIDTH-1 downto 0);
    m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_WUSER_WIDTH-1 downto 0);
    m_axi_port_c_ARVALID : OUT STD_LOGIC;
    m_axi_port_c_ARREADY : IN STD_LOGIC;
    m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ADDR_WIDTH-1 downto 0);
    m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ID_WIDTH-1 downto 0);
    m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ARUSER_WIDTH-1 downto 0);
    m_axi_port_c_RVALID : IN STD_LOGIC;
    m_axi_port_c_RREADY : OUT STD_LOGIC;
    m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_C_DATA_WIDTH-1 downto 0);
    m_axi_port_c_RLAST : IN STD_LOGIC;
    m_axi_port_c_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ID_WIDTH-1 downto 0);
    m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_C_RUSER_WIDTH-1 downto 0);
    m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BVALID : IN STD_LOGIC;
    m_axi_port_c_BREADY : OUT STD_LOGIC;
    m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_C_ID_WIDTH-1 downto 0);
    m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PORT_C_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of tiled_mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tiled_mm_tiled_mm,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.120000,HLS_SYN_LAT=1638185,HLS_SYN_TPT=none,HLS_SYN_MEM=150,HLS_SYN_DSP=0,HLS_SYN_FF=10576,HLS_SYN_LUT=55748,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (63 downto 0);
    signal b : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r_read_reg_144 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_read_reg_149 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_read_reg_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln287_fu_128_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln287_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_WVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_WLAST : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_RREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_a_BREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_WVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_WLAST : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_RREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_b_BREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_WVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_WLAST : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARVALID : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_RREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_m_axi_port_c_BREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_ap_start : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_ap_done : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_ap_ready : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_ap_idle : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_ap_continue : STD_LOGIC;
    signal port_a_AWREADY : STD_LOGIC;
    signal port_a_WREADY : STD_LOGIC;
    signal port_a_ARVALID : STD_LOGIC;
    signal port_a_ARREADY : STD_LOGIC;
    signal port_a_RVALID : STD_LOGIC;
    signal port_a_RREADY : STD_LOGIC;
    signal port_a_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal port_a_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal port_a_BVALID : STD_LOGIC;
    signal port_b_AWREADY : STD_LOGIC;
    signal port_b_WREADY : STD_LOGIC;
    signal port_b_ARVALID : STD_LOGIC;
    signal port_b_ARREADY : STD_LOGIC;
    signal port_b_RVALID : STD_LOGIC;
    signal port_b_RREADY : STD_LOGIC;
    signal port_b_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal port_b_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal port_b_BVALID : STD_LOGIC;
    signal port_c_AWVALID : STD_LOGIC;
    signal port_c_AWREADY : STD_LOGIC;
    signal port_c_WVALID : STD_LOGIC;
    signal port_c_WREADY : STD_LOGIC;
    signal port_c_ARREADY : STD_LOGIC;
    signal port_c_RVALID : STD_LOGIC;
    signal port_c_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal port_c_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal port_c_BVALID : STD_LOGIC;
    signal port_c_BREADY : STD_LOGIC;
    signal grp_mm_mult_systolic_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_grp_mm_mult_systolic_fu_94_ap_ready : STD_LOGIC;
    signal ap_sync_grp_mm_mult_systolic_fu_94_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_done : STD_LOGIC := '0';
    signal tn_fu_72 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln287_fu_122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln287_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_mm_mult_systolic IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        m_axi_port_a_AWVALID : OUT STD_LOGIC;
        m_axi_port_a_AWREADY : IN STD_LOGIC;
        m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WVALID : OUT STD_LOGIC;
        m_axi_port_a_WREADY : IN STD_LOGIC;
        m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WLAST : OUT STD_LOGIC;
        m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_ARVALID : OUT STD_LOGIC;
        m_axi_port_a_ARREADY : IN STD_LOGIC;
        m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RVALID : IN STD_LOGIC;
        m_axi_port_a_RREADY : OUT STD_LOGIC;
        m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_a_RLAST : IN STD_LOGIC;
        m_axi_port_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_BVALID : IN STD_LOGIC;
        m_axi_port_a_BREADY : OUT STD_LOGIC;
        m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_AWVALID : OUT STD_LOGIC;
        m_axi_port_b_AWREADY : IN STD_LOGIC;
        m_axi_port_b_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WVALID : OUT STD_LOGIC;
        m_axi_port_b_WREADY : IN STD_LOGIC;
        m_axi_port_b_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_b_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WLAST : OUT STD_LOGIC;
        m_axi_port_b_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_ARVALID : OUT STD_LOGIC;
        m_axi_port_b_ARREADY : IN STD_LOGIC;
        m_axi_port_b_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RVALID : IN STD_LOGIC;
        m_axi_port_b_RREADY : OUT STD_LOGIC;
        m_axi_port_b_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_b_RLAST : IN STD_LOGIC;
        m_axi_port_b_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_b_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_BVALID : IN STD_LOGIC;
        m_axi_port_b_BREADY : OUT STD_LOGIC;
        m_axi_port_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_AWVALID : OUT STD_LOGIC;
        m_axi_port_c_AWREADY : IN STD_LOGIC;
        m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WVALID : OUT STD_LOGIC;
        m_axi_port_c_WREADY : IN STD_LOGIC;
        m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WLAST : OUT STD_LOGIC;
        m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_ARVALID : OUT STD_LOGIC;
        m_axi_port_c_ARREADY : IN STD_LOGIC;
        m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RVALID : IN STD_LOGIC;
        m_axi_port_c_RREADY : OUT STD_LOGIC;
        m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_c_RLAST : IN STD_LOGIC;
        m_axi_port_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_BVALID : IN STD_LOGIC;
        m_axi_port_c_BREADY : OUT STD_LOGIC;
        m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        tn : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        a_ap_vld : IN STD_LOGIC;
        b_ap_vld : IN STD_LOGIC;
        tn_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component tiled_mm_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (63 downto 0);
        b : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component tiled_mm_port_a_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component tiled_mm_port_b_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component tiled_mm_port_c_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_mm_mult_systolic_fu_94 : component tiled_mm_mm_mult_systolic
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        m_axi_port_a_AWVALID => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWVALID,
        m_axi_port_a_AWREADY => ap_const_logic_0,
        m_axi_port_a_AWADDR => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWADDR,
        m_axi_port_a_AWID => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWID,
        m_axi_port_a_AWLEN => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWLEN,
        m_axi_port_a_AWSIZE => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWSIZE,
        m_axi_port_a_AWBURST => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWBURST,
        m_axi_port_a_AWLOCK => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWLOCK,
        m_axi_port_a_AWCACHE => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWCACHE,
        m_axi_port_a_AWPROT => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWPROT,
        m_axi_port_a_AWQOS => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWQOS,
        m_axi_port_a_AWREGION => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWREGION,
        m_axi_port_a_AWUSER => grp_mm_mult_systolic_fu_94_m_axi_port_a_AWUSER,
        m_axi_port_a_WVALID => grp_mm_mult_systolic_fu_94_m_axi_port_a_WVALID,
        m_axi_port_a_WREADY => ap_const_logic_0,
        m_axi_port_a_WDATA => grp_mm_mult_systolic_fu_94_m_axi_port_a_WDATA,
        m_axi_port_a_WSTRB => grp_mm_mult_systolic_fu_94_m_axi_port_a_WSTRB,
        m_axi_port_a_WLAST => grp_mm_mult_systolic_fu_94_m_axi_port_a_WLAST,
        m_axi_port_a_WID => grp_mm_mult_systolic_fu_94_m_axi_port_a_WID,
        m_axi_port_a_WUSER => grp_mm_mult_systolic_fu_94_m_axi_port_a_WUSER,
        m_axi_port_a_ARVALID => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARVALID,
        m_axi_port_a_ARREADY => port_a_ARREADY,
        m_axi_port_a_ARADDR => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARADDR,
        m_axi_port_a_ARID => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARID,
        m_axi_port_a_ARLEN => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARLEN,
        m_axi_port_a_ARSIZE => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARSIZE,
        m_axi_port_a_ARBURST => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARBURST,
        m_axi_port_a_ARLOCK => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARLOCK,
        m_axi_port_a_ARCACHE => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARCACHE,
        m_axi_port_a_ARPROT => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARPROT,
        m_axi_port_a_ARQOS => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARQOS,
        m_axi_port_a_ARREGION => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARREGION,
        m_axi_port_a_ARUSER => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARUSER,
        m_axi_port_a_RVALID => port_a_RVALID,
        m_axi_port_a_RREADY => grp_mm_mult_systolic_fu_94_m_axi_port_a_RREADY,
        m_axi_port_a_RDATA => port_a_RDATA,
        m_axi_port_a_RLAST => ap_const_logic_0,
        m_axi_port_a_RID => ap_const_lv1_0,
        m_axi_port_a_RFIFONUM => port_a_RFIFONUM,
        m_axi_port_a_RUSER => ap_const_lv1_0,
        m_axi_port_a_RRESP => ap_const_lv2_0,
        m_axi_port_a_BVALID => ap_const_logic_0,
        m_axi_port_a_BREADY => grp_mm_mult_systolic_fu_94_m_axi_port_a_BREADY,
        m_axi_port_a_BRESP => ap_const_lv2_0,
        m_axi_port_a_BID => ap_const_lv1_0,
        m_axi_port_a_BUSER => ap_const_lv1_0,
        a => a_read_reg_154,
        m_axi_port_b_AWVALID => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWVALID,
        m_axi_port_b_AWREADY => ap_const_logic_0,
        m_axi_port_b_AWADDR => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWADDR,
        m_axi_port_b_AWID => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWID,
        m_axi_port_b_AWLEN => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWLEN,
        m_axi_port_b_AWSIZE => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWSIZE,
        m_axi_port_b_AWBURST => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWBURST,
        m_axi_port_b_AWLOCK => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWLOCK,
        m_axi_port_b_AWCACHE => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWCACHE,
        m_axi_port_b_AWPROT => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWPROT,
        m_axi_port_b_AWQOS => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWQOS,
        m_axi_port_b_AWREGION => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWREGION,
        m_axi_port_b_AWUSER => grp_mm_mult_systolic_fu_94_m_axi_port_b_AWUSER,
        m_axi_port_b_WVALID => grp_mm_mult_systolic_fu_94_m_axi_port_b_WVALID,
        m_axi_port_b_WREADY => ap_const_logic_0,
        m_axi_port_b_WDATA => grp_mm_mult_systolic_fu_94_m_axi_port_b_WDATA,
        m_axi_port_b_WSTRB => grp_mm_mult_systolic_fu_94_m_axi_port_b_WSTRB,
        m_axi_port_b_WLAST => grp_mm_mult_systolic_fu_94_m_axi_port_b_WLAST,
        m_axi_port_b_WID => grp_mm_mult_systolic_fu_94_m_axi_port_b_WID,
        m_axi_port_b_WUSER => grp_mm_mult_systolic_fu_94_m_axi_port_b_WUSER,
        m_axi_port_b_ARVALID => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARVALID,
        m_axi_port_b_ARREADY => port_b_ARREADY,
        m_axi_port_b_ARADDR => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARADDR,
        m_axi_port_b_ARID => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARID,
        m_axi_port_b_ARLEN => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARLEN,
        m_axi_port_b_ARSIZE => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARSIZE,
        m_axi_port_b_ARBURST => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARBURST,
        m_axi_port_b_ARLOCK => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARLOCK,
        m_axi_port_b_ARCACHE => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARCACHE,
        m_axi_port_b_ARPROT => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARPROT,
        m_axi_port_b_ARQOS => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARQOS,
        m_axi_port_b_ARREGION => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARREGION,
        m_axi_port_b_ARUSER => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARUSER,
        m_axi_port_b_RVALID => port_b_RVALID,
        m_axi_port_b_RREADY => grp_mm_mult_systolic_fu_94_m_axi_port_b_RREADY,
        m_axi_port_b_RDATA => port_b_RDATA,
        m_axi_port_b_RLAST => ap_const_logic_0,
        m_axi_port_b_RID => ap_const_lv1_0,
        m_axi_port_b_RFIFONUM => port_b_RFIFONUM,
        m_axi_port_b_RUSER => ap_const_lv1_0,
        m_axi_port_b_RRESP => ap_const_lv2_0,
        m_axi_port_b_BVALID => ap_const_logic_0,
        m_axi_port_b_BREADY => grp_mm_mult_systolic_fu_94_m_axi_port_b_BREADY,
        m_axi_port_b_BRESP => ap_const_lv2_0,
        m_axi_port_b_BID => ap_const_lv1_0,
        m_axi_port_b_BUSER => ap_const_lv1_0,
        b => b_read_reg_149,
        m_axi_port_c_AWVALID => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWVALID,
        m_axi_port_c_AWREADY => port_c_AWREADY,
        m_axi_port_c_AWADDR => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWADDR,
        m_axi_port_c_AWID => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWID,
        m_axi_port_c_AWLEN => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWLEN,
        m_axi_port_c_AWSIZE => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWSIZE,
        m_axi_port_c_AWBURST => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWBURST,
        m_axi_port_c_AWLOCK => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWLOCK,
        m_axi_port_c_AWCACHE => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWCACHE,
        m_axi_port_c_AWPROT => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWPROT,
        m_axi_port_c_AWQOS => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWQOS,
        m_axi_port_c_AWREGION => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWREGION,
        m_axi_port_c_AWUSER => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWUSER,
        m_axi_port_c_WVALID => grp_mm_mult_systolic_fu_94_m_axi_port_c_WVALID,
        m_axi_port_c_WREADY => port_c_WREADY,
        m_axi_port_c_WDATA => grp_mm_mult_systolic_fu_94_m_axi_port_c_WDATA,
        m_axi_port_c_WSTRB => grp_mm_mult_systolic_fu_94_m_axi_port_c_WSTRB,
        m_axi_port_c_WLAST => grp_mm_mult_systolic_fu_94_m_axi_port_c_WLAST,
        m_axi_port_c_WID => grp_mm_mult_systolic_fu_94_m_axi_port_c_WID,
        m_axi_port_c_WUSER => grp_mm_mult_systolic_fu_94_m_axi_port_c_WUSER,
        m_axi_port_c_ARVALID => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARVALID,
        m_axi_port_c_ARREADY => ap_const_logic_0,
        m_axi_port_c_ARADDR => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARADDR,
        m_axi_port_c_ARID => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARID,
        m_axi_port_c_ARLEN => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARLEN,
        m_axi_port_c_ARSIZE => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARSIZE,
        m_axi_port_c_ARBURST => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARBURST,
        m_axi_port_c_ARLOCK => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARLOCK,
        m_axi_port_c_ARCACHE => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARCACHE,
        m_axi_port_c_ARPROT => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARPROT,
        m_axi_port_c_ARQOS => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARQOS,
        m_axi_port_c_ARREGION => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARREGION,
        m_axi_port_c_ARUSER => grp_mm_mult_systolic_fu_94_m_axi_port_c_ARUSER,
        m_axi_port_c_RVALID => ap_const_logic_0,
        m_axi_port_c_RREADY => grp_mm_mult_systolic_fu_94_m_axi_port_c_RREADY,
        m_axi_port_c_RDATA => ap_const_lv8_0,
        m_axi_port_c_RLAST => ap_const_logic_0,
        m_axi_port_c_RID => ap_const_lv1_0,
        m_axi_port_c_RFIFONUM => ap_const_lv11_0,
        m_axi_port_c_RUSER => ap_const_lv1_0,
        m_axi_port_c_RRESP => ap_const_lv2_0,
        m_axi_port_c_BVALID => port_c_BVALID,
        m_axi_port_c_BREADY => grp_mm_mult_systolic_fu_94_m_axi_port_c_BREADY,
        m_axi_port_c_BRESP => ap_const_lv2_0,
        m_axi_port_c_BID => ap_const_lv1_0,
        m_axi_port_c_BUSER => ap_const_lv1_0,
        out_r => out_r_read_reg_144,
        tn => trunc_ln287_reg_162,
        out_r_ap_vld => ap_const_logic_1,
        ap_start => grp_mm_mult_systolic_fu_94_ap_start,
        a_ap_vld => ap_const_logic_1,
        b_ap_vld => ap_const_logic_1,
        tn_ap_vld => ap_const_logic_1,
        ap_done => grp_mm_mult_systolic_fu_94_ap_done,
        ap_ready => grp_mm_mult_systolic_fu_94_ap_ready,
        ap_idle => grp_mm_mult_systolic_fu_94_ap_idle,
        ap_continue => grp_mm_mult_systolic_fu_94_ap_continue);

    control_s_axi_U : component tiled_mm_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a => a,
        b => b,
        out_r => out_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    port_a_m_axi_U : component tiled_mm_port_a_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PORT_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PORT_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PORT_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PORT_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PORT_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PORT_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PORT_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PORT_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PORT_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PORT_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PORT_A_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_port_a_AWVALID,
        AWREADY => m_axi_port_a_AWREADY,
        AWADDR => m_axi_port_a_AWADDR,
        AWID => m_axi_port_a_AWID,
        AWLEN => m_axi_port_a_AWLEN,
        AWSIZE => m_axi_port_a_AWSIZE,
        AWBURST => m_axi_port_a_AWBURST,
        AWLOCK => m_axi_port_a_AWLOCK,
        AWCACHE => m_axi_port_a_AWCACHE,
        AWPROT => m_axi_port_a_AWPROT,
        AWQOS => m_axi_port_a_AWQOS,
        AWREGION => m_axi_port_a_AWREGION,
        AWUSER => m_axi_port_a_AWUSER,
        WVALID => m_axi_port_a_WVALID,
        WREADY => m_axi_port_a_WREADY,
        WDATA => m_axi_port_a_WDATA,
        WSTRB => m_axi_port_a_WSTRB,
        WLAST => m_axi_port_a_WLAST,
        WID => m_axi_port_a_WID,
        WUSER => m_axi_port_a_WUSER,
        ARVALID => m_axi_port_a_ARVALID,
        ARREADY => m_axi_port_a_ARREADY,
        ARADDR => m_axi_port_a_ARADDR,
        ARID => m_axi_port_a_ARID,
        ARLEN => m_axi_port_a_ARLEN,
        ARSIZE => m_axi_port_a_ARSIZE,
        ARBURST => m_axi_port_a_ARBURST,
        ARLOCK => m_axi_port_a_ARLOCK,
        ARCACHE => m_axi_port_a_ARCACHE,
        ARPROT => m_axi_port_a_ARPROT,
        ARQOS => m_axi_port_a_ARQOS,
        ARREGION => m_axi_port_a_ARREGION,
        ARUSER => m_axi_port_a_ARUSER,
        RVALID => m_axi_port_a_RVALID,
        RREADY => m_axi_port_a_RREADY,
        RDATA => m_axi_port_a_RDATA,
        RLAST => m_axi_port_a_RLAST,
        RID => m_axi_port_a_RID,
        RUSER => m_axi_port_a_RUSER,
        RRESP => m_axi_port_a_RRESP,
        BVALID => m_axi_port_a_BVALID,
        BREADY => m_axi_port_a_BREADY,
        BRESP => m_axi_port_a_BRESP,
        BID => m_axi_port_a_BID,
        BUSER => m_axi_port_a_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => port_a_ARVALID,
        I_ARREADY => port_a_ARREADY,
        I_ARADDR => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARADDR,
        I_ARLEN => grp_mm_mult_systolic_fu_94_m_axi_port_a_ARLEN,
        I_RVALID => port_a_RVALID,
        I_RREADY => port_a_RREADY,
        I_RDATA => port_a_RDATA,
        I_RFIFONUM => port_a_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => port_a_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => port_a_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => port_a_BVALID,
        I_BREADY => ap_const_logic_0);

    port_b_m_axi_U : component tiled_mm_port_b_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PORT_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PORT_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PORT_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PORT_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PORT_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PORT_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PORT_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PORT_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PORT_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PORT_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PORT_B_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_port_b_AWVALID,
        AWREADY => m_axi_port_b_AWREADY,
        AWADDR => m_axi_port_b_AWADDR,
        AWID => m_axi_port_b_AWID,
        AWLEN => m_axi_port_b_AWLEN,
        AWSIZE => m_axi_port_b_AWSIZE,
        AWBURST => m_axi_port_b_AWBURST,
        AWLOCK => m_axi_port_b_AWLOCK,
        AWCACHE => m_axi_port_b_AWCACHE,
        AWPROT => m_axi_port_b_AWPROT,
        AWQOS => m_axi_port_b_AWQOS,
        AWREGION => m_axi_port_b_AWREGION,
        AWUSER => m_axi_port_b_AWUSER,
        WVALID => m_axi_port_b_WVALID,
        WREADY => m_axi_port_b_WREADY,
        WDATA => m_axi_port_b_WDATA,
        WSTRB => m_axi_port_b_WSTRB,
        WLAST => m_axi_port_b_WLAST,
        WID => m_axi_port_b_WID,
        WUSER => m_axi_port_b_WUSER,
        ARVALID => m_axi_port_b_ARVALID,
        ARREADY => m_axi_port_b_ARREADY,
        ARADDR => m_axi_port_b_ARADDR,
        ARID => m_axi_port_b_ARID,
        ARLEN => m_axi_port_b_ARLEN,
        ARSIZE => m_axi_port_b_ARSIZE,
        ARBURST => m_axi_port_b_ARBURST,
        ARLOCK => m_axi_port_b_ARLOCK,
        ARCACHE => m_axi_port_b_ARCACHE,
        ARPROT => m_axi_port_b_ARPROT,
        ARQOS => m_axi_port_b_ARQOS,
        ARREGION => m_axi_port_b_ARREGION,
        ARUSER => m_axi_port_b_ARUSER,
        RVALID => m_axi_port_b_RVALID,
        RREADY => m_axi_port_b_RREADY,
        RDATA => m_axi_port_b_RDATA,
        RLAST => m_axi_port_b_RLAST,
        RID => m_axi_port_b_RID,
        RUSER => m_axi_port_b_RUSER,
        RRESP => m_axi_port_b_RRESP,
        BVALID => m_axi_port_b_BVALID,
        BREADY => m_axi_port_b_BREADY,
        BRESP => m_axi_port_b_BRESP,
        BID => m_axi_port_b_BID,
        BUSER => m_axi_port_b_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => port_b_ARVALID,
        I_ARREADY => port_b_ARREADY,
        I_ARADDR => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARADDR,
        I_ARLEN => grp_mm_mult_systolic_fu_94_m_axi_port_b_ARLEN,
        I_RVALID => port_b_RVALID,
        I_RREADY => port_b_RREADY,
        I_RDATA => port_b_RDATA,
        I_RFIFONUM => port_b_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => port_b_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => port_b_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => port_b_BVALID,
        I_BREADY => ap_const_logic_0);

    port_c_m_axi_U : component tiled_mm_port_c_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PORT_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PORT_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PORT_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PORT_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PORT_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PORT_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PORT_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PORT_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PORT_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PORT_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PORT_C_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_port_c_AWVALID,
        AWREADY => m_axi_port_c_AWREADY,
        AWADDR => m_axi_port_c_AWADDR,
        AWID => m_axi_port_c_AWID,
        AWLEN => m_axi_port_c_AWLEN,
        AWSIZE => m_axi_port_c_AWSIZE,
        AWBURST => m_axi_port_c_AWBURST,
        AWLOCK => m_axi_port_c_AWLOCK,
        AWCACHE => m_axi_port_c_AWCACHE,
        AWPROT => m_axi_port_c_AWPROT,
        AWQOS => m_axi_port_c_AWQOS,
        AWREGION => m_axi_port_c_AWREGION,
        AWUSER => m_axi_port_c_AWUSER,
        WVALID => m_axi_port_c_WVALID,
        WREADY => m_axi_port_c_WREADY,
        WDATA => m_axi_port_c_WDATA,
        WSTRB => m_axi_port_c_WSTRB,
        WLAST => m_axi_port_c_WLAST,
        WID => m_axi_port_c_WID,
        WUSER => m_axi_port_c_WUSER,
        ARVALID => m_axi_port_c_ARVALID,
        ARREADY => m_axi_port_c_ARREADY,
        ARADDR => m_axi_port_c_ARADDR,
        ARID => m_axi_port_c_ARID,
        ARLEN => m_axi_port_c_ARLEN,
        ARSIZE => m_axi_port_c_ARSIZE,
        ARBURST => m_axi_port_c_ARBURST,
        ARLOCK => m_axi_port_c_ARLOCK,
        ARCACHE => m_axi_port_c_ARCACHE,
        ARPROT => m_axi_port_c_ARPROT,
        ARQOS => m_axi_port_c_ARQOS,
        ARREGION => m_axi_port_c_ARREGION,
        ARUSER => m_axi_port_c_ARUSER,
        RVALID => m_axi_port_c_RVALID,
        RREADY => m_axi_port_c_RREADY,
        RDATA => m_axi_port_c_RDATA,
        RLAST => m_axi_port_c_RLAST,
        RID => m_axi_port_c_RID,
        RUSER => m_axi_port_c_RUSER,
        RRESP => m_axi_port_c_RRESP,
        BVALID => m_axi_port_c_BVALID,
        BREADY => m_axi_port_c_BREADY,
        BRESP => m_axi_port_c_BRESP,
        BID => m_axi_port_c_BID,
        BUSER => m_axi_port_c_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => port_c_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => port_c_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => port_c_RDATA,
        I_RFIFONUM => port_c_RFIFONUM,
        I_AWVALID => port_c_AWVALID,
        I_AWREADY => port_c_AWREADY,
        I_AWADDR => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWADDR,
        I_AWLEN => grp_mm_mult_systolic_fu_94_m_axi_port_c_AWLEN,
        I_WVALID => port_c_WVALID,
        I_WREADY => port_c_WREADY,
        I_WDATA => grp_mm_mult_systolic_fu_94_m_axi_port_c_WDATA,
        I_WSTRB => grp_mm_mult_systolic_fu_94_m_axi_port_c_WSTRB,
        I_BVALID => port_c_BVALID,
        I_BREADY => port_c_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_done <= ap_const_logic_0;
                elsif ((grp_mm_mult_systolic_fu_94_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_ready <= ap_const_logic_0;
                elsif ((grp_mm_mult_systolic_fu_94_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_mm_mult_systolic_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mm_mult_systolic_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sync_grp_mm_mult_systolic_fu_94_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_mm_mult_systolic_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_mult_systolic_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_mm_mult_systolic_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tn_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                tn_fu_72 <= ap_const_lv4_0;
            elsif (((icmp_ln287_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tn_fu_72 <= add_ln287_fu_122_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a_read_reg_154 <= a;
                b_read_reg_149 <= b;
                out_r_read_reg_144 <= out_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln287_reg_162 <= trunc_ln287_fu_128_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, icmp_ln287_fu_116_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln287_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln287_fu_122_p2 <= std_logic_vector(unsigned(tn_fu_72) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(ap_sync_grp_mm_mult_systolic_fu_94_ap_ready, ap_sync_grp_mm_mult_systolic_fu_94_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_sync_grp_mm_mult_systolic_fu_94_ap_ready and ap_sync_grp_mm_mult_systolic_fu_94_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln287_fu_116_p2)
    begin
        if (((icmp_ln287_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln287_fu_116_p2)
    begin
        if (((icmp_ln287_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_mm_mult_systolic_fu_94_ap_done <= (grp_mm_mult_systolic_fu_94_ap_done or ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_done);
    ap_sync_grp_mm_mult_systolic_fu_94_ap_ready <= (grp_mm_mult_systolic_fu_94_ap_ready or ap_sync_reg_grp_mm_mult_systolic_fu_94_ap_ready);

    grp_mm_mult_systolic_fu_94_ap_continue_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_mm_mult_systolic_fu_94_ap_continue <= ap_const_logic_1;
        else 
            grp_mm_mult_systolic_fu_94_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_mm_mult_systolic_fu_94_ap_start <= grp_mm_mult_systolic_fu_94_ap_start_reg;
    icmp_ln287_fu_116_p2 <= "1" when (tn_fu_72 = ap_const_lv4_8) else "0";

    port_a_ARVALID_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_a_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_a_ARVALID <= grp_mm_mult_systolic_fu_94_m_axi_port_a_ARVALID;
        else 
            port_a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    port_a_RREADY_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_a_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_a_RREADY <= grp_mm_mult_systolic_fu_94_m_axi_port_a_RREADY;
        else 
            port_a_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    port_b_ARVALID_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_b_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_b_ARVALID <= grp_mm_mult_systolic_fu_94_m_axi_port_b_ARVALID;
        else 
            port_b_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    port_b_RREADY_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_b_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_b_RREADY <= grp_mm_mult_systolic_fu_94_m_axi_port_b_RREADY;
        else 
            port_b_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    port_c_AWVALID_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_c_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_c_AWVALID <= grp_mm_mult_systolic_fu_94_m_axi_port_c_AWVALID;
        else 
            port_c_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    port_c_BREADY_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_c_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_c_BREADY <= grp_mm_mult_systolic_fu_94_m_axi_port_c_BREADY;
        else 
            port_c_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    port_c_WVALID_assign_proc : process(grp_mm_mult_systolic_fu_94_m_axi_port_c_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            port_c_WVALID <= grp_mm_mult_systolic_fu_94_m_axi_port_c_WVALID;
        else 
            port_c_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln287_fu_128_p1 <= tn_fu_72(3 - 1 downto 0);
end behav;
