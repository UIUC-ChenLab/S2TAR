-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_mm_mult_systolic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    m_axi_port_a_AWVALID : OUT STD_LOGIC;
    m_axi_port_a_AWREADY : IN STD_LOGIC;
    m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WVALID : OUT STD_LOGIC;
    m_axi_port_a_WREADY : IN STD_LOGIC;
    m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WLAST : OUT STD_LOGIC;
    m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_ARVALID : OUT STD_LOGIC;
    m_axi_port_a_ARREADY : IN STD_LOGIC;
    m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RVALID : IN STD_LOGIC;
    m_axi_port_a_RREADY : OUT STD_LOGIC;
    m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_RLAST : IN STD_LOGIC;
    m_axi_port_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BVALID : IN STD_LOGIC;
    m_axi_port_a_BREADY : OUT STD_LOGIC;
    m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_b_AWVALID : OUT STD_LOGIC;
    m_axi_port_b_AWREADY : IN STD_LOGIC;
    m_axi_port_b_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_b_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_WVALID : OUT STD_LOGIC;
    m_axi_port_b_WREADY : IN STD_LOGIC;
    m_axi_port_b_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_b_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_WLAST : OUT STD_LOGIC;
    m_axi_port_b_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_ARVALID : OUT STD_LOGIC;
    m_axi_port_b_ARREADY : IN STD_LOGIC;
    m_axi_port_b_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_b_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_RVALID : IN STD_LOGIC;
    m_axi_port_b_RREADY : OUT STD_LOGIC;
    m_axi_port_b_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_b_RLAST : IN STD_LOGIC;
    m_axi_port_b_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_b_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_BVALID : IN STD_LOGIC;
    m_axi_port_b_BREADY : OUT STD_LOGIC;
    m_axi_port_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    b : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_AWVALID : OUT STD_LOGIC;
    m_axi_port_c_AWREADY : IN STD_LOGIC;
    m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WVALID : OUT STD_LOGIC;
    m_axi_port_c_WREADY : IN STD_LOGIC;
    m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WLAST : OUT STD_LOGIC;
    m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_ARVALID : OUT STD_LOGIC;
    m_axi_port_c_ARREADY : IN STD_LOGIC;
    m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RVALID : IN STD_LOGIC;
    m_axi_port_c_RREADY : OUT STD_LOGIC;
    m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_RLAST : IN STD_LOGIC;
    m_axi_port_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BVALID : IN STD_LOGIC;
    m_axi_port_c_BREADY : OUT STD_LOGIC;
    m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r : IN STD_LOGIC_VECTOR (63 downto 0);
    tn : IN STD_LOGIC_VECTOR (2 downto 0);
    out_r_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    a_ap_vld : IN STD_LOGIC;
    b_ap_vld : IN STD_LOGIC;
    tn_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of tiled_mm_mm_mult_systolic is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal a_cache_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_1_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_1_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_2_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_2_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_3_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_3_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_4_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_4_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_5_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal a_cache_5_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_1_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_1_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_2_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_2_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_3_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_3_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_4_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_4_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_5_i_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal b_cache_5_t_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_out_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_out_c_write : STD_LOGIC;
    signal readA_U0_ap_start : STD_LOGIC;
    signal readA_U0_ap_done : STD_LOGIC;
    signal readA_U0_ap_continue : STD_LOGIC;
    signal readA_U0_ap_idle : STD_LOGIC;
    signal readA_U0_ap_ready : STD_LOGIC;
    signal readA_U0_m_axi_port_a_AWVALID : STD_LOGIC;
    signal readA_U0_m_axi_port_a_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readA_U0_m_axi_port_a_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readA_U0_m_axi_port_a_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_port_a_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_port_a_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_port_a_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_port_a_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_port_a_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_port_a_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_port_a_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_WVALID : STD_LOGIC;
    signal readA_U0_m_axi_port_a_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_m_axi_port_a_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_WLAST : STD_LOGIC;
    signal readA_U0_m_axi_port_a_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_ARVALID : STD_LOGIC;
    signal readA_U0_m_axi_port_a_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readA_U0_m_axi_port_a_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readA_U0_m_axi_port_a_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_port_a_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_port_a_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_port_a_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_port_a_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_port_a_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_port_a_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_port_a_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_port_a_RREADY : STD_LOGIC;
    signal readA_U0_m_axi_port_a_BREADY : STD_LOGIC;
    signal readA_U0_a_cache_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_a_cache_0_ce0 : STD_LOGIC;
    signal readA_U0_a_cache_0_we0 : STD_LOGIC;
    signal readA_U0_a_cache_0_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_a_cache_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_a_cache_1_ce0 : STD_LOGIC;
    signal readA_U0_a_cache_1_we0 : STD_LOGIC;
    signal readA_U0_a_cache_1_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_a_cache_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_a_cache_2_ce0 : STD_LOGIC;
    signal readA_U0_a_cache_2_we0 : STD_LOGIC;
    signal readA_U0_a_cache_2_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_a_cache_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_a_cache_3_ce0 : STD_LOGIC;
    signal readA_U0_a_cache_3_we0 : STD_LOGIC;
    signal readA_U0_a_cache_3_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_a_cache_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_a_cache_4_ce0 : STD_LOGIC;
    signal readA_U0_a_cache_4_we0 : STD_LOGIC;
    signal readA_U0_a_cache_4_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_a_cache_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readA_U0_a_cache_5_ce0 : STD_LOGIC;
    signal readA_U0_a_cache_5_we0 : STD_LOGIC;
    signal readA_U0_a_cache_5_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_channel_done_a_cache_5 : STD_LOGIC;
    signal readA_U0_a_cache_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_a_cache_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_a_cache_5 : STD_LOGIC;
    signal ap_channel_done_a_cache_4 : STD_LOGIC;
    signal readA_U0_a_cache_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_a_cache_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_a_cache_4 : STD_LOGIC;
    signal ap_channel_done_a_cache_3 : STD_LOGIC;
    signal readA_U0_a_cache_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_a_cache_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_a_cache_3 : STD_LOGIC;
    signal ap_channel_done_a_cache_2 : STD_LOGIC;
    signal readA_U0_a_cache_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_a_cache_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_a_cache_2 : STD_LOGIC;
    signal ap_channel_done_a_cache_1 : STD_LOGIC;
    signal readA_U0_a_cache_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_a_cache_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_a_cache_1 : STD_LOGIC;
    signal ap_channel_done_a_cache : STD_LOGIC;
    signal readA_U0_a_cache_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_a_cache : STD_LOGIC := '0';
    signal ap_sync_channel_write_a_cache : STD_LOGIC;
    signal writehfifo_U0_ap_start : STD_LOGIC;
    signal writehfifo_U0_ap_done : STD_LOGIC;
    signal writehfifo_U0_ap_continue : STD_LOGIC;
    signal writehfifo_U0_ap_idle : STD_LOGIC;
    signal writehfifo_U0_ap_ready : STD_LOGIC;
    signal writehfifo_U0_h_fifo_0_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writehfifo_U0_h_fifo_0_0_write : STD_LOGIC;
    signal writehfifo_U0_h_fifo_1_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writehfifo_U0_h_fifo_1_0_write : STD_LOGIC;
    signal writehfifo_U0_h_fifo_2_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writehfifo_U0_h_fifo_2_0_write : STD_LOGIC;
    signal writehfifo_U0_h_fifo_3_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writehfifo_U0_h_fifo_3_0_write : STD_LOGIC;
    signal writehfifo_U0_h_fifo_4_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writehfifo_U0_h_fifo_4_0_write : STD_LOGIC;
    signal writehfifo_U0_h_fifo_5_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writehfifo_U0_h_fifo_5_0_write : STD_LOGIC;
    signal writehfifo_U0_start_out : STD_LOGIC;
    signal writehfifo_U0_start_write : STD_LOGIC;
    signal writehfifo_U0_a_cache_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writehfifo_U0_a_cache_0_ce0 : STD_LOGIC;
    signal writehfifo_U0_a_cache_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writehfifo_U0_a_cache_1_ce0 : STD_LOGIC;
    signal writehfifo_U0_a_cache_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writehfifo_U0_a_cache_2_ce0 : STD_LOGIC;
    signal writehfifo_U0_a_cache_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writehfifo_U0_a_cache_3_ce0 : STD_LOGIC;
    signal writehfifo_U0_a_cache_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writehfifo_U0_a_cache_4_ce0 : STD_LOGIC;
    signal writehfifo_U0_a_cache_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writehfifo_U0_a_cache_5_ce0 : STD_LOGIC;
    signal readB_U0_ap_start : STD_LOGIC;
    signal readB_U0_ap_done : STD_LOGIC;
    signal readB_U0_ap_continue : STD_LOGIC;
    signal readB_U0_ap_idle : STD_LOGIC;
    signal readB_U0_ap_ready : STD_LOGIC;
    signal readB_U0_m_axi_port_b_AWVALID : STD_LOGIC;
    signal readB_U0_m_axi_port_b_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readB_U0_m_axi_port_b_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readB_U0_m_axi_port_b_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_port_b_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_port_b_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_port_b_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_port_b_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_port_b_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_port_b_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_port_b_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_WVALID : STD_LOGIC;
    signal readB_U0_m_axi_port_b_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_m_axi_port_b_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_WLAST : STD_LOGIC;
    signal readB_U0_m_axi_port_b_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_ARVALID : STD_LOGIC;
    signal readB_U0_m_axi_port_b_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readB_U0_m_axi_port_b_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readB_U0_m_axi_port_b_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_port_b_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_port_b_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_port_b_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_port_b_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_port_b_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_port_b_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_port_b_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_port_b_RREADY : STD_LOGIC;
    signal readB_U0_m_axi_port_b_BREADY : STD_LOGIC;
    signal readB_U0_b_cache_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_b_cache_0_ce0 : STD_LOGIC;
    signal readB_U0_b_cache_0_we0 : STD_LOGIC;
    signal readB_U0_b_cache_0_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_b_cache_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_b_cache_1_ce0 : STD_LOGIC;
    signal readB_U0_b_cache_1_we0 : STD_LOGIC;
    signal readB_U0_b_cache_1_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_b_cache_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_b_cache_2_ce0 : STD_LOGIC;
    signal readB_U0_b_cache_2_we0 : STD_LOGIC;
    signal readB_U0_b_cache_2_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_b_cache_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_b_cache_3_ce0 : STD_LOGIC;
    signal readB_U0_b_cache_3_we0 : STD_LOGIC;
    signal readB_U0_b_cache_3_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_b_cache_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_b_cache_4_ce0 : STD_LOGIC;
    signal readB_U0_b_cache_4_we0 : STD_LOGIC;
    signal readB_U0_b_cache_4_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_b_cache_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readB_U0_b_cache_5_ce0 : STD_LOGIC;
    signal readB_U0_b_cache_5_we0 : STD_LOGIC;
    signal readB_U0_b_cache_5_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_tn_c_din : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_tn_c_write : STD_LOGIC;
    signal ap_channel_done_b_cache_5 : STD_LOGIC;
    signal readB_U0_b_cache_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_b_cache_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_b_cache_5 : STD_LOGIC;
    signal ap_channel_done_b_cache_4 : STD_LOGIC;
    signal readB_U0_b_cache_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_b_cache_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_b_cache_4 : STD_LOGIC;
    signal ap_channel_done_b_cache_3 : STD_LOGIC;
    signal readB_U0_b_cache_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_b_cache_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_b_cache_3 : STD_LOGIC;
    signal ap_channel_done_b_cache_2 : STD_LOGIC;
    signal readB_U0_b_cache_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_b_cache_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_b_cache_2 : STD_LOGIC;
    signal ap_channel_done_b_cache_1 : STD_LOGIC;
    signal readB_U0_b_cache_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_b_cache_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_b_cache_1 : STD_LOGIC;
    signal ap_channel_done_b_cache : STD_LOGIC;
    signal readB_U0_b_cache_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_b_cache : STD_LOGIC := '0';
    signal ap_sync_channel_write_b_cache : STD_LOGIC;
    signal writevfifo_U0_ap_start : STD_LOGIC;
    signal writevfifo_U0_ap_done : STD_LOGIC;
    signal writevfifo_U0_ap_continue : STD_LOGIC;
    signal writevfifo_U0_ap_idle : STD_LOGIC;
    signal writevfifo_U0_ap_ready : STD_LOGIC;
    signal writevfifo_U0_v_fifo_0_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writevfifo_U0_v_fifo_0_0_write : STD_LOGIC;
    signal writevfifo_U0_v_fifo_0_1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writevfifo_U0_v_fifo_0_1_write : STD_LOGIC;
    signal writevfifo_U0_v_fifo_0_2_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writevfifo_U0_v_fifo_0_2_write : STD_LOGIC;
    signal writevfifo_U0_v_fifo_0_3_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writevfifo_U0_v_fifo_0_3_write : STD_LOGIC;
    signal writevfifo_U0_v_fifo_0_4_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writevfifo_U0_v_fifo_0_4_write : STD_LOGIC;
    signal writevfifo_U0_v_fifo_0_5_din : STD_LOGIC_VECTOR (15 downto 0);
    signal writevfifo_U0_v_fifo_0_5_write : STD_LOGIC;
    signal writevfifo_U0_b_cache_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writevfifo_U0_b_cache_0_ce0 : STD_LOGIC;
    signal writevfifo_U0_b_cache_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writevfifo_U0_b_cache_1_ce0 : STD_LOGIC;
    signal writevfifo_U0_b_cache_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writevfifo_U0_b_cache_2_ce0 : STD_LOGIC;
    signal writevfifo_U0_b_cache_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writevfifo_U0_b_cache_3_ce0 : STD_LOGIC;
    signal writevfifo_U0_b_cache_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writevfifo_U0_b_cache_4_ce0 : STD_LOGIC;
    signal writevfifo_U0_b_cache_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal writevfifo_U0_b_cache_5_ce0 : STD_LOGIC;
    signal tn_loop_proc_U0_h_fifo_read : STD_LOGIC;
    signal tn_loop_proc_U0_v_fifo_read : STD_LOGIC;
    signal tn_loop_proc_U0_v_fifo_1_read : STD_LOGIC;
    signal tn_loop_proc_U0_v_fifo_2_read : STD_LOGIC;
    signal tn_loop_proc_U0_v_fifo_3_read : STD_LOGIC;
    signal tn_loop_proc_U0_v_fifo_4_read : STD_LOGIC;
    signal tn_loop_proc_U0_v_fifo_5_read : STD_LOGIC;
    signal tn_loop_proc_U0_h_fifo_1_read : STD_LOGIC;
    signal tn_loop_proc_U0_h_fifo_2_read : STD_LOGIC;
    signal tn_loop_proc_U0_h_fifo_3_read : STD_LOGIC;
    signal tn_loop_proc_U0_h_fifo_4_read : STD_LOGIC;
    signal tn_loop_proc_U0_h_fifo_5_read : STD_LOGIC;
    signal tn_loop_proc_U0_Cstream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal tn_loop_proc_U0_Cstream_write : STD_LOGIC;
    signal tn_loop_proc_U0_ap_start : STD_LOGIC;
    signal tn_loop_proc_U0_ap_done : STD_LOGIC;
    signal tn_loop_proc_U0_ap_ready : STD_LOGIC;
    signal tn_loop_proc_U0_ap_idle : STD_LOGIC;
    signal tn_loop_proc_U0_ap_continue : STD_LOGIC;
    signal writeC_U0_ap_start : STD_LOGIC;
    signal writeC_U0_ap_done : STD_LOGIC;
    signal writeC_U0_ap_continue : STD_LOGIC;
    signal writeC_U0_ap_idle : STD_LOGIC;
    signal writeC_U0_ap_ready : STD_LOGIC;
    signal writeC_U0_m_axi_port_c_AWVALID : STD_LOGIC;
    signal writeC_U0_m_axi_port_c_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeC_U0_m_axi_port_c_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeC_U0_m_axi_port_c_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeC_U0_m_axi_port_c_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeC_U0_m_axi_port_c_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeC_U0_m_axi_port_c_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeC_U0_m_axi_port_c_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeC_U0_m_axi_port_c_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeC_U0_m_axi_port_c_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeC_U0_m_axi_port_c_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_WVALID : STD_LOGIC;
    signal writeC_U0_m_axi_port_c_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal writeC_U0_m_axi_port_c_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_WLAST : STD_LOGIC;
    signal writeC_U0_m_axi_port_c_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_ARVALID : STD_LOGIC;
    signal writeC_U0_m_axi_port_c_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeC_U0_m_axi_port_c_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeC_U0_m_axi_port_c_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeC_U0_m_axi_port_c_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeC_U0_m_axi_port_c_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeC_U0_m_axi_port_c_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeC_U0_m_axi_port_c_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeC_U0_m_axi_port_c_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeC_U0_m_axi_port_c_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeC_U0_m_axi_port_c_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeC_U0_m_axi_port_c_RREADY : STD_LOGIC;
    signal writeC_U0_m_axi_port_c_BREADY : STD_LOGIC;
    signal writeC_U0_out_r_read : STD_LOGIC;
    signal writeC_U0_Cstream_read : STD_LOGIC;
    signal writeC_U0_tn_read : STD_LOGIC;
    signal a_cache_i_full_n : STD_LOGIC;
    signal a_cache_t_empty_n : STD_LOGIC;
    signal a_cache_1_i_full_n : STD_LOGIC;
    signal a_cache_1_t_empty_n : STD_LOGIC;
    signal a_cache_2_i_full_n : STD_LOGIC;
    signal a_cache_2_t_empty_n : STD_LOGIC;
    signal a_cache_3_i_full_n : STD_LOGIC;
    signal a_cache_3_t_empty_n : STD_LOGIC;
    signal a_cache_4_i_full_n : STD_LOGIC;
    signal a_cache_4_t_empty_n : STD_LOGIC;
    signal a_cache_5_i_full_n : STD_LOGIC;
    signal a_cache_5_t_empty_n : STD_LOGIC;
    signal b_cache_i_full_n : STD_LOGIC;
    signal b_cache_t_empty_n : STD_LOGIC;
    signal b_cache_1_i_full_n : STD_LOGIC;
    signal b_cache_1_t_empty_n : STD_LOGIC;
    signal b_cache_2_i_full_n : STD_LOGIC;
    signal b_cache_2_t_empty_n : STD_LOGIC;
    signal b_cache_3_i_full_n : STD_LOGIC;
    signal b_cache_3_t_empty_n : STD_LOGIC;
    signal b_cache_4_i_full_n : STD_LOGIC;
    signal b_cache_4_t_empty_n : STD_LOGIC;
    signal b_cache_5_i_full_n : STD_LOGIC;
    signal b_cache_5_t_empty_n : STD_LOGIC;
    signal out_c_full_n : STD_LOGIC;
    signal out_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal out_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal out_c_empty_n : STD_LOGIC;
    signal h_fifo_full_n : STD_LOGIC;
    signal h_fifo_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_fifo_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_empty_n : STD_LOGIC;
    signal h_fifo_1_full_n : STD_LOGIC;
    signal h_fifo_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_fifo_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_1_empty_n : STD_LOGIC;
    signal h_fifo_2_full_n : STD_LOGIC;
    signal h_fifo_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_fifo_2_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_2_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_2_empty_n : STD_LOGIC;
    signal h_fifo_3_full_n : STD_LOGIC;
    signal h_fifo_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_fifo_3_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_3_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_3_empty_n : STD_LOGIC;
    signal h_fifo_4_full_n : STD_LOGIC;
    signal h_fifo_4_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_fifo_4_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_4_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_4_empty_n : STD_LOGIC;
    signal h_fifo_5_full_n : STD_LOGIC;
    signal h_fifo_5_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal h_fifo_5_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_5_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fifo_5_empty_n : STD_LOGIC;
    signal tn_c_full_n : STD_LOGIC;
    signal tn_c_dout : STD_LOGIC_VECTOR (2 downto 0);
    signal tn_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal tn_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal tn_c_empty_n : STD_LOGIC;
    signal v_fifo_full_n : STD_LOGIC;
    signal v_fifo_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fifo_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_empty_n : STD_LOGIC;
    signal v_fifo_1_full_n : STD_LOGIC;
    signal v_fifo_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fifo_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_1_empty_n : STD_LOGIC;
    signal v_fifo_2_full_n : STD_LOGIC;
    signal v_fifo_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fifo_2_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_2_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_2_empty_n : STD_LOGIC;
    signal v_fifo_3_full_n : STD_LOGIC;
    signal v_fifo_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fifo_3_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_3_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_3_empty_n : STD_LOGIC;
    signal v_fifo_4_full_n : STD_LOGIC;
    signal v_fifo_4_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fifo_4_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_4_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_4_empty_n : STD_LOGIC;
    signal v_fifo_5_full_n : STD_LOGIC;
    signal v_fifo_5_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal v_fifo_5_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_5_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fifo_5_empty_n : STD_LOGIC;
    signal Cstream_full_n : STD_LOGIC;
    signal Cstream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Cstream_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal Cstream_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal Cstream_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_readA_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readA_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_readB_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readB_U0_ap_ready : STD_LOGIC;
    signal start_for_writeC_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeC_U0_full_n : STD_LOGIC;
    signal start_for_writeC_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeC_U0_empty_n : STD_LOGIC;
    signal start_for_tn_loop_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tn_loop_proc_U0_full_n : STD_LOGIC;
    signal start_for_tn_loop_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tn_loop_proc_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        out_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        out_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        out_c_full_n : IN STD_LOGIC;
        out_c_write : OUT STD_LOGIC );
    end component;


    component tiled_mm_readA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_port_a_AWVALID : OUT STD_LOGIC;
        m_axi_port_a_AWREADY : IN STD_LOGIC;
        m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WVALID : OUT STD_LOGIC;
        m_axi_port_a_WREADY : IN STD_LOGIC;
        m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WLAST : OUT STD_LOGIC;
        m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_ARVALID : OUT STD_LOGIC;
        m_axi_port_a_ARREADY : IN STD_LOGIC;
        m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RVALID : IN STD_LOGIC;
        m_axi_port_a_RREADY : OUT STD_LOGIC;
        m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_a_RLAST : IN STD_LOGIC;
        m_axi_port_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_BVALID : IN STD_LOGIC;
        m_axi_port_a_BREADY : OUT STD_LOGIC;
        m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        a_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_0_ce0 : OUT STD_LOGIC;
        a_cache_0_we0 : OUT STD_LOGIC;
        a_cache_0_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        a_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_1_ce0 : OUT STD_LOGIC;
        a_cache_1_we0 : OUT STD_LOGIC;
        a_cache_1_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        a_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_2_ce0 : OUT STD_LOGIC;
        a_cache_2_we0 : OUT STD_LOGIC;
        a_cache_2_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        a_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_3_ce0 : OUT STD_LOGIC;
        a_cache_3_we0 : OUT STD_LOGIC;
        a_cache_3_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        a_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_4_ce0 : OUT STD_LOGIC;
        a_cache_4_we0 : OUT STD_LOGIC;
        a_cache_4_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        a_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_5_ce0 : OUT STD_LOGIC;
        a_cache_5_we0 : OUT STD_LOGIC;
        a_cache_5_d0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component tiled_mm_writehfifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_fifo_0_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_0_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_0_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_0_0_full_n : IN STD_LOGIC;
        h_fifo_0_0_write : OUT STD_LOGIC;
        h_fifo_1_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_1_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_1_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_1_0_full_n : IN STD_LOGIC;
        h_fifo_1_0_write : OUT STD_LOGIC;
        h_fifo_2_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_2_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_2_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_2_0_full_n : IN STD_LOGIC;
        h_fifo_2_0_write : OUT STD_LOGIC;
        h_fifo_3_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_3_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_3_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_3_0_full_n : IN STD_LOGIC;
        h_fifo_3_0_write : OUT STD_LOGIC;
        h_fifo_4_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_4_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_4_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_4_0_full_n : IN STD_LOGIC;
        h_fifo_4_0_write : OUT STD_LOGIC;
        h_fifo_5_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_5_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_5_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        h_fifo_5_0_full_n : IN STD_LOGIC;
        h_fifo_5_0_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        a_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_0_ce0 : OUT STD_LOGIC;
        a_cache_0_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        a_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_1_ce0 : OUT STD_LOGIC;
        a_cache_1_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        a_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_2_ce0 : OUT STD_LOGIC;
        a_cache_2_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        a_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_3_ce0 : OUT STD_LOGIC;
        a_cache_3_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        a_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_4_ce0 : OUT STD_LOGIC;
        a_cache_4_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        a_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_cache_5_ce0 : OUT STD_LOGIC;
        a_cache_5_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component tiled_mm_readB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_port_b_AWVALID : OUT STD_LOGIC;
        m_axi_port_b_AWREADY : IN STD_LOGIC;
        m_axi_port_b_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WVALID : OUT STD_LOGIC;
        m_axi_port_b_WREADY : IN STD_LOGIC;
        m_axi_port_b_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_b_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WLAST : OUT STD_LOGIC;
        m_axi_port_b_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_ARVALID : OUT STD_LOGIC;
        m_axi_port_b_ARREADY : IN STD_LOGIC;
        m_axi_port_b_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RVALID : IN STD_LOGIC;
        m_axi_port_b_RREADY : OUT STD_LOGIC;
        m_axi_port_b_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_b_RLAST : IN STD_LOGIC;
        m_axi_port_b_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_b_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_BVALID : IN STD_LOGIC;
        m_axi_port_b_BREADY : OUT STD_LOGIC;
        m_axi_port_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        b_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_0_ce0 : OUT STD_LOGIC;
        b_cache_0_we0 : OUT STD_LOGIC;
        b_cache_0_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        b_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_1_ce0 : OUT STD_LOGIC;
        b_cache_1_we0 : OUT STD_LOGIC;
        b_cache_1_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        b_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_2_ce0 : OUT STD_LOGIC;
        b_cache_2_we0 : OUT STD_LOGIC;
        b_cache_2_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        b_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_3_ce0 : OUT STD_LOGIC;
        b_cache_3_we0 : OUT STD_LOGIC;
        b_cache_3_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        b_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_4_ce0 : OUT STD_LOGIC;
        b_cache_4_we0 : OUT STD_LOGIC;
        b_cache_4_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        b_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_5_ce0 : OUT STD_LOGIC;
        b_cache_5_we0 : OUT STD_LOGIC;
        b_cache_5_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        tn : IN STD_LOGIC_VECTOR (2 downto 0);
        tn_c_din : OUT STD_LOGIC_VECTOR (2 downto 0);
        tn_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        tn_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        tn_c_full_n : IN STD_LOGIC;
        tn_c_write : OUT STD_LOGIC );
    end component;


    component tiled_mm_writevfifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_fifo_0_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_0_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_0_full_n : IN STD_LOGIC;
        v_fifo_0_0_write : OUT STD_LOGIC;
        v_fifo_0_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_0_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_1_full_n : IN STD_LOGIC;
        v_fifo_0_1_write : OUT STD_LOGIC;
        v_fifo_0_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_0_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_2_full_n : IN STD_LOGIC;
        v_fifo_0_2_write : OUT STD_LOGIC;
        v_fifo_0_3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_0_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_3_full_n : IN STD_LOGIC;
        v_fifo_0_3_write : OUT STD_LOGIC;
        v_fifo_0_4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_0_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_4_full_n : IN STD_LOGIC;
        v_fifo_0_4_write : OUT STD_LOGIC;
        v_fifo_0_5_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_0_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        v_fifo_0_5_full_n : IN STD_LOGIC;
        v_fifo_0_5_write : OUT STD_LOGIC;
        b_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_0_ce0 : OUT STD_LOGIC;
        b_cache_0_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        b_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_1_ce0 : OUT STD_LOGIC;
        b_cache_1_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        b_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_2_ce0 : OUT STD_LOGIC;
        b_cache_2_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        b_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_3_ce0 : OUT STD_LOGIC;
        b_cache_3_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        b_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_4_ce0 : OUT STD_LOGIC;
        b_cache_4_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        b_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_cache_5_ce0 : OUT STD_LOGIC;
        b_cache_5_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component tiled_mm_tn_loop_proc IS
    port (
        h_fifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_empty_n : IN STD_LOGIC;
        h_fifo_read : OUT STD_LOGIC;
        v_fifo_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_empty_n : IN STD_LOGIC;
        v_fifo_read : OUT STD_LOGIC;
        v_fifo_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_1_empty_n : IN STD_LOGIC;
        v_fifo_1_read : OUT STD_LOGIC;
        v_fifo_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_2_empty_n : IN STD_LOGIC;
        v_fifo_2_read : OUT STD_LOGIC;
        v_fifo_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_3_empty_n : IN STD_LOGIC;
        v_fifo_3_read : OUT STD_LOGIC;
        v_fifo_4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_4_empty_n : IN STD_LOGIC;
        v_fifo_4_read : OUT STD_LOGIC;
        v_fifo_5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        v_fifo_5_empty_n : IN STD_LOGIC;
        v_fifo_5_read : OUT STD_LOGIC;
        h_fifo_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_1_empty_n : IN STD_LOGIC;
        h_fifo_1_read : OUT STD_LOGIC;
        h_fifo_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_2_empty_n : IN STD_LOGIC;
        h_fifo_2_read : OUT STD_LOGIC;
        h_fifo_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_3_empty_n : IN STD_LOGIC;
        h_fifo_3_read : OUT STD_LOGIC;
        h_fifo_4_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_4_empty_n : IN STD_LOGIC;
        h_fifo_4_read : OUT STD_LOGIC;
        h_fifo_5_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        h_fifo_5_empty_n : IN STD_LOGIC;
        h_fifo_5_read : OUT STD_LOGIC;
        Cstream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        Cstream_full_n : IN STD_LOGIC;
        Cstream_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component tiled_mm_writeC IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_port_c_AWVALID : OUT STD_LOGIC;
        m_axi_port_c_AWREADY : IN STD_LOGIC;
        m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WVALID : OUT STD_LOGIC;
        m_axi_port_c_WREADY : IN STD_LOGIC;
        m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WLAST : OUT STD_LOGIC;
        m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_ARVALID : OUT STD_LOGIC;
        m_axi_port_c_ARREADY : IN STD_LOGIC;
        m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RVALID : IN STD_LOGIC;
        m_axi_port_c_RREADY : OUT STD_LOGIC;
        m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_c_RLAST : IN STD_LOGIC;
        m_axi_port_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_BVALID : IN STD_LOGIC;
        m_axi_port_c_BREADY : OUT STD_LOGIC;
        m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        out_r_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        out_r_empty_n : IN STD_LOGIC;
        out_r_read : OUT STD_LOGIC;
        Cstream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        Cstream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        Cstream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        Cstream_empty_n : IN STD_LOGIC;
        Cstream_read : OUT STD_LOGIC;
        tn_dout : IN STD_LOGIC_VECTOR (2 downto 0);
        tn_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        tn_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        tn_empty_n : IN STD_LOGIC;
        tn_read : OUT STD_LOGIC );
    end component;


    component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component tiled_mm_fifo_w64_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tiled_mm_fifo_w16_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tiled_mm_fifo_w3_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (2 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tiled_mm_fifo_w8_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tiled_mm_start_for_writeC_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component tiled_mm_start_for_tn_loop_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    a_cache_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readA_U0_a_cache_0_address0,
        i_ce0 => readA_U0_a_cache_0_ce0,
        i_we0 => readA_U0_a_cache_0_we0,
        i_d0 => readA_U0_a_cache_0_d0,
        i_q0 => a_cache_i_q0,
        t_address0 => writehfifo_U0_a_cache_0_address0,
        t_ce0 => writehfifo_U0_a_cache_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => a_cache_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => a_cache_i_full_n,
        i_write => ap_channel_done_a_cache,
        t_empty_n => a_cache_t_empty_n,
        t_read => writehfifo_U0_ap_ready);

    a_cache_1_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readA_U0_a_cache_1_address0,
        i_ce0 => readA_U0_a_cache_1_ce0,
        i_we0 => readA_U0_a_cache_1_we0,
        i_d0 => readA_U0_a_cache_1_d0,
        i_q0 => a_cache_1_i_q0,
        t_address0 => writehfifo_U0_a_cache_1_address0,
        t_ce0 => writehfifo_U0_a_cache_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => a_cache_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => a_cache_1_i_full_n,
        i_write => ap_channel_done_a_cache_1,
        t_empty_n => a_cache_1_t_empty_n,
        t_read => writehfifo_U0_ap_ready);

    a_cache_2_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readA_U0_a_cache_2_address0,
        i_ce0 => readA_U0_a_cache_2_ce0,
        i_we0 => readA_U0_a_cache_2_we0,
        i_d0 => readA_U0_a_cache_2_d0,
        i_q0 => a_cache_2_i_q0,
        t_address0 => writehfifo_U0_a_cache_2_address0,
        t_ce0 => writehfifo_U0_a_cache_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => a_cache_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => a_cache_2_i_full_n,
        i_write => ap_channel_done_a_cache_2,
        t_empty_n => a_cache_2_t_empty_n,
        t_read => writehfifo_U0_ap_ready);

    a_cache_3_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readA_U0_a_cache_3_address0,
        i_ce0 => readA_U0_a_cache_3_ce0,
        i_we0 => readA_U0_a_cache_3_we0,
        i_d0 => readA_U0_a_cache_3_d0,
        i_q0 => a_cache_3_i_q0,
        t_address0 => writehfifo_U0_a_cache_3_address0,
        t_ce0 => writehfifo_U0_a_cache_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => a_cache_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => a_cache_3_i_full_n,
        i_write => ap_channel_done_a_cache_3,
        t_empty_n => a_cache_3_t_empty_n,
        t_read => writehfifo_U0_ap_ready);

    a_cache_4_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readA_U0_a_cache_4_address0,
        i_ce0 => readA_U0_a_cache_4_ce0,
        i_we0 => readA_U0_a_cache_4_we0,
        i_d0 => readA_U0_a_cache_4_d0,
        i_q0 => a_cache_4_i_q0,
        t_address0 => writehfifo_U0_a_cache_4_address0,
        t_ce0 => writehfifo_U0_a_cache_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => a_cache_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => a_cache_4_i_full_n,
        i_write => ap_channel_done_a_cache_4,
        t_empty_n => a_cache_4_t_empty_n,
        t_read => writehfifo_U0_ap_ready);

    a_cache_5_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readA_U0_a_cache_5_address0,
        i_ce0 => readA_U0_a_cache_5_ce0,
        i_we0 => readA_U0_a_cache_5_we0,
        i_d0 => readA_U0_a_cache_5_d0,
        i_q0 => a_cache_5_i_q0,
        t_address0 => writehfifo_U0_a_cache_5_address0,
        t_ce0 => writehfifo_U0_a_cache_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => a_cache_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => a_cache_5_i_full_n,
        i_write => ap_channel_done_a_cache_5,
        t_empty_n => a_cache_5_t_empty_n,
        t_read => writehfifo_U0_ap_ready);

    b_cache_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readB_U0_b_cache_0_address0,
        i_ce0 => readB_U0_b_cache_0_ce0,
        i_we0 => readB_U0_b_cache_0_we0,
        i_d0 => readB_U0_b_cache_0_d0,
        i_q0 => b_cache_i_q0,
        t_address0 => writevfifo_U0_b_cache_0_address0,
        t_ce0 => writevfifo_U0_b_cache_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => b_cache_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => b_cache_i_full_n,
        i_write => ap_channel_done_b_cache,
        t_empty_n => b_cache_t_empty_n,
        t_read => writevfifo_U0_ap_ready);

    b_cache_1_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readB_U0_b_cache_1_address0,
        i_ce0 => readB_U0_b_cache_1_ce0,
        i_we0 => readB_U0_b_cache_1_we0,
        i_d0 => readB_U0_b_cache_1_d0,
        i_q0 => b_cache_1_i_q0,
        t_address0 => writevfifo_U0_b_cache_1_address0,
        t_ce0 => writevfifo_U0_b_cache_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => b_cache_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => b_cache_1_i_full_n,
        i_write => ap_channel_done_b_cache_1,
        t_empty_n => b_cache_1_t_empty_n,
        t_read => writevfifo_U0_ap_ready);

    b_cache_2_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readB_U0_b_cache_2_address0,
        i_ce0 => readB_U0_b_cache_2_ce0,
        i_we0 => readB_U0_b_cache_2_we0,
        i_d0 => readB_U0_b_cache_2_d0,
        i_q0 => b_cache_2_i_q0,
        t_address0 => writevfifo_U0_b_cache_2_address0,
        t_ce0 => writevfifo_U0_b_cache_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => b_cache_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => b_cache_2_i_full_n,
        i_write => ap_channel_done_b_cache_2,
        t_empty_n => b_cache_2_t_empty_n,
        t_read => writevfifo_U0_ap_ready);

    b_cache_3_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readB_U0_b_cache_3_address0,
        i_ce0 => readB_U0_b_cache_3_ce0,
        i_we0 => readB_U0_b_cache_3_we0,
        i_d0 => readB_U0_b_cache_3_d0,
        i_q0 => b_cache_3_i_q0,
        t_address0 => writevfifo_U0_b_cache_3_address0,
        t_ce0 => writevfifo_U0_b_cache_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => b_cache_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => b_cache_3_i_full_n,
        i_write => ap_channel_done_b_cache_3,
        t_empty_n => b_cache_3_t_empty_n,
        t_read => writevfifo_U0_ap_ready);

    b_cache_4_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readB_U0_b_cache_4_address0,
        i_ce0 => readB_U0_b_cache_4_ce0,
        i_we0 => readB_U0_b_cache_4_we0,
        i_d0 => readB_U0_b_cache_4_d0,
        i_q0 => b_cache_4_i_q0,
        t_address0 => writevfifo_U0_b_cache_4_address0,
        t_ce0 => writevfifo_U0_b_cache_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => b_cache_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => b_cache_4_i_full_n,
        i_write => ap_channel_done_b_cache_4,
        t_empty_n => b_cache_4_t_empty_n,
        t_read => writevfifo_U0_ap_ready);

    b_cache_5_U : component tiled_mm_mm_mult_systolic_a_cache_RAM_AUTO_1R1W
    generic map (
        DataWidth => 512,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readB_U0_b_cache_5_address0,
        i_ce0 => readB_U0_b_cache_5_ce0,
        i_we0 => readB_U0_b_cache_5_we0,
        i_d0 => readB_U0_b_cache_5_d0,
        i_q0 => b_cache_5_i_q0,
        t_address0 => writevfifo_U0_b_cache_5_address0,
        t_ce0 => writevfifo_U0_b_cache_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv512_lc_1,
        t_q0 => b_cache_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => b_cache_5_i_full_n,
        i_write => ap_channel_done_b_cache_5,
        t_empty_n => b_cache_5_t_empty_n,
        t_read => writevfifo_U0_ap_ready);

    entry_proc_U0 : component tiled_mm_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_writeC_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        out_r => out_r,
        out_c_din => entry_proc_U0_out_c_din,
        out_c_num_data_valid => out_c_num_data_valid,
        out_c_fifo_cap => out_c_fifo_cap,
        out_c_full_n => out_c_full_n,
        out_c_write => entry_proc_U0_out_c_write);

    readA_U0 : component tiled_mm_readA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readA_U0_ap_start,
        ap_done => readA_U0_ap_done,
        ap_continue => readA_U0_ap_continue,
        ap_idle => readA_U0_ap_idle,
        ap_ready => readA_U0_ap_ready,
        m_axi_port_a_AWVALID => readA_U0_m_axi_port_a_AWVALID,
        m_axi_port_a_AWREADY => ap_const_logic_0,
        m_axi_port_a_AWADDR => readA_U0_m_axi_port_a_AWADDR,
        m_axi_port_a_AWID => readA_U0_m_axi_port_a_AWID,
        m_axi_port_a_AWLEN => readA_U0_m_axi_port_a_AWLEN,
        m_axi_port_a_AWSIZE => readA_U0_m_axi_port_a_AWSIZE,
        m_axi_port_a_AWBURST => readA_U0_m_axi_port_a_AWBURST,
        m_axi_port_a_AWLOCK => readA_U0_m_axi_port_a_AWLOCK,
        m_axi_port_a_AWCACHE => readA_U0_m_axi_port_a_AWCACHE,
        m_axi_port_a_AWPROT => readA_U0_m_axi_port_a_AWPROT,
        m_axi_port_a_AWQOS => readA_U0_m_axi_port_a_AWQOS,
        m_axi_port_a_AWREGION => readA_U0_m_axi_port_a_AWREGION,
        m_axi_port_a_AWUSER => readA_U0_m_axi_port_a_AWUSER,
        m_axi_port_a_WVALID => readA_U0_m_axi_port_a_WVALID,
        m_axi_port_a_WREADY => ap_const_logic_0,
        m_axi_port_a_WDATA => readA_U0_m_axi_port_a_WDATA,
        m_axi_port_a_WSTRB => readA_U0_m_axi_port_a_WSTRB,
        m_axi_port_a_WLAST => readA_U0_m_axi_port_a_WLAST,
        m_axi_port_a_WID => readA_U0_m_axi_port_a_WID,
        m_axi_port_a_WUSER => readA_U0_m_axi_port_a_WUSER,
        m_axi_port_a_ARVALID => readA_U0_m_axi_port_a_ARVALID,
        m_axi_port_a_ARREADY => m_axi_port_a_ARREADY,
        m_axi_port_a_ARADDR => readA_U0_m_axi_port_a_ARADDR,
        m_axi_port_a_ARID => readA_U0_m_axi_port_a_ARID,
        m_axi_port_a_ARLEN => readA_U0_m_axi_port_a_ARLEN,
        m_axi_port_a_ARSIZE => readA_U0_m_axi_port_a_ARSIZE,
        m_axi_port_a_ARBURST => readA_U0_m_axi_port_a_ARBURST,
        m_axi_port_a_ARLOCK => readA_U0_m_axi_port_a_ARLOCK,
        m_axi_port_a_ARCACHE => readA_U0_m_axi_port_a_ARCACHE,
        m_axi_port_a_ARPROT => readA_U0_m_axi_port_a_ARPROT,
        m_axi_port_a_ARQOS => readA_U0_m_axi_port_a_ARQOS,
        m_axi_port_a_ARREGION => readA_U0_m_axi_port_a_ARREGION,
        m_axi_port_a_ARUSER => readA_U0_m_axi_port_a_ARUSER,
        m_axi_port_a_RVALID => m_axi_port_a_RVALID,
        m_axi_port_a_RREADY => readA_U0_m_axi_port_a_RREADY,
        m_axi_port_a_RDATA => m_axi_port_a_RDATA,
        m_axi_port_a_RLAST => m_axi_port_a_RLAST,
        m_axi_port_a_RID => m_axi_port_a_RID,
        m_axi_port_a_RFIFONUM => m_axi_port_a_RFIFONUM,
        m_axi_port_a_RUSER => m_axi_port_a_RUSER,
        m_axi_port_a_RRESP => m_axi_port_a_RRESP,
        m_axi_port_a_BVALID => ap_const_logic_0,
        m_axi_port_a_BREADY => readA_U0_m_axi_port_a_BREADY,
        m_axi_port_a_BRESP => ap_const_lv2_0,
        m_axi_port_a_BID => ap_const_lv1_0,
        m_axi_port_a_BUSER => ap_const_lv1_0,
        a => a,
        a_cache_0_address0 => readA_U0_a_cache_0_address0,
        a_cache_0_ce0 => readA_U0_a_cache_0_ce0,
        a_cache_0_we0 => readA_U0_a_cache_0_we0,
        a_cache_0_d0 => readA_U0_a_cache_0_d0,
        a_cache_1_address0 => readA_U0_a_cache_1_address0,
        a_cache_1_ce0 => readA_U0_a_cache_1_ce0,
        a_cache_1_we0 => readA_U0_a_cache_1_we0,
        a_cache_1_d0 => readA_U0_a_cache_1_d0,
        a_cache_2_address0 => readA_U0_a_cache_2_address0,
        a_cache_2_ce0 => readA_U0_a_cache_2_ce0,
        a_cache_2_we0 => readA_U0_a_cache_2_we0,
        a_cache_2_d0 => readA_U0_a_cache_2_d0,
        a_cache_3_address0 => readA_U0_a_cache_3_address0,
        a_cache_3_ce0 => readA_U0_a_cache_3_ce0,
        a_cache_3_we0 => readA_U0_a_cache_3_we0,
        a_cache_3_d0 => readA_U0_a_cache_3_d0,
        a_cache_4_address0 => readA_U0_a_cache_4_address0,
        a_cache_4_ce0 => readA_U0_a_cache_4_ce0,
        a_cache_4_we0 => readA_U0_a_cache_4_we0,
        a_cache_4_d0 => readA_U0_a_cache_4_d0,
        a_cache_5_address0 => readA_U0_a_cache_5_address0,
        a_cache_5_ce0 => readA_U0_a_cache_5_ce0,
        a_cache_5_we0 => readA_U0_a_cache_5_we0,
        a_cache_5_d0 => readA_U0_a_cache_5_d0);

    writehfifo_U0 : component tiled_mm_writehfifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writehfifo_U0_ap_start,
        start_full_n => start_for_tn_loop_proc_U0_full_n,
        ap_done => writehfifo_U0_ap_done,
        ap_continue => writehfifo_U0_ap_continue,
        ap_idle => writehfifo_U0_ap_idle,
        ap_ready => writehfifo_U0_ap_ready,
        h_fifo_0_0_din => writehfifo_U0_h_fifo_0_0_din,
        h_fifo_0_0_num_data_valid => h_fifo_num_data_valid,
        h_fifo_0_0_fifo_cap => h_fifo_fifo_cap,
        h_fifo_0_0_full_n => h_fifo_full_n,
        h_fifo_0_0_write => writehfifo_U0_h_fifo_0_0_write,
        h_fifo_1_0_din => writehfifo_U0_h_fifo_1_0_din,
        h_fifo_1_0_num_data_valid => h_fifo_1_num_data_valid,
        h_fifo_1_0_fifo_cap => h_fifo_1_fifo_cap,
        h_fifo_1_0_full_n => h_fifo_1_full_n,
        h_fifo_1_0_write => writehfifo_U0_h_fifo_1_0_write,
        h_fifo_2_0_din => writehfifo_U0_h_fifo_2_0_din,
        h_fifo_2_0_num_data_valid => h_fifo_2_num_data_valid,
        h_fifo_2_0_fifo_cap => h_fifo_2_fifo_cap,
        h_fifo_2_0_full_n => h_fifo_2_full_n,
        h_fifo_2_0_write => writehfifo_U0_h_fifo_2_0_write,
        h_fifo_3_0_din => writehfifo_U0_h_fifo_3_0_din,
        h_fifo_3_0_num_data_valid => h_fifo_3_num_data_valid,
        h_fifo_3_0_fifo_cap => h_fifo_3_fifo_cap,
        h_fifo_3_0_full_n => h_fifo_3_full_n,
        h_fifo_3_0_write => writehfifo_U0_h_fifo_3_0_write,
        h_fifo_4_0_din => writehfifo_U0_h_fifo_4_0_din,
        h_fifo_4_0_num_data_valid => h_fifo_4_num_data_valid,
        h_fifo_4_0_fifo_cap => h_fifo_4_fifo_cap,
        h_fifo_4_0_full_n => h_fifo_4_full_n,
        h_fifo_4_0_write => writehfifo_U0_h_fifo_4_0_write,
        h_fifo_5_0_din => writehfifo_U0_h_fifo_5_0_din,
        h_fifo_5_0_num_data_valid => h_fifo_5_num_data_valid,
        h_fifo_5_0_fifo_cap => h_fifo_5_fifo_cap,
        h_fifo_5_0_full_n => h_fifo_5_full_n,
        h_fifo_5_0_write => writehfifo_U0_h_fifo_5_0_write,
        start_out => writehfifo_U0_start_out,
        start_write => writehfifo_U0_start_write,
        a_cache_0_address0 => writehfifo_U0_a_cache_0_address0,
        a_cache_0_ce0 => writehfifo_U0_a_cache_0_ce0,
        a_cache_0_q0 => a_cache_t_q0,
        a_cache_1_address0 => writehfifo_U0_a_cache_1_address0,
        a_cache_1_ce0 => writehfifo_U0_a_cache_1_ce0,
        a_cache_1_q0 => a_cache_1_t_q0,
        a_cache_2_address0 => writehfifo_U0_a_cache_2_address0,
        a_cache_2_ce0 => writehfifo_U0_a_cache_2_ce0,
        a_cache_2_q0 => a_cache_2_t_q0,
        a_cache_3_address0 => writehfifo_U0_a_cache_3_address0,
        a_cache_3_ce0 => writehfifo_U0_a_cache_3_ce0,
        a_cache_3_q0 => a_cache_3_t_q0,
        a_cache_4_address0 => writehfifo_U0_a_cache_4_address0,
        a_cache_4_ce0 => writehfifo_U0_a_cache_4_ce0,
        a_cache_4_q0 => a_cache_4_t_q0,
        a_cache_5_address0 => writehfifo_U0_a_cache_5_address0,
        a_cache_5_ce0 => writehfifo_U0_a_cache_5_ce0,
        a_cache_5_q0 => a_cache_5_t_q0);

    readB_U0 : component tiled_mm_readB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readB_U0_ap_start,
        ap_done => readB_U0_ap_done,
        ap_continue => readB_U0_ap_continue,
        ap_idle => readB_U0_ap_idle,
        ap_ready => readB_U0_ap_ready,
        m_axi_port_b_AWVALID => readB_U0_m_axi_port_b_AWVALID,
        m_axi_port_b_AWREADY => ap_const_logic_0,
        m_axi_port_b_AWADDR => readB_U0_m_axi_port_b_AWADDR,
        m_axi_port_b_AWID => readB_U0_m_axi_port_b_AWID,
        m_axi_port_b_AWLEN => readB_U0_m_axi_port_b_AWLEN,
        m_axi_port_b_AWSIZE => readB_U0_m_axi_port_b_AWSIZE,
        m_axi_port_b_AWBURST => readB_U0_m_axi_port_b_AWBURST,
        m_axi_port_b_AWLOCK => readB_U0_m_axi_port_b_AWLOCK,
        m_axi_port_b_AWCACHE => readB_U0_m_axi_port_b_AWCACHE,
        m_axi_port_b_AWPROT => readB_U0_m_axi_port_b_AWPROT,
        m_axi_port_b_AWQOS => readB_U0_m_axi_port_b_AWQOS,
        m_axi_port_b_AWREGION => readB_U0_m_axi_port_b_AWREGION,
        m_axi_port_b_AWUSER => readB_U0_m_axi_port_b_AWUSER,
        m_axi_port_b_WVALID => readB_U0_m_axi_port_b_WVALID,
        m_axi_port_b_WREADY => ap_const_logic_0,
        m_axi_port_b_WDATA => readB_U0_m_axi_port_b_WDATA,
        m_axi_port_b_WSTRB => readB_U0_m_axi_port_b_WSTRB,
        m_axi_port_b_WLAST => readB_U0_m_axi_port_b_WLAST,
        m_axi_port_b_WID => readB_U0_m_axi_port_b_WID,
        m_axi_port_b_WUSER => readB_U0_m_axi_port_b_WUSER,
        m_axi_port_b_ARVALID => readB_U0_m_axi_port_b_ARVALID,
        m_axi_port_b_ARREADY => m_axi_port_b_ARREADY,
        m_axi_port_b_ARADDR => readB_U0_m_axi_port_b_ARADDR,
        m_axi_port_b_ARID => readB_U0_m_axi_port_b_ARID,
        m_axi_port_b_ARLEN => readB_U0_m_axi_port_b_ARLEN,
        m_axi_port_b_ARSIZE => readB_U0_m_axi_port_b_ARSIZE,
        m_axi_port_b_ARBURST => readB_U0_m_axi_port_b_ARBURST,
        m_axi_port_b_ARLOCK => readB_U0_m_axi_port_b_ARLOCK,
        m_axi_port_b_ARCACHE => readB_U0_m_axi_port_b_ARCACHE,
        m_axi_port_b_ARPROT => readB_U0_m_axi_port_b_ARPROT,
        m_axi_port_b_ARQOS => readB_U0_m_axi_port_b_ARQOS,
        m_axi_port_b_ARREGION => readB_U0_m_axi_port_b_ARREGION,
        m_axi_port_b_ARUSER => readB_U0_m_axi_port_b_ARUSER,
        m_axi_port_b_RVALID => m_axi_port_b_RVALID,
        m_axi_port_b_RREADY => readB_U0_m_axi_port_b_RREADY,
        m_axi_port_b_RDATA => m_axi_port_b_RDATA,
        m_axi_port_b_RLAST => m_axi_port_b_RLAST,
        m_axi_port_b_RID => m_axi_port_b_RID,
        m_axi_port_b_RFIFONUM => m_axi_port_b_RFIFONUM,
        m_axi_port_b_RUSER => m_axi_port_b_RUSER,
        m_axi_port_b_RRESP => m_axi_port_b_RRESP,
        m_axi_port_b_BVALID => ap_const_logic_0,
        m_axi_port_b_BREADY => readB_U0_m_axi_port_b_BREADY,
        m_axi_port_b_BRESP => ap_const_lv2_0,
        m_axi_port_b_BID => ap_const_lv1_0,
        m_axi_port_b_BUSER => ap_const_lv1_0,
        b => b,
        b_cache_0_address0 => readB_U0_b_cache_0_address0,
        b_cache_0_ce0 => readB_U0_b_cache_0_ce0,
        b_cache_0_we0 => readB_U0_b_cache_0_we0,
        b_cache_0_d0 => readB_U0_b_cache_0_d0,
        b_cache_1_address0 => readB_U0_b_cache_1_address0,
        b_cache_1_ce0 => readB_U0_b_cache_1_ce0,
        b_cache_1_we0 => readB_U0_b_cache_1_we0,
        b_cache_1_d0 => readB_U0_b_cache_1_d0,
        b_cache_2_address0 => readB_U0_b_cache_2_address0,
        b_cache_2_ce0 => readB_U0_b_cache_2_ce0,
        b_cache_2_we0 => readB_U0_b_cache_2_we0,
        b_cache_2_d0 => readB_U0_b_cache_2_d0,
        b_cache_3_address0 => readB_U0_b_cache_3_address0,
        b_cache_3_ce0 => readB_U0_b_cache_3_ce0,
        b_cache_3_we0 => readB_U0_b_cache_3_we0,
        b_cache_3_d0 => readB_U0_b_cache_3_d0,
        b_cache_4_address0 => readB_U0_b_cache_4_address0,
        b_cache_4_ce0 => readB_U0_b_cache_4_ce0,
        b_cache_4_we0 => readB_U0_b_cache_4_we0,
        b_cache_4_d0 => readB_U0_b_cache_4_d0,
        b_cache_5_address0 => readB_U0_b_cache_5_address0,
        b_cache_5_ce0 => readB_U0_b_cache_5_ce0,
        b_cache_5_we0 => readB_U0_b_cache_5_we0,
        b_cache_5_d0 => readB_U0_b_cache_5_d0,
        tn => tn,
        tn_c_din => readB_U0_tn_c_din,
        tn_c_num_data_valid => tn_c_num_data_valid,
        tn_c_fifo_cap => tn_c_fifo_cap,
        tn_c_full_n => tn_c_full_n,
        tn_c_write => readB_U0_tn_c_write);

    writevfifo_U0 : component tiled_mm_writevfifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writevfifo_U0_ap_start,
        ap_done => writevfifo_U0_ap_done,
        ap_continue => writevfifo_U0_ap_continue,
        ap_idle => writevfifo_U0_ap_idle,
        ap_ready => writevfifo_U0_ap_ready,
        v_fifo_0_0_din => writevfifo_U0_v_fifo_0_0_din,
        v_fifo_0_0_num_data_valid => v_fifo_num_data_valid,
        v_fifo_0_0_fifo_cap => v_fifo_fifo_cap,
        v_fifo_0_0_full_n => v_fifo_full_n,
        v_fifo_0_0_write => writevfifo_U0_v_fifo_0_0_write,
        v_fifo_0_1_din => writevfifo_U0_v_fifo_0_1_din,
        v_fifo_0_1_num_data_valid => v_fifo_1_num_data_valid,
        v_fifo_0_1_fifo_cap => v_fifo_1_fifo_cap,
        v_fifo_0_1_full_n => v_fifo_1_full_n,
        v_fifo_0_1_write => writevfifo_U0_v_fifo_0_1_write,
        v_fifo_0_2_din => writevfifo_U0_v_fifo_0_2_din,
        v_fifo_0_2_num_data_valid => v_fifo_2_num_data_valid,
        v_fifo_0_2_fifo_cap => v_fifo_2_fifo_cap,
        v_fifo_0_2_full_n => v_fifo_2_full_n,
        v_fifo_0_2_write => writevfifo_U0_v_fifo_0_2_write,
        v_fifo_0_3_din => writevfifo_U0_v_fifo_0_3_din,
        v_fifo_0_3_num_data_valid => v_fifo_3_num_data_valid,
        v_fifo_0_3_fifo_cap => v_fifo_3_fifo_cap,
        v_fifo_0_3_full_n => v_fifo_3_full_n,
        v_fifo_0_3_write => writevfifo_U0_v_fifo_0_3_write,
        v_fifo_0_4_din => writevfifo_U0_v_fifo_0_4_din,
        v_fifo_0_4_num_data_valid => v_fifo_4_num_data_valid,
        v_fifo_0_4_fifo_cap => v_fifo_4_fifo_cap,
        v_fifo_0_4_full_n => v_fifo_4_full_n,
        v_fifo_0_4_write => writevfifo_U0_v_fifo_0_4_write,
        v_fifo_0_5_din => writevfifo_U0_v_fifo_0_5_din,
        v_fifo_0_5_num_data_valid => v_fifo_5_num_data_valid,
        v_fifo_0_5_fifo_cap => v_fifo_5_fifo_cap,
        v_fifo_0_5_full_n => v_fifo_5_full_n,
        v_fifo_0_5_write => writevfifo_U0_v_fifo_0_5_write,
        b_cache_0_address0 => writevfifo_U0_b_cache_0_address0,
        b_cache_0_ce0 => writevfifo_U0_b_cache_0_ce0,
        b_cache_0_q0 => b_cache_t_q0,
        b_cache_1_address0 => writevfifo_U0_b_cache_1_address0,
        b_cache_1_ce0 => writevfifo_U0_b_cache_1_ce0,
        b_cache_1_q0 => b_cache_1_t_q0,
        b_cache_2_address0 => writevfifo_U0_b_cache_2_address0,
        b_cache_2_ce0 => writevfifo_U0_b_cache_2_ce0,
        b_cache_2_q0 => b_cache_2_t_q0,
        b_cache_3_address0 => writevfifo_U0_b_cache_3_address0,
        b_cache_3_ce0 => writevfifo_U0_b_cache_3_ce0,
        b_cache_3_q0 => b_cache_3_t_q0,
        b_cache_4_address0 => writevfifo_U0_b_cache_4_address0,
        b_cache_4_ce0 => writevfifo_U0_b_cache_4_ce0,
        b_cache_4_q0 => b_cache_4_t_q0,
        b_cache_5_address0 => writevfifo_U0_b_cache_5_address0,
        b_cache_5_ce0 => writevfifo_U0_b_cache_5_ce0,
        b_cache_5_q0 => b_cache_5_t_q0);

    tn_loop_proc_U0 : component tiled_mm_tn_loop_proc
    port map (
        h_fifo_dout => h_fifo_dout,
        h_fifo_empty_n => h_fifo_empty_n,
        h_fifo_read => tn_loop_proc_U0_h_fifo_read,
        v_fifo_dout => v_fifo_dout,
        v_fifo_empty_n => v_fifo_empty_n,
        v_fifo_read => tn_loop_proc_U0_v_fifo_read,
        v_fifo_1_dout => v_fifo_1_dout,
        v_fifo_1_empty_n => v_fifo_1_empty_n,
        v_fifo_1_read => tn_loop_proc_U0_v_fifo_1_read,
        v_fifo_2_dout => v_fifo_2_dout,
        v_fifo_2_empty_n => v_fifo_2_empty_n,
        v_fifo_2_read => tn_loop_proc_U0_v_fifo_2_read,
        v_fifo_3_dout => v_fifo_3_dout,
        v_fifo_3_empty_n => v_fifo_3_empty_n,
        v_fifo_3_read => tn_loop_proc_U0_v_fifo_3_read,
        v_fifo_4_dout => v_fifo_4_dout,
        v_fifo_4_empty_n => v_fifo_4_empty_n,
        v_fifo_4_read => tn_loop_proc_U0_v_fifo_4_read,
        v_fifo_5_dout => v_fifo_5_dout,
        v_fifo_5_empty_n => v_fifo_5_empty_n,
        v_fifo_5_read => tn_loop_proc_U0_v_fifo_5_read,
        h_fifo_1_dout => h_fifo_1_dout,
        h_fifo_1_empty_n => h_fifo_1_empty_n,
        h_fifo_1_read => tn_loop_proc_U0_h_fifo_1_read,
        h_fifo_2_dout => h_fifo_2_dout,
        h_fifo_2_empty_n => h_fifo_2_empty_n,
        h_fifo_2_read => tn_loop_proc_U0_h_fifo_2_read,
        h_fifo_3_dout => h_fifo_3_dout,
        h_fifo_3_empty_n => h_fifo_3_empty_n,
        h_fifo_3_read => tn_loop_proc_U0_h_fifo_3_read,
        h_fifo_4_dout => h_fifo_4_dout,
        h_fifo_4_empty_n => h_fifo_4_empty_n,
        h_fifo_4_read => tn_loop_proc_U0_h_fifo_4_read,
        h_fifo_5_dout => h_fifo_5_dout,
        h_fifo_5_empty_n => h_fifo_5_empty_n,
        h_fifo_5_read => tn_loop_proc_U0_h_fifo_5_read,
        Cstream_din => tn_loop_proc_U0_Cstream_din,
        Cstream_full_n => Cstream_full_n,
        Cstream_write => tn_loop_proc_U0_Cstream_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => tn_loop_proc_U0_ap_start,
        ap_done => tn_loop_proc_U0_ap_done,
        ap_ready => tn_loop_proc_U0_ap_ready,
        ap_idle => tn_loop_proc_U0_ap_idle,
        ap_continue => tn_loop_proc_U0_ap_continue);

    writeC_U0 : component tiled_mm_writeC
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeC_U0_ap_start,
        ap_done => writeC_U0_ap_done,
        ap_continue => writeC_U0_ap_continue,
        ap_idle => writeC_U0_ap_idle,
        ap_ready => writeC_U0_ap_ready,
        m_axi_port_c_AWVALID => writeC_U0_m_axi_port_c_AWVALID,
        m_axi_port_c_AWREADY => m_axi_port_c_AWREADY,
        m_axi_port_c_AWADDR => writeC_U0_m_axi_port_c_AWADDR,
        m_axi_port_c_AWID => writeC_U0_m_axi_port_c_AWID,
        m_axi_port_c_AWLEN => writeC_U0_m_axi_port_c_AWLEN,
        m_axi_port_c_AWSIZE => writeC_U0_m_axi_port_c_AWSIZE,
        m_axi_port_c_AWBURST => writeC_U0_m_axi_port_c_AWBURST,
        m_axi_port_c_AWLOCK => writeC_U0_m_axi_port_c_AWLOCK,
        m_axi_port_c_AWCACHE => writeC_U0_m_axi_port_c_AWCACHE,
        m_axi_port_c_AWPROT => writeC_U0_m_axi_port_c_AWPROT,
        m_axi_port_c_AWQOS => writeC_U0_m_axi_port_c_AWQOS,
        m_axi_port_c_AWREGION => writeC_U0_m_axi_port_c_AWREGION,
        m_axi_port_c_AWUSER => writeC_U0_m_axi_port_c_AWUSER,
        m_axi_port_c_WVALID => writeC_U0_m_axi_port_c_WVALID,
        m_axi_port_c_WREADY => m_axi_port_c_WREADY,
        m_axi_port_c_WDATA => writeC_U0_m_axi_port_c_WDATA,
        m_axi_port_c_WSTRB => writeC_U0_m_axi_port_c_WSTRB,
        m_axi_port_c_WLAST => writeC_U0_m_axi_port_c_WLAST,
        m_axi_port_c_WID => writeC_U0_m_axi_port_c_WID,
        m_axi_port_c_WUSER => writeC_U0_m_axi_port_c_WUSER,
        m_axi_port_c_ARVALID => writeC_U0_m_axi_port_c_ARVALID,
        m_axi_port_c_ARREADY => ap_const_logic_0,
        m_axi_port_c_ARADDR => writeC_U0_m_axi_port_c_ARADDR,
        m_axi_port_c_ARID => writeC_U0_m_axi_port_c_ARID,
        m_axi_port_c_ARLEN => writeC_U0_m_axi_port_c_ARLEN,
        m_axi_port_c_ARSIZE => writeC_U0_m_axi_port_c_ARSIZE,
        m_axi_port_c_ARBURST => writeC_U0_m_axi_port_c_ARBURST,
        m_axi_port_c_ARLOCK => writeC_U0_m_axi_port_c_ARLOCK,
        m_axi_port_c_ARCACHE => writeC_U0_m_axi_port_c_ARCACHE,
        m_axi_port_c_ARPROT => writeC_U0_m_axi_port_c_ARPROT,
        m_axi_port_c_ARQOS => writeC_U0_m_axi_port_c_ARQOS,
        m_axi_port_c_ARREGION => writeC_U0_m_axi_port_c_ARREGION,
        m_axi_port_c_ARUSER => writeC_U0_m_axi_port_c_ARUSER,
        m_axi_port_c_RVALID => ap_const_logic_0,
        m_axi_port_c_RREADY => writeC_U0_m_axi_port_c_RREADY,
        m_axi_port_c_RDATA => ap_const_lv8_0,
        m_axi_port_c_RLAST => ap_const_logic_0,
        m_axi_port_c_RID => ap_const_lv1_0,
        m_axi_port_c_RFIFONUM => ap_const_lv11_0,
        m_axi_port_c_RUSER => ap_const_lv1_0,
        m_axi_port_c_RRESP => ap_const_lv2_0,
        m_axi_port_c_BVALID => m_axi_port_c_BVALID,
        m_axi_port_c_BREADY => writeC_U0_m_axi_port_c_BREADY,
        m_axi_port_c_BRESP => m_axi_port_c_BRESP,
        m_axi_port_c_BID => m_axi_port_c_BID,
        m_axi_port_c_BUSER => m_axi_port_c_BUSER,
        out_r_dout => out_c_dout,
        out_r_num_data_valid => out_c_num_data_valid,
        out_r_fifo_cap => out_c_fifo_cap,
        out_r_empty_n => out_c_empty_n,
        out_r_read => writeC_U0_out_r_read,
        Cstream_dout => Cstream_dout,
        Cstream_num_data_valid => Cstream_num_data_valid,
        Cstream_fifo_cap => Cstream_fifo_cap,
        Cstream_empty_n => Cstream_empty_n,
        Cstream_read => writeC_U0_Cstream_read,
        tn_dout => tn_c_dout,
        tn_num_data_valid => tn_c_num_data_valid,
        tn_fifo_cap => tn_c_fifo_cap,
        tn_empty_n => tn_c_empty_n,
        tn_read => writeC_U0_tn_read);

    out_c_U : component tiled_mm_fifo_w64_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_out_c_din,
        if_full_n => out_c_full_n,
        if_write => entry_proc_U0_out_c_write,
        if_dout => out_c_dout,
        if_num_data_valid => out_c_num_data_valid,
        if_fifo_cap => out_c_fifo_cap,
        if_empty_n => out_c_empty_n,
        if_read => writeC_U0_out_r_read);

    h_fifo_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writehfifo_U0_h_fifo_0_0_din,
        if_full_n => h_fifo_full_n,
        if_write => writehfifo_U0_h_fifo_0_0_write,
        if_dout => h_fifo_dout,
        if_num_data_valid => h_fifo_num_data_valid,
        if_fifo_cap => h_fifo_fifo_cap,
        if_empty_n => h_fifo_empty_n,
        if_read => tn_loop_proc_U0_h_fifo_read);

    h_fifo_1_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writehfifo_U0_h_fifo_1_0_din,
        if_full_n => h_fifo_1_full_n,
        if_write => writehfifo_U0_h_fifo_1_0_write,
        if_dout => h_fifo_1_dout,
        if_num_data_valid => h_fifo_1_num_data_valid,
        if_fifo_cap => h_fifo_1_fifo_cap,
        if_empty_n => h_fifo_1_empty_n,
        if_read => tn_loop_proc_U0_h_fifo_1_read);

    h_fifo_2_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writehfifo_U0_h_fifo_2_0_din,
        if_full_n => h_fifo_2_full_n,
        if_write => writehfifo_U0_h_fifo_2_0_write,
        if_dout => h_fifo_2_dout,
        if_num_data_valid => h_fifo_2_num_data_valid,
        if_fifo_cap => h_fifo_2_fifo_cap,
        if_empty_n => h_fifo_2_empty_n,
        if_read => tn_loop_proc_U0_h_fifo_2_read);

    h_fifo_3_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writehfifo_U0_h_fifo_3_0_din,
        if_full_n => h_fifo_3_full_n,
        if_write => writehfifo_U0_h_fifo_3_0_write,
        if_dout => h_fifo_3_dout,
        if_num_data_valid => h_fifo_3_num_data_valid,
        if_fifo_cap => h_fifo_3_fifo_cap,
        if_empty_n => h_fifo_3_empty_n,
        if_read => tn_loop_proc_U0_h_fifo_3_read);

    h_fifo_4_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writehfifo_U0_h_fifo_4_0_din,
        if_full_n => h_fifo_4_full_n,
        if_write => writehfifo_U0_h_fifo_4_0_write,
        if_dout => h_fifo_4_dout,
        if_num_data_valid => h_fifo_4_num_data_valid,
        if_fifo_cap => h_fifo_4_fifo_cap,
        if_empty_n => h_fifo_4_empty_n,
        if_read => tn_loop_proc_U0_h_fifo_4_read);

    h_fifo_5_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writehfifo_U0_h_fifo_5_0_din,
        if_full_n => h_fifo_5_full_n,
        if_write => writehfifo_U0_h_fifo_5_0_write,
        if_dout => h_fifo_5_dout,
        if_num_data_valid => h_fifo_5_num_data_valid,
        if_fifo_cap => h_fifo_5_fifo_cap,
        if_empty_n => h_fifo_5_empty_n,
        if_read => tn_loop_proc_U0_h_fifo_5_read);

    tn_c_U : component tiled_mm_fifo_w3_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readB_U0_tn_c_din,
        if_full_n => tn_c_full_n,
        if_write => readB_U0_tn_c_write,
        if_dout => tn_c_dout,
        if_num_data_valid => tn_c_num_data_valid,
        if_fifo_cap => tn_c_fifo_cap,
        if_empty_n => tn_c_empty_n,
        if_read => writeC_U0_tn_read);

    v_fifo_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writevfifo_U0_v_fifo_0_0_din,
        if_full_n => v_fifo_full_n,
        if_write => writevfifo_U0_v_fifo_0_0_write,
        if_dout => v_fifo_dout,
        if_num_data_valid => v_fifo_num_data_valid,
        if_fifo_cap => v_fifo_fifo_cap,
        if_empty_n => v_fifo_empty_n,
        if_read => tn_loop_proc_U0_v_fifo_read);

    v_fifo_1_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writevfifo_U0_v_fifo_0_1_din,
        if_full_n => v_fifo_1_full_n,
        if_write => writevfifo_U0_v_fifo_0_1_write,
        if_dout => v_fifo_1_dout,
        if_num_data_valid => v_fifo_1_num_data_valid,
        if_fifo_cap => v_fifo_1_fifo_cap,
        if_empty_n => v_fifo_1_empty_n,
        if_read => tn_loop_proc_U0_v_fifo_1_read);

    v_fifo_2_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writevfifo_U0_v_fifo_0_2_din,
        if_full_n => v_fifo_2_full_n,
        if_write => writevfifo_U0_v_fifo_0_2_write,
        if_dout => v_fifo_2_dout,
        if_num_data_valid => v_fifo_2_num_data_valid,
        if_fifo_cap => v_fifo_2_fifo_cap,
        if_empty_n => v_fifo_2_empty_n,
        if_read => tn_loop_proc_U0_v_fifo_2_read);

    v_fifo_3_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writevfifo_U0_v_fifo_0_3_din,
        if_full_n => v_fifo_3_full_n,
        if_write => writevfifo_U0_v_fifo_0_3_write,
        if_dout => v_fifo_3_dout,
        if_num_data_valid => v_fifo_3_num_data_valid,
        if_fifo_cap => v_fifo_3_fifo_cap,
        if_empty_n => v_fifo_3_empty_n,
        if_read => tn_loop_proc_U0_v_fifo_3_read);

    v_fifo_4_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writevfifo_U0_v_fifo_0_4_din,
        if_full_n => v_fifo_4_full_n,
        if_write => writevfifo_U0_v_fifo_0_4_write,
        if_dout => v_fifo_4_dout,
        if_num_data_valid => v_fifo_4_num_data_valid,
        if_fifo_cap => v_fifo_4_fifo_cap,
        if_empty_n => v_fifo_4_empty_n,
        if_read => tn_loop_proc_U0_v_fifo_4_read);

    v_fifo_5_U : component tiled_mm_fifo_w16_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writevfifo_U0_v_fifo_0_5_din,
        if_full_n => v_fifo_5_full_n,
        if_write => writevfifo_U0_v_fifo_0_5_write,
        if_dout => v_fifo_5_dout,
        if_num_data_valid => v_fifo_5_num_data_valid,
        if_fifo_cap => v_fifo_5_fifo_cap,
        if_empty_n => v_fifo_5_empty_n,
        if_read => tn_loop_proc_U0_v_fifo_5_read);

    Cstream_U : component tiled_mm_fifo_w8_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tn_loop_proc_U0_Cstream_din,
        if_full_n => Cstream_full_n,
        if_write => tn_loop_proc_U0_Cstream_write,
        if_dout => Cstream_dout,
        if_num_data_valid => Cstream_num_data_valid,
        if_fifo_cap => Cstream_fifo_cap,
        if_empty_n => Cstream_empty_n,
        if_read => writeC_U0_Cstream_read);

    start_for_writeC_U0_U : component tiled_mm_start_for_writeC_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_writeC_U0_din,
        if_full_n => start_for_writeC_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_writeC_U0_dout,
        if_empty_n => start_for_writeC_U0_empty_n,
        if_read => writeC_U0_ap_ready);

    start_for_tn_loop_proc_U0_U : component tiled_mm_start_for_tn_loop_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tn_loop_proc_U0_din,
        if_full_n => start_for_tn_loop_proc_U0_full_n,
        if_write => writehfifo_U0_start_write,
        if_dout => start_for_tn_loop_proc_U0_dout,
        if_empty_n => start_for_tn_loop_proc_U0_empty_n,
        if_read => tn_loop_proc_U0_ap_ready);





    ap_sync_reg_channel_write_a_cache_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_a_cache <= ap_const_logic_0;
            else
                if (((readA_U0_ap_done and readA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_a_cache <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_a_cache <= ap_sync_channel_write_a_cache;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_a_cache_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_a_cache_1 <= ap_const_logic_0;
            else
                if (((readA_U0_ap_done and readA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_a_cache_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_a_cache_1 <= ap_sync_channel_write_a_cache_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_a_cache_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_a_cache_2 <= ap_const_logic_0;
            else
                if (((readA_U0_ap_done and readA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_a_cache_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_a_cache_2 <= ap_sync_channel_write_a_cache_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_a_cache_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_a_cache_3 <= ap_const_logic_0;
            else
                if (((readA_U0_ap_done and readA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_a_cache_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_a_cache_3 <= ap_sync_channel_write_a_cache_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_a_cache_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_a_cache_4 <= ap_const_logic_0;
            else
                if (((readA_U0_ap_done and readA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_a_cache_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_a_cache_4 <= ap_sync_channel_write_a_cache_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_a_cache_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_a_cache_5 <= ap_const_logic_0;
            else
                if (((readA_U0_ap_done and readA_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_a_cache_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_a_cache_5 <= ap_sync_channel_write_a_cache_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_b_cache_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_b_cache <= ap_const_logic_0;
            else
                if (((readB_U0_ap_done and readB_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_b_cache <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_b_cache <= ap_sync_channel_write_b_cache;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_b_cache_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_b_cache_1 <= ap_const_logic_0;
            else
                if (((readB_U0_ap_done and readB_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_b_cache_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_b_cache_1 <= ap_sync_channel_write_b_cache_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_b_cache_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_b_cache_2 <= ap_const_logic_0;
            else
                if (((readB_U0_ap_done and readB_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_b_cache_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_b_cache_2 <= ap_sync_channel_write_b_cache_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_b_cache_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_b_cache_3 <= ap_const_logic_0;
            else
                if (((readB_U0_ap_done and readB_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_b_cache_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_b_cache_3 <= ap_sync_channel_write_b_cache_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_b_cache_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_b_cache_4 <= ap_const_logic_0;
            else
                if (((readB_U0_ap_done and readB_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_b_cache_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_b_cache_4 <= ap_sync_channel_write_b_cache_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_b_cache_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_b_cache_5 <= ap_const_logic_0;
            else
                if (((readB_U0_ap_done and readB_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_b_cache_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_b_cache_5 <= ap_sync_channel_write_b_cache_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readA_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_readA_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readA_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readA_U0_ap_ready <= ap_sync_readA_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readB_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_readB_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readB_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readB_U0_ap_ready <= ap_sync_readB_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_a_cache <= (readA_U0_ap_done and (ap_sync_reg_channel_write_a_cache xor ap_const_logic_1));
    ap_channel_done_a_cache_1 <= (readA_U0_ap_done and (ap_sync_reg_channel_write_a_cache_1 xor ap_const_logic_1));
    ap_channel_done_a_cache_2 <= (readA_U0_ap_done and (ap_sync_reg_channel_write_a_cache_2 xor ap_const_logic_1));
    ap_channel_done_a_cache_3 <= (readA_U0_ap_done and (ap_sync_reg_channel_write_a_cache_3 xor ap_const_logic_1));
    ap_channel_done_a_cache_4 <= (readA_U0_ap_done and (ap_sync_reg_channel_write_a_cache_4 xor ap_const_logic_1));
    ap_channel_done_a_cache_5 <= (readA_U0_ap_done and (ap_sync_reg_channel_write_a_cache_5 xor ap_const_logic_1));
    ap_channel_done_b_cache <= (readB_U0_ap_done and (ap_sync_reg_channel_write_b_cache xor ap_const_logic_1));
    ap_channel_done_b_cache_1 <= (readB_U0_ap_done and (ap_sync_reg_channel_write_b_cache_1 xor ap_const_logic_1));
    ap_channel_done_b_cache_2 <= (readB_U0_ap_done and (ap_sync_reg_channel_write_b_cache_2 xor ap_const_logic_1));
    ap_channel_done_b_cache_3 <= (readB_U0_ap_done and (ap_sync_reg_channel_write_b_cache_3 xor ap_const_logic_1));
    ap_channel_done_b_cache_4 <= (readB_U0_ap_done and (ap_sync_reg_channel_write_b_cache_4 xor ap_const_logic_1));
    ap_channel_done_b_cache_5 <= (readB_U0_ap_done and (ap_sync_reg_channel_write_b_cache_5 xor ap_const_logic_1));
    ap_done <= writeC_U0_ap_done;
    ap_idle <= (writevfifo_U0_ap_idle and writehfifo_U0_ap_idle and writeC_U0_ap_idle and tn_loop_proc_U0_ap_idle and readB_U0_ap_idle and readA_U0_ap_idle and (b_cache_5_t_empty_n xor ap_const_logic_1) and (b_cache_4_t_empty_n xor ap_const_logic_1) and (b_cache_3_t_empty_n xor ap_const_logic_1) and (b_cache_2_t_empty_n xor ap_const_logic_1) and (b_cache_1_t_empty_n xor ap_const_logic_1) and (b_cache_t_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor a_cache_5_t_empty_n) and (ap_const_logic_1 xor a_cache_4_t_empty_n) and (ap_const_logic_1 xor a_cache_3_t_empty_n) and (ap_const_logic_1 xor a_cache_2_t_empty_n) and (ap_const_logic_1 xor a_cache_1_t_empty_n) and (ap_const_logic_1 xor a_cache_t_empty_n) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_a_cache <= ((readA_U0_a_cache_0_full_n and ap_channel_done_a_cache) or ap_sync_reg_channel_write_a_cache);
    ap_sync_channel_write_a_cache_1 <= ((readA_U0_a_cache_1_full_n and ap_channel_done_a_cache_1) or ap_sync_reg_channel_write_a_cache_1);
    ap_sync_channel_write_a_cache_2 <= ((readA_U0_a_cache_2_full_n and ap_channel_done_a_cache_2) or ap_sync_reg_channel_write_a_cache_2);
    ap_sync_channel_write_a_cache_3 <= ((readA_U0_a_cache_3_full_n and ap_channel_done_a_cache_3) or ap_sync_reg_channel_write_a_cache_3);
    ap_sync_channel_write_a_cache_4 <= ((readA_U0_a_cache_4_full_n and ap_channel_done_a_cache_4) or ap_sync_reg_channel_write_a_cache_4);
    ap_sync_channel_write_a_cache_5 <= ((readA_U0_a_cache_5_full_n and ap_channel_done_a_cache_5) or ap_sync_reg_channel_write_a_cache_5);
    ap_sync_channel_write_b_cache <= ((readB_U0_b_cache_0_full_n and ap_channel_done_b_cache) or ap_sync_reg_channel_write_b_cache);
    ap_sync_channel_write_b_cache_1 <= ((readB_U0_b_cache_1_full_n and ap_channel_done_b_cache_1) or ap_sync_reg_channel_write_b_cache_1);
    ap_sync_channel_write_b_cache_2 <= ((readB_U0_b_cache_2_full_n and ap_channel_done_b_cache_2) or ap_sync_reg_channel_write_b_cache_2);
    ap_sync_channel_write_b_cache_3 <= ((readB_U0_b_cache_3_full_n and ap_channel_done_b_cache_3) or ap_sync_reg_channel_write_b_cache_3);
    ap_sync_channel_write_b_cache_4 <= ((readB_U0_b_cache_4_full_n and ap_channel_done_b_cache_4) or ap_sync_reg_channel_write_b_cache_4);
    ap_sync_channel_write_b_cache_5 <= ((readB_U0_b_cache_5_full_n and ap_channel_done_b_cache_5) or ap_sync_reg_channel_write_b_cache_5);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_readA_U0_ap_ready <= (readA_U0_ap_ready or ap_sync_reg_readA_U0_ap_ready);
    ap_sync_readB_U0_ap_ready <= (readB_U0_ap_ready or ap_sync_reg_readB_U0_ap_ready);
    ap_sync_ready <= (ap_sync_readB_U0_ap_ready and ap_sync_readA_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_port_a_ARADDR <= readA_U0_m_axi_port_a_ARADDR;
    m_axi_port_a_ARBURST <= readA_U0_m_axi_port_a_ARBURST;
    m_axi_port_a_ARCACHE <= readA_U0_m_axi_port_a_ARCACHE;
    m_axi_port_a_ARID <= readA_U0_m_axi_port_a_ARID;
    m_axi_port_a_ARLEN <= readA_U0_m_axi_port_a_ARLEN;
    m_axi_port_a_ARLOCK <= readA_U0_m_axi_port_a_ARLOCK;
    m_axi_port_a_ARPROT <= readA_U0_m_axi_port_a_ARPROT;
    m_axi_port_a_ARQOS <= readA_U0_m_axi_port_a_ARQOS;
    m_axi_port_a_ARREGION <= readA_U0_m_axi_port_a_ARREGION;
    m_axi_port_a_ARSIZE <= readA_U0_m_axi_port_a_ARSIZE;
    m_axi_port_a_ARUSER <= readA_U0_m_axi_port_a_ARUSER;
    m_axi_port_a_ARVALID <= readA_U0_m_axi_port_a_ARVALID;
    m_axi_port_a_AWADDR <= ap_const_lv64_0;
    m_axi_port_a_AWBURST <= ap_const_lv2_0;
    m_axi_port_a_AWCACHE <= ap_const_lv4_0;
    m_axi_port_a_AWID <= ap_const_lv1_0;
    m_axi_port_a_AWLEN <= ap_const_lv32_0;
    m_axi_port_a_AWLOCK <= ap_const_lv2_0;
    m_axi_port_a_AWPROT <= ap_const_lv3_0;
    m_axi_port_a_AWQOS <= ap_const_lv4_0;
    m_axi_port_a_AWREGION <= ap_const_lv4_0;
    m_axi_port_a_AWSIZE <= ap_const_lv3_0;
    m_axi_port_a_AWUSER <= ap_const_lv1_0;
    m_axi_port_a_AWVALID <= ap_const_logic_0;
    m_axi_port_a_BREADY <= ap_const_logic_0;
    m_axi_port_a_RREADY <= readA_U0_m_axi_port_a_RREADY;
    m_axi_port_a_WDATA <= ap_const_lv8_0;
    m_axi_port_a_WID <= ap_const_lv1_0;
    m_axi_port_a_WLAST <= ap_const_logic_0;
    m_axi_port_a_WSTRB <= ap_const_lv1_0;
    m_axi_port_a_WUSER <= ap_const_lv1_0;
    m_axi_port_a_WVALID <= ap_const_logic_0;
    m_axi_port_b_ARADDR <= readB_U0_m_axi_port_b_ARADDR;
    m_axi_port_b_ARBURST <= readB_U0_m_axi_port_b_ARBURST;
    m_axi_port_b_ARCACHE <= readB_U0_m_axi_port_b_ARCACHE;
    m_axi_port_b_ARID <= readB_U0_m_axi_port_b_ARID;
    m_axi_port_b_ARLEN <= readB_U0_m_axi_port_b_ARLEN;
    m_axi_port_b_ARLOCK <= readB_U0_m_axi_port_b_ARLOCK;
    m_axi_port_b_ARPROT <= readB_U0_m_axi_port_b_ARPROT;
    m_axi_port_b_ARQOS <= readB_U0_m_axi_port_b_ARQOS;
    m_axi_port_b_ARREGION <= readB_U0_m_axi_port_b_ARREGION;
    m_axi_port_b_ARSIZE <= readB_U0_m_axi_port_b_ARSIZE;
    m_axi_port_b_ARUSER <= readB_U0_m_axi_port_b_ARUSER;
    m_axi_port_b_ARVALID <= readB_U0_m_axi_port_b_ARVALID;
    m_axi_port_b_AWADDR <= ap_const_lv64_0;
    m_axi_port_b_AWBURST <= ap_const_lv2_0;
    m_axi_port_b_AWCACHE <= ap_const_lv4_0;
    m_axi_port_b_AWID <= ap_const_lv1_0;
    m_axi_port_b_AWLEN <= ap_const_lv32_0;
    m_axi_port_b_AWLOCK <= ap_const_lv2_0;
    m_axi_port_b_AWPROT <= ap_const_lv3_0;
    m_axi_port_b_AWQOS <= ap_const_lv4_0;
    m_axi_port_b_AWREGION <= ap_const_lv4_0;
    m_axi_port_b_AWSIZE <= ap_const_lv3_0;
    m_axi_port_b_AWUSER <= ap_const_lv1_0;
    m_axi_port_b_AWVALID <= ap_const_logic_0;
    m_axi_port_b_BREADY <= ap_const_logic_0;
    m_axi_port_b_RREADY <= readB_U0_m_axi_port_b_RREADY;
    m_axi_port_b_WDATA <= ap_const_lv8_0;
    m_axi_port_b_WID <= ap_const_lv1_0;
    m_axi_port_b_WLAST <= ap_const_logic_0;
    m_axi_port_b_WSTRB <= ap_const_lv1_0;
    m_axi_port_b_WUSER <= ap_const_lv1_0;
    m_axi_port_b_WVALID <= ap_const_logic_0;
    m_axi_port_c_ARADDR <= ap_const_lv64_0;
    m_axi_port_c_ARBURST <= ap_const_lv2_0;
    m_axi_port_c_ARCACHE <= ap_const_lv4_0;
    m_axi_port_c_ARID <= ap_const_lv1_0;
    m_axi_port_c_ARLEN <= ap_const_lv32_0;
    m_axi_port_c_ARLOCK <= ap_const_lv2_0;
    m_axi_port_c_ARPROT <= ap_const_lv3_0;
    m_axi_port_c_ARQOS <= ap_const_lv4_0;
    m_axi_port_c_ARREGION <= ap_const_lv4_0;
    m_axi_port_c_ARSIZE <= ap_const_lv3_0;
    m_axi_port_c_ARUSER <= ap_const_lv1_0;
    m_axi_port_c_ARVALID <= ap_const_logic_0;
    m_axi_port_c_AWADDR <= writeC_U0_m_axi_port_c_AWADDR;
    m_axi_port_c_AWBURST <= writeC_U0_m_axi_port_c_AWBURST;
    m_axi_port_c_AWCACHE <= writeC_U0_m_axi_port_c_AWCACHE;
    m_axi_port_c_AWID <= writeC_U0_m_axi_port_c_AWID;
    m_axi_port_c_AWLEN <= writeC_U0_m_axi_port_c_AWLEN;
    m_axi_port_c_AWLOCK <= writeC_U0_m_axi_port_c_AWLOCK;
    m_axi_port_c_AWPROT <= writeC_U0_m_axi_port_c_AWPROT;
    m_axi_port_c_AWQOS <= writeC_U0_m_axi_port_c_AWQOS;
    m_axi_port_c_AWREGION <= writeC_U0_m_axi_port_c_AWREGION;
    m_axi_port_c_AWSIZE <= writeC_U0_m_axi_port_c_AWSIZE;
    m_axi_port_c_AWUSER <= writeC_U0_m_axi_port_c_AWUSER;
    m_axi_port_c_AWVALID <= writeC_U0_m_axi_port_c_AWVALID;
    m_axi_port_c_BREADY <= writeC_U0_m_axi_port_c_BREADY;
    m_axi_port_c_RREADY <= ap_const_logic_0;
    m_axi_port_c_WDATA <= writeC_U0_m_axi_port_c_WDATA;
    m_axi_port_c_WID <= writeC_U0_m_axi_port_c_WID;
    m_axi_port_c_WLAST <= writeC_U0_m_axi_port_c_WLAST;
    m_axi_port_c_WSTRB <= writeC_U0_m_axi_port_c_WSTRB;
    m_axi_port_c_WUSER <= writeC_U0_m_axi_port_c_WUSER;
    m_axi_port_c_WVALID <= writeC_U0_m_axi_port_c_WVALID;
    readA_U0_a_cache_0_full_n <= a_cache_i_full_n;
    readA_U0_a_cache_1_full_n <= a_cache_1_i_full_n;
    readA_U0_a_cache_2_full_n <= a_cache_2_i_full_n;
    readA_U0_a_cache_3_full_n <= a_cache_3_i_full_n;
    readA_U0_a_cache_4_full_n <= a_cache_4_i_full_n;
    readA_U0_a_cache_5_full_n <= a_cache_5_i_full_n;
    readA_U0_ap_continue <= (ap_sync_channel_write_a_cache_5 and ap_sync_channel_write_a_cache_4 and ap_sync_channel_write_a_cache_3 and ap_sync_channel_write_a_cache_2 and ap_sync_channel_write_a_cache_1 and ap_sync_channel_write_a_cache);
    readA_U0_ap_start <= ((ap_sync_reg_readA_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readB_U0_ap_continue <= (ap_sync_channel_write_b_cache_5 and ap_sync_channel_write_b_cache_4 and ap_sync_channel_write_b_cache_3 and ap_sync_channel_write_b_cache_2 and ap_sync_channel_write_b_cache_1 and ap_sync_channel_write_b_cache);
    readB_U0_ap_start <= ((ap_sync_reg_readB_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readB_U0_b_cache_0_full_n <= b_cache_i_full_n;
    readB_U0_b_cache_1_full_n <= b_cache_1_i_full_n;
    readB_U0_b_cache_2_full_n <= b_cache_2_i_full_n;
    readB_U0_b_cache_3_full_n <= b_cache_3_i_full_n;
    readB_U0_b_cache_4_full_n <= b_cache_4_i_full_n;
    readB_U0_b_cache_5_full_n <= b_cache_5_i_full_n;
    start_for_tn_loop_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_writeC_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tn_loop_proc_U0_ap_continue <= ap_const_logic_1;
    tn_loop_proc_U0_ap_start <= start_for_tn_loop_proc_U0_empty_n;
    writeC_U0_ap_continue <= ap_continue;
    writeC_U0_ap_start <= start_for_writeC_U0_empty_n;
    writehfifo_U0_ap_continue <= ap_const_logic_1;
    writehfifo_U0_ap_start <= (a_cache_t_empty_n and a_cache_5_t_empty_n and a_cache_4_t_empty_n and a_cache_3_t_empty_n and a_cache_2_t_empty_n and a_cache_1_t_empty_n);
    writevfifo_U0_ap_continue <= ap_const_logic_1;
    writevfifo_U0_ap_start <= (b_cache_t_empty_n and b_cache_5_t_empty_n and b_cache_4_t_empty_n and b_cache_3_t_empty_n and b_cache_2_t_empty_n and b_cache_1_t_empty_n);
end behav;
