-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_writeC is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_port_c_AWVALID : OUT STD_LOGIC;
    m_axi_port_c_AWREADY : IN STD_LOGIC;
    m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WVALID : OUT STD_LOGIC;
    m_axi_port_c_WREADY : IN STD_LOGIC;
    m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WLAST : OUT STD_LOGIC;
    m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_ARVALID : OUT STD_LOGIC;
    m_axi_port_c_ARREADY : IN STD_LOGIC;
    m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RVALID : IN STD_LOGIC;
    m_axi_port_c_RREADY : OUT STD_LOGIC;
    m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_c_RLAST : IN STD_LOGIC;
    m_axi_port_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BVALID : IN STD_LOGIC;
    m_axi_port_c_BREADY : OUT STD_LOGIC;
    m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    out_r_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    out_r_empty_n : IN STD_LOGIC;
    out_r_read : OUT STD_LOGIC;
    Cstream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    Cstream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    Cstream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    Cstream_empty_n : IN STD_LOGIC;
    Cstream_read : OUT STD_LOGIC;
    tn_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    tn_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    tn_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    tn_empty_n : IN STD_LOGIC;
    tn_read : OUT STD_LOGIC );
end;


architecture behav of tiled_mm_writeC is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_r_blk_n : STD_LOGIC;
    signal tn_blk_n : STD_LOGIC;
    signal tn_read_reg_101 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal out_read_reg_107 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul15_fu_94_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul15_reg_112 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_idle : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_ready : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWVALID : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WVALID : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WLAST : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARVALID : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_RREADY : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_BREADY : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_Cstream_read : STD_LOGIC;
    signal grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_shl_fu_72_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_83_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast2_fu_79_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast3_fu_90_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_port_c_AWVALID : OUT STD_LOGIC;
        m_axi_port_c_AWREADY : IN STD_LOGIC;
        m_axi_port_c_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WVALID : OUT STD_LOGIC;
        m_axi_port_c_WREADY : IN STD_LOGIC;
        m_axi_port_c_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_c_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WLAST : OUT STD_LOGIC;
        m_axi_port_c_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_ARVALID : OUT STD_LOGIC;
        m_axi_port_c_ARREADY : IN STD_LOGIC;
        m_axi_port_c_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_c_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_c_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RVALID : IN STD_LOGIC;
        m_axi_port_c_RREADY : OUT STD_LOGIC;
        m_axi_port_c_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_c_RLAST : IN STD_LOGIC;
        m_axi_port_c_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_c_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_BVALID : IN STD_LOGIC;
        m_axi_port_c_BREADY : OUT STD_LOGIC;
        m_axi_port_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_c_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_c_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Cstream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        Cstream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        Cstream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        Cstream_empty_n : IN STD_LOGIC;
        Cstream_read : OUT STD_LOGIC;
        sext_ln198 : IN STD_LOGIC_VECTOR (10 downto 0);
        out_load : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62 : component tiled_mm_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start,
        ap_done => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done,
        ap_idle => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_idle,
        ap_ready => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_ready,
        m_axi_port_c_AWVALID => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWVALID,
        m_axi_port_c_AWREADY => m_axi_port_c_AWREADY,
        m_axi_port_c_AWADDR => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWADDR,
        m_axi_port_c_AWID => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWID,
        m_axi_port_c_AWLEN => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWLEN,
        m_axi_port_c_AWSIZE => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWSIZE,
        m_axi_port_c_AWBURST => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWBURST,
        m_axi_port_c_AWLOCK => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWLOCK,
        m_axi_port_c_AWCACHE => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWCACHE,
        m_axi_port_c_AWPROT => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWPROT,
        m_axi_port_c_AWQOS => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWQOS,
        m_axi_port_c_AWREGION => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWREGION,
        m_axi_port_c_AWUSER => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWUSER,
        m_axi_port_c_WVALID => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WVALID,
        m_axi_port_c_WREADY => m_axi_port_c_WREADY,
        m_axi_port_c_WDATA => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WDATA,
        m_axi_port_c_WSTRB => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WSTRB,
        m_axi_port_c_WLAST => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WLAST,
        m_axi_port_c_WID => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WID,
        m_axi_port_c_WUSER => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WUSER,
        m_axi_port_c_ARVALID => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARVALID,
        m_axi_port_c_ARREADY => ap_const_logic_0,
        m_axi_port_c_ARADDR => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARADDR,
        m_axi_port_c_ARID => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARID,
        m_axi_port_c_ARLEN => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARLEN,
        m_axi_port_c_ARSIZE => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARSIZE,
        m_axi_port_c_ARBURST => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARBURST,
        m_axi_port_c_ARLOCK => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARLOCK,
        m_axi_port_c_ARCACHE => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARCACHE,
        m_axi_port_c_ARPROT => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARPROT,
        m_axi_port_c_ARQOS => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARQOS,
        m_axi_port_c_ARREGION => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARREGION,
        m_axi_port_c_ARUSER => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_ARUSER,
        m_axi_port_c_RVALID => ap_const_logic_0,
        m_axi_port_c_RREADY => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_RREADY,
        m_axi_port_c_RDATA => ap_const_lv8_0,
        m_axi_port_c_RLAST => ap_const_logic_0,
        m_axi_port_c_RID => ap_const_lv1_0,
        m_axi_port_c_RFIFONUM => ap_const_lv11_0,
        m_axi_port_c_RUSER => ap_const_lv1_0,
        m_axi_port_c_RRESP => ap_const_lv2_0,
        m_axi_port_c_BVALID => m_axi_port_c_BVALID,
        m_axi_port_c_BREADY => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_BREADY,
        m_axi_port_c_BRESP => m_axi_port_c_BRESP,
        m_axi_port_c_BID => m_axi_port_c_BID,
        m_axi_port_c_BUSER => m_axi_port_c_BUSER,
        Cstream_dout => Cstream_dout,
        Cstream_num_data_valid => ap_const_lv3_0,
        Cstream_fifo_cap => ap_const_lv3_0,
        Cstream_empty_n => Cstream_empty_n,
        Cstream_read => grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_Cstream_read,
        sext_ln198 => mul15_reg_112,
        out_load => out_read_reg_107);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    mul15_reg_112(10 downto 5) <= mul15_fu_94_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                out_read_reg_107 <= out_r_dout;
                tn_read_reg_101 <= tn_dout;
            end if;
        end if;
    end process;
    mul15_reg_112(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    Cstream_read_assign_proc : process(grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_Cstream_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Cstream_read <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_Cstream_read;
        else 
            Cstream_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done)
    begin
        if ((grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, out_r_empty_n, tn_empty_n)
    begin
                ap_block_state1 <= ((tn_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_ap_start_reg;
    m_axi_port_c_ARADDR <= ap_const_lv64_0;
    m_axi_port_c_ARBURST <= ap_const_lv2_0;
    m_axi_port_c_ARCACHE <= ap_const_lv4_0;
    m_axi_port_c_ARID <= ap_const_lv1_0;
    m_axi_port_c_ARLEN <= ap_const_lv32_0;
    m_axi_port_c_ARLOCK <= ap_const_lv2_0;
    m_axi_port_c_ARPROT <= ap_const_lv3_0;
    m_axi_port_c_ARQOS <= ap_const_lv4_0;
    m_axi_port_c_ARREGION <= ap_const_lv4_0;
    m_axi_port_c_ARSIZE <= ap_const_lv3_0;
    m_axi_port_c_ARUSER <= ap_const_lv1_0;
    m_axi_port_c_ARVALID <= ap_const_logic_0;
    m_axi_port_c_AWADDR <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWADDR;
    m_axi_port_c_AWBURST <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWBURST;
    m_axi_port_c_AWCACHE <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWCACHE;
    m_axi_port_c_AWID <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWID;
    m_axi_port_c_AWLEN <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWLEN;
    m_axi_port_c_AWLOCK <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWLOCK;
    m_axi_port_c_AWPROT <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWPROT;
    m_axi_port_c_AWQOS <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWQOS;
    m_axi_port_c_AWREGION <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWREGION;
    m_axi_port_c_AWSIZE <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWSIZE;
    m_axi_port_c_AWUSER <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWUSER;

    m_axi_port_c_AWVALID_assign_proc : process(ap_CS_fsm_state2, grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_port_c_AWVALID <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_AWVALID;
        else 
            m_axi_port_c_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_port_c_BREADY_assign_proc : process(ap_CS_fsm_state2, grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_BREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_port_c_BREADY <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_BREADY;
        else 
            m_axi_port_c_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_c_RREADY <= ap_const_logic_0;
    m_axi_port_c_WDATA <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WDATA;
    m_axi_port_c_WID <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WID;
    m_axi_port_c_WLAST <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WLAST;
    m_axi_port_c_WSTRB <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WSTRB;
    m_axi_port_c_WUSER <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WUSER;

    m_axi_port_c_WVALID_assign_proc : process(ap_CS_fsm_state2, grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_port_c_WVALID <= grp_writeC_Pipeline_tn_loop_tm_loop_wr_out_i_wr_out_j_fu_62_m_axi_port_c_WVALID;
        else 
            m_axi_port_c_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul15_fu_94_p2 <= std_logic_vector(unsigned(p_shl_cast2_fu_79_p1) - unsigned(p_shl1_cast3_fu_90_p1));

    out_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_blk_n <= out_r_empty_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            out_r_read <= ap_const_logic_1;
        else 
            out_r_read <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast3_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_83_p3),11));
    p_shl1_fu_83_p3 <= (tn_read_reg_101 & ap_const_lv5_0);
    p_shl_cast2_fu_79_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_72_p3),11));
    p_shl_fu_72_p3 <= (tn_read_reg_101 & ap_const_lv7_0);

    tn_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tn_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tn_blk_n <= tn_empty_n;
        else 
            tn_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tn_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            tn_read <= ap_const_logic_1;
        else 
            tn_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
