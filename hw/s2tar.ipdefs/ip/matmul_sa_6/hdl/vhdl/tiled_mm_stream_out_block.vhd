-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_stream_out_block is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Cstream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    Cstream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    Cstream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    Cstream_full_n : IN STD_LOGIC;
    Cstream_write : OUT STD_LOGIC;
    out_block_read : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_107 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_108 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_109 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_110 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_111 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_112 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_113 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_114 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_115 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_116 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_117 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_118 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_119 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_120 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_121 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_122 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_123 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_124 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_125 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_126 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_127 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_128 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_129 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_130 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_131 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_132 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_133 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_134 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_135 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_136 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_137 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_138 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_139 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_140 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_block_read_141 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of tiled_mm_stream_out_block is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln84_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Cstream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_6_fu_615_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_692 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_3_fu_124 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal j_fu_647_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_3_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_fu_128 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln84_1_fu_415_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_4_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_132 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln84_fu_383_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln86_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_395_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_423_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln84_fu_407_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_487_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_519_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_551_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_583_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_423_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_455_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_487_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_519_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_551_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_583_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_615_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_615_p14 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_119 : BOOLEAN;
    signal tmp_fu_423_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_423_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_423_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_423_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_423_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_423_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_455_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_487_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_487_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_487_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_487_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_487_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_487_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_519_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_519_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_519_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_519_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_519_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_519_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_551_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_551_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_551_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_551_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_551_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_551_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_583_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_583_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_583_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_583_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_583_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_615_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_615_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_615_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_615_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_615_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_615_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_sparsemux_13_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_mm_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    sparsemux_13_3_8_1_1_U338 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => out_block_read,
        din1 => out_block_read_107,
        din2 => out_block_read_108,
        din3 => out_block_read_109,
        din4 => out_block_read_110,
        din5 => out_block_read_111,
        def => tmp_fu_423_p13,
        sel => select_ln84_fu_407_p3,
        dout => tmp_fu_423_p15);

    sparsemux_13_3_8_1_1_U339 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => out_block_read_112,
        din1 => out_block_read_113,
        din2 => out_block_read_114,
        din3 => out_block_read_115,
        din4 => out_block_read_116,
        din5 => out_block_read_117,
        def => tmp_1_fu_455_p13,
        sel => select_ln84_fu_407_p3,
        dout => tmp_1_fu_455_p15);

    sparsemux_13_3_8_1_1_U340 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => out_block_read_118,
        din1 => out_block_read_119,
        din2 => out_block_read_120,
        din3 => out_block_read_121,
        din4 => out_block_read_122,
        din5 => out_block_read_123,
        def => tmp_2_fu_487_p13,
        sel => select_ln84_fu_407_p3,
        dout => tmp_2_fu_487_p15);

    sparsemux_13_3_8_1_1_U341 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => out_block_read_124,
        din1 => out_block_read_125,
        din2 => out_block_read_126,
        din3 => out_block_read_127,
        din4 => out_block_read_128,
        din5 => out_block_read_129,
        def => tmp_3_fu_519_p13,
        sel => select_ln84_fu_407_p3,
        dout => tmp_3_fu_519_p15);

    sparsemux_13_3_8_1_1_U342 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => out_block_read_130,
        din1 => out_block_read_131,
        din2 => out_block_read_132,
        din3 => out_block_read_133,
        din4 => out_block_read_134,
        din5 => out_block_read_135,
        def => tmp_4_fu_551_p13,
        sel => select_ln84_fu_407_p3,
        dout => tmp_4_fu_551_p15);

    sparsemux_13_3_8_1_1_U343 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => out_block_read_136,
        din1 => out_block_read_137,
        din2 => out_block_read_138,
        din3 => out_block_read_139,
        din4 => out_block_read_140,
        din5 => out_block_read_141,
        def => tmp_5_fu_583_p13,
        sel => select_ln84_fu_407_p3,
        dout => tmp_5_fu_583_p15);

    sparsemux_13_3_8_1_1_U344 : component tiled_mm_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_fu_423_p15,
        din1 => tmp_1_fu_455_p15,
        din2 => tmp_2_fu_487_p15,
        din3 => tmp_3_fu_519_p15,
        din4 => tmp_4_fu_551_p15,
        din5 => tmp_5_fu_583_p15,
        def => tmp_6_fu_615_p13,
        sel => tmp_6_fu_615_p14,
        dout => tmp_6_fu_615_p15);

    flow_control_loop_pipe_U : component tiled_mm_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if ((icmp_ln84_fu_377_p2 = ap_const_lv1_0)) then 
                    i_4_fu_128 <= select_ln84_1_fu_415_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_4_fu_128 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if ((icmp_ln84_fu_377_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_132 <= add_ln84_fu_383_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_132 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_3_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if ((icmp_ln84_fu_377_p2 = ap_const_lv1_0)) then 
                    j_3_fu_124 <= j_fu_647_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_3_fu_124 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_reg_692 <= tmp_6_fu_615_p15;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Cstream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, Cstream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Cstream_blk_n <= Cstream_full_n;
        else 
            Cstream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Cstream_din <= tmp_6_reg_692;

    Cstream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Cstream_write <= ap_const_logic_1;
        else 
            Cstream_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln84_fu_383_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(Cstream_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = Cstream_full_n);
    end process;


    ap_condition_119_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_119 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln84_fu_377_p2, ap_start_int)
    begin
        if (((icmp_ln84_fu_377_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_4_fu_128, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_4_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_4_load <= i_4_fu_128;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_132, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_j_3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_3_fu_124, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_3_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_3_load <= j_3_fu_124;
        end if; 
    end process;

    i_fu_395_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4_load) + unsigned(ap_const_lv3_1));
    icmp_ln84_fu_377_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_24) else "0";
    icmp_ln86_fu_401_p2 <= "1" when (ap_sig_allocacmp_j_3_load = ap_const_lv3_6) else "0";
    j_fu_647_p2 <= std_logic_vector(unsigned(select_ln84_fu_407_p3) + unsigned(ap_const_lv3_1));
    select_ln84_1_fu_415_p3 <= 
        i_fu_395_p2 when (icmp_ln86_fu_401_p2(0) = '1') else 
        ap_sig_allocacmp_i_4_load;
    select_ln84_fu_407_p3 <= 
        ap_const_lv3_0 when (icmp_ln86_fu_401_p2(0) = '1') else 
        ap_sig_allocacmp_j_3_load;
    tmp_1_fu_455_p13 <= "XXXXXXXX";
    tmp_2_fu_487_p13 <= "XXXXXXXX";
    tmp_3_fu_519_p13 <= "XXXXXXXX";
    tmp_4_fu_551_p13 <= "XXXXXXXX";
    tmp_5_fu_583_p13 <= "XXXXXXXX";
    tmp_6_fu_615_p13 <= "XXXXXXXX";
    tmp_6_fu_615_p14 <= 
        i_fu_395_p2 when (icmp_ln86_fu_401_p2(0) = '1') else 
        ap_sig_allocacmp_i_4_load;
    tmp_fu_423_p13 <= "XXXXXXXX";
end behav;
