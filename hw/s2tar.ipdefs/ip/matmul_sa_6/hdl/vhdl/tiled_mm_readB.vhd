-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_readB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_port_b_AWVALID : OUT STD_LOGIC;
    m_axi_port_b_AWREADY : IN STD_LOGIC;
    m_axi_port_b_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_b_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_WVALID : OUT STD_LOGIC;
    m_axi_port_b_WREADY : IN STD_LOGIC;
    m_axi_port_b_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_b_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_WLAST : OUT STD_LOGIC;
    m_axi_port_b_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_ARVALID : OUT STD_LOGIC;
    m_axi_port_b_ARREADY : IN STD_LOGIC;
    m_axi_port_b_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_b_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_b_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_RVALID : IN STD_LOGIC;
    m_axi_port_b_RREADY : OUT STD_LOGIC;
    m_axi_port_b_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_b_RLAST : IN STD_LOGIC;
    m_axi_port_b_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_b_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_BVALID : IN STD_LOGIC;
    m_axi_port_b_BREADY : OUT STD_LOGIC;
    m_axi_port_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_b_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_b_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    b : IN STD_LOGIC_VECTOR (63 downto 0);
    b_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_0_ce0 : OUT STD_LOGIC;
    b_cache_0_we0 : OUT STD_LOGIC;
    b_cache_0_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    b_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_1_ce0 : OUT STD_LOGIC;
    b_cache_1_we0 : OUT STD_LOGIC;
    b_cache_1_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    b_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_2_ce0 : OUT STD_LOGIC;
    b_cache_2_we0 : OUT STD_LOGIC;
    b_cache_2_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    b_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_3_ce0 : OUT STD_LOGIC;
    b_cache_3_we0 : OUT STD_LOGIC;
    b_cache_3_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    b_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_4_ce0 : OUT STD_LOGIC;
    b_cache_4_we0 : OUT STD_LOGIC;
    b_cache_4_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    b_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_5_ce0 : OUT STD_LOGIC;
    b_cache_5_we0 : OUT STD_LOGIC;
    b_cache_5_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    tn : IN STD_LOGIC_VECTOR (2 downto 0);
    tn_c_din : OUT STD_LOGIC_VECTOR (2 downto 0);
    tn_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    tn_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    tn_c_full_n : IN STD_LOGIC;
    tn_c_write : OUT STD_LOGIC );
end;


architecture behav of tiled_mm_readB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_480 : STD_LOGIC_VECTOR (10 downto 0) := "10010000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tn_c_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal mul9_fu_263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul9_reg_454 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln147_fu_293_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln147_reg_462 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln147_fu_317_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_reg_467 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_1_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln147_1_reg_475 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_mid2_fu_339_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_mid2_reg_482 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_reg_487 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln149_reg_492 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_ap_start : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_ap_done : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_ap_idle : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_ap_ready : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWVALID : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WVALID : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WLAST : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARVALID : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_RREADY : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_BREADY : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out_ap_vld : STD_LOGIC;
    signal grp_readB_Pipeline_rb_b_pack_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln156_1_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal n_fu_114 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal n_3_fu_404_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln147_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_118 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal trunc_ln156_fu_401_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_239_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast4_fu_247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast5_fu_259_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln149_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln149_fu_350_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln149_fu_350_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln149_fu_350_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_366_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln156_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln156_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_333_ap_start : STD_LOGIC;
    signal grp_fu_333_ap_done : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal mul_ln149_fu_350_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_readB_Pipeline_rb_b_pack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_port_b_AWVALID : OUT STD_LOGIC;
        m_axi_port_b_AWREADY : IN STD_LOGIC;
        m_axi_port_b_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WVALID : OUT STD_LOGIC;
        m_axi_port_b_WREADY : IN STD_LOGIC;
        m_axi_port_b_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_b_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WLAST : OUT STD_LOGIC;
        m_axi_port_b_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_ARVALID : OUT STD_LOGIC;
        m_axi_port_b_ARREADY : IN STD_LOGIC;
        m_axi_port_b_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_port_b_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_port_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_port_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_port_b_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RVALID : IN STD_LOGIC;
        m_axi_port_b_RREADY : OUT STD_LOGIC;
        m_axi_port_b_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_port_b_RLAST : IN STD_LOGIC;
        m_axi_port_b_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_port_b_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_BVALID : IN STD_LOGIC;
        m_axi_port_b_BREADY : OUT STD_LOGIC;
        m_axi_port_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_port_b_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_port_b_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mul_mid2 : IN STD_LOGIC_VECTOR (9 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        mul9 : IN STD_LOGIC_VECTOR (10 downto 0);
        zext_ln149 : IN STD_LOGIC_VECTOR (6 downto 0);
        b_line_02_out : OUT STD_LOGIC_VECTOR (511 downto 0);
        b_line_02_out_ap_vld : OUT STD_LOGIC );
    end component;


    component tiled_mm_urem_7ns_4ns_3_11_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component tiled_mm_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    grp_readB_Pipeline_rb_b_pack_fu_228 : component tiled_mm_readB_Pipeline_rb_b_pack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_readB_Pipeline_rb_b_pack_fu_228_ap_start,
        ap_done => grp_readB_Pipeline_rb_b_pack_fu_228_ap_done,
        ap_idle => grp_readB_Pipeline_rb_b_pack_fu_228_ap_idle,
        ap_ready => grp_readB_Pipeline_rb_b_pack_fu_228_ap_ready,
        m_axi_port_b_AWVALID => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWVALID,
        m_axi_port_b_AWREADY => ap_const_logic_0,
        m_axi_port_b_AWADDR => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWADDR,
        m_axi_port_b_AWID => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWID,
        m_axi_port_b_AWLEN => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWLEN,
        m_axi_port_b_AWSIZE => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWSIZE,
        m_axi_port_b_AWBURST => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWBURST,
        m_axi_port_b_AWLOCK => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWLOCK,
        m_axi_port_b_AWCACHE => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWCACHE,
        m_axi_port_b_AWPROT => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWPROT,
        m_axi_port_b_AWQOS => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWQOS,
        m_axi_port_b_AWREGION => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWREGION,
        m_axi_port_b_AWUSER => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_AWUSER,
        m_axi_port_b_WVALID => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WVALID,
        m_axi_port_b_WREADY => ap_const_logic_0,
        m_axi_port_b_WDATA => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WDATA,
        m_axi_port_b_WSTRB => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WSTRB,
        m_axi_port_b_WLAST => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WLAST,
        m_axi_port_b_WID => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WID,
        m_axi_port_b_WUSER => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_WUSER,
        m_axi_port_b_ARVALID => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARVALID,
        m_axi_port_b_ARREADY => m_axi_port_b_ARREADY,
        m_axi_port_b_ARADDR => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARADDR,
        m_axi_port_b_ARID => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARID,
        m_axi_port_b_ARLEN => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARLEN,
        m_axi_port_b_ARSIZE => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARSIZE,
        m_axi_port_b_ARBURST => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARBURST,
        m_axi_port_b_ARLOCK => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARLOCK,
        m_axi_port_b_ARCACHE => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARCACHE,
        m_axi_port_b_ARPROT => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARPROT,
        m_axi_port_b_ARQOS => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARQOS,
        m_axi_port_b_ARREGION => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARREGION,
        m_axi_port_b_ARUSER => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARUSER,
        m_axi_port_b_RVALID => m_axi_port_b_RVALID,
        m_axi_port_b_RREADY => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_RREADY,
        m_axi_port_b_RDATA => m_axi_port_b_RDATA,
        m_axi_port_b_RLAST => m_axi_port_b_RLAST,
        m_axi_port_b_RID => m_axi_port_b_RID,
        m_axi_port_b_RFIFONUM => m_axi_port_b_RFIFONUM,
        m_axi_port_b_RUSER => m_axi_port_b_RUSER,
        m_axi_port_b_RRESP => m_axi_port_b_RRESP,
        m_axi_port_b_BVALID => ap_const_logic_0,
        m_axi_port_b_BREADY => grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_BREADY,
        m_axi_port_b_BRESP => ap_const_lv2_0,
        m_axi_port_b_BID => ap_const_lv1_0,
        m_axi_port_b_BUSER => ap_const_lv1_0,
        mul_mid2 => mul_mid2_reg_482,
        b => b,
        mul9 => mul9_reg_454,
        zext_ln149 => select_ln147_reg_467,
        b_line_02_out => grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out,
        b_line_02_out_ap_vld => grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out_ap_vld);

    urem_7ns_4ns_3_11_seq_1_U36 : component tiled_mm_urem_7ns_4ns_3_11_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_333_ap_start,
        done => grp_fu_333_ap_done,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    mul_7ns_9ns_15_1_1_U37 : component tiled_mm_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln149_fu_350_p0,
        din1 => mul_ln149_fu_350_p1,
        dout => mul_ln149_fu_350_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln147_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_readB_Pipeline_rb_b_pack_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_readB_Pipeline_rb_b_pack_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_readB_Pipeline_rb_b_pack_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_readB_Pipeline_rb_b_pack_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_readB_Pipeline_rb_b_pack_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                i_fu_118 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_fu_118 <= select_ln147_1_reg_475;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                indvar_flatten_fu_122 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten_fu_122 <= add_ln147_reg_462;
            end if; 
        end if;
    end process;

    n_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                n_fu_114 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_fu_114 <= n_3_fu_404_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln147_reg_462 <= add_ln147_fu_293_p2;
                select_ln147_1_reg_475 <= select_ln147_1_fu_325_p3;
                select_ln147_reg_467 <= select_ln147_fu_317_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    mul9_reg_454(10 downto 5) <= mul9_fu_263_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    mul_mid2_reg_482(9 downto 6) <= mul_mid2_fu_339_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_1_reg_487 <= mul_ln149_fu_350_p2(14 downto 10);
                urem_ln149_reg_492 <= grp_fu_333_p2;
            end if;
        end if;
    end process;
    mul9_reg_454(4 downto 0) <= "00000";
    mul_mid2_reg_482(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state2, grp_readB_Pipeline_rb_b_pack_fu_228_ap_done, ap_CS_fsm_state4, icmp_ln147_fu_287_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln147_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_readB_Pipeline_rb_b_pack_fu_228_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln147_fu_293_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_122) + unsigned(ap_const_lv11_1));
    add_ln156_fu_385_p2 <= std_logic_vector(unsigned(tmp_fu_366_p3) + unsigned(zext_ln156_fu_382_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_readB_Pipeline_rb_b_pack_fu_228_ap_done)
    begin
        if ((grp_readB_Pipeline_rb_b_pack_fu_228_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, tn_c_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tn_c_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln147_fu_287_p2)
    begin
        if (((icmp_ln147_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln147_fu_287_p2)
    begin
        if (((icmp_ln147_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_0_address0 <= zext_ln156_1_fu_391_p1(8 - 1 downto 0);

    b_cache_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_cache_0_ce0 <= ap_const_logic_1;
        else 
            b_cache_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_0_d0 <= grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out;

    b_cache_0_we0_assign_proc : process(ap_CS_fsm_state13, trunc_ln156_fu_401_p1)
    begin
        if (((trunc_ln156_fu_401_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            b_cache_0_we0 <= ap_const_logic_1;
        else 
            b_cache_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_1_address0 <= zext_ln156_1_fu_391_p1(8 - 1 downto 0);

    b_cache_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_cache_1_ce0 <= ap_const_logic_1;
        else 
            b_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_1_d0 <= grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out;

    b_cache_1_we0_assign_proc : process(ap_CS_fsm_state13, trunc_ln156_fu_401_p1)
    begin
        if (((trunc_ln156_fu_401_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            b_cache_1_we0 <= ap_const_logic_1;
        else 
            b_cache_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_2_address0 <= zext_ln156_1_fu_391_p1(8 - 1 downto 0);

    b_cache_2_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_cache_2_ce0 <= ap_const_logic_1;
        else 
            b_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_2_d0 <= grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out;

    b_cache_2_we0_assign_proc : process(ap_CS_fsm_state13, trunc_ln156_fu_401_p1)
    begin
        if (((trunc_ln156_fu_401_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            b_cache_2_we0 <= ap_const_logic_1;
        else 
            b_cache_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_3_address0 <= zext_ln156_1_fu_391_p1(8 - 1 downto 0);

    b_cache_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_cache_3_ce0 <= ap_const_logic_1;
        else 
            b_cache_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_3_d0 <= grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out;

    b_cache_3_we0_assign_proc : process(ap_CS_fsm_state13, trunc_ln156_fu_401_p1)
    begin
        if (((trunc_ln156_fu_401_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            b_cache_3_we0 <= ap_const_logic_1;
        else 
            b_cache_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_4_address0 <= zext_ln156_1_fu_391_p1(8 - 1 downto 0);

    b_cache_4_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_cache_4_ce0 <= ap_const_logic_1;
        else 
            b_cache_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_4_d0 <= grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out;

    b_cache_4_we0_assign_proc : process(ap_CS_fsm_state13, trunc_ln156_fu_401_p1)
    begin
        if (((trunc_ln156_fu_401_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            b_cache_4_we0 <= ap_const_logic_1;
        else 
            b_cache_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_5_address0 <= zext_ln156_1_fu_391_p1(8 - 1 downto 0);

    b_cache_5_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_cache_5_ce0 <= ap_const_logic_1;
        else 
            b_cache_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_5_d0 <= grp_readB_Pipeline_rb_b_pack_fu_228_b_line_02_out;

    b_cache_5_we0_assign_proc : process(ap_CS_fsm_state13, trunc_ln156_fu_401_p1)
    begin
        if ((not((trunc_ln156_fu_401_p1 = ap_const_lv3_0)) and not((trunc_ln156_fu_401_p1 = ap_const_lv3_1)) and not((trunc_ln156_fu_401_p1 = ap_const_lv3_2)) and not((trunc_ln156_fu_401_p1 = ap_const_lv3_3)) and not((trunc_ln156_fu_401_p1 = ap_const_lv3_4)) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            b_cache_5_we0 <= ap_const_logic_1;
        else 
            b_cache_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_333_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln147_fu_287_p2)
    begin
        if (((icmp_ln147_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_333_ap_start <= ap_const_logic_1;
        else 
            grp_fu_333_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_333_ce <= ap_const_logic_0;
        else 
            grp_fu_333_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_333_p0 <= 
        ap_const_lv7_0 when (icmp_ln149_fu_311_p2(0) = '1') else 
        n_fu_114;
    grp_fu_333_p1 <= ap_const_lv7_6(4 - 1 downto 0);
    grp_readB_Pipeline_rb_b_pack_fu_228_ap_start <= grp_readB_Pipeline_rb_b_pack_fu_228_ap_start_reg;
    i_6_fu_305_p2 <= std_logic_vector(unsigned(i_fu_118) + unsigned(ap_const_lv4_1));
    icmp_ln147_fu_287_p2 <= "1" when (indvar_flatten_fu_122 = ap_const_lv11_480) else "0";
    icmp_ln149_fu_311_p2 <= "1" when (n_fu_114 = ap_const_lv7_60) else "0";
    m_axi_port_b_ARADDR <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARADDR;
    m_axi_port_b_ARBURST <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARBURST;
    m_axi_port_b_ARCACHE <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARCACHE;
    m_axi_port_b_ARID <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARID;
    m_axi_port_b_ARLEN <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARLEN;
    m_axi_port_b_ARLOCK <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARLOCK;
    m_axi_port_b_ARPROT <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARPROT;
    m_axi_port_b_ARQOS <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARQOS;
    m_axi_port_b_ARREGION <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARREGION;
    m_axi_port_b_ARSIZE <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARSIZE;
    m_axi_port_b_ARUSER <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARUSER;

    m_axi_port_b_ARVALID_assign_proc : process(ap_CS_fsm_state3, grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_port_b_ARVALID <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_ARVALID;
        else 
            m_axi_port_b_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_b_AWADDR <= ap_const_lv64_0;
    m_axi_port_b_AWBURST <= ap_const_lv2_0;
    m_axi_port_b_AWCACHE <= ap_const_lv4_0;
    m_axi_port_b_AWID <= ap_const_lv1_0;
    m_axi_port_b_AWLEN <= ap_const_lv32_0;
    m_axi_port_b_AWLOCK <= ap_const_lv2_0;
    m_axi_port_b_AWPROT <= ap_const_lv3_0;
    m_axi_port_b_AWQOS <= ap_const_lv4_0;
    m_axi_port_b_AWREGION <= ap_const_lv4_0;
    m_axi_port_b_AWSIZE <= ap_const_lv3_0;
    m_axi_port_b_AWUSER <= ap_const_lv1_0;
    m_axi_port_b_AWVALID <= ap_const_logic_0;
    m_axi_port_b_BREADY <= ap_const_logic_0;

    m_axi_port_b_RREADY_assign_proc : process(ap_CS_fsm_state3, grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_port_b_RREADY <= grp_readB_Pipeline_rb_b_pack_fu_228_m_axi_port_b_RREADY;
        else 
            m_axi_port_b_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_b_WDATA <= ap_const_lv8_0;
    m_axi_port_b_WID <= ap_const_lv1_0;
    m_axi_port_b_WLAST <= ap_const_logic_0;
    m_axi_port_b_WSTRB <= ap_const_lv1_0;
    m_axi_port_b_WUSER <= ap_const_lv1_0;
    m_axi_port_b_WVALID <= ap_const_logic_0;
    mul9_fu_263_p2 <= std_logic_vector(unsigned(p_shl_cast4_fu_247_p1) - unsigned(p_shl1_cast5_fu_259_p1));
    mul_ln149_fu_350_p0 <= mul_ln149_fu_350_p00(7 - 1 downto 0);
    mul_ln149_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln147_reg_467),15));
    mul_ln149_fu_350_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    mul_mid2_fu_339_p3 <= (select_ln147_1_reg_475 & ap_const_lv6_0);
    n_3_fu_404_p2 <= std_logic_vector(unsigned(select_ln147_reg_467) + unsigned(ap_const_lv7_1));
    p_shl1_cast5_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_251_p3),11));
    p_shl1_fu_251_p3 <= (tn & ap_const_lv5_0);
    p_shl_cast4_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_239_p3),11));
    p_shl_fu_239_p3 <= (tn & ap_const_lv7_0);
    select_ln147_1_fu_325_p3 <= 
        i_6_fu_305_p2 when (icmp_ln149_fu_311_p2(0) = '1') else 
        i_fu_118;
    select_ln147_fu_317_p3 <= 
        ap_const_lv7_0 when (icmp_ln149_fu_311_p2(0) = '1') else 
        n_fu_114;
    tmp_fu_366_p3 <= (select_ln147_1_reg_475 & ap_const_lv4_0);

    tn_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tn_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tn_c_blk_n <= tn_c_full_n;
        else 
            tn_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tn_c_din <= tn;

    tn_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            tn_c_write <= ap_const_logic_1;
        else 
            tn_c_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln156_fu_401_p1 <= urem_ln149_reg_492(3 - 1 downto 0);
    zext_ln156_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln156_fu_385_p2),64));
    zext_ln156_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_487),8));
end behav;
