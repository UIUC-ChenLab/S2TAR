-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_readA_Pipeline_rd_a_pack is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_port_a_AWVALID : OUT STD_LOGIC;
    m_axi_port_a_AWREADY : IN STD_LOGIC;
    m_axi_port_a_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_a_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WVALID : OUT STD_LOGIC;
    m_axi_port_a_WREADY : IN STD_LOGIC;
    m_axi_port_a_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WLAST : OUT STD_LOGIC;
    m_axi_port_a_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_ARVALID : OUT STD_LOGIC;
    m_axi_port_a_ARREADY : IN STD_LOGIC;
    m_axi_port_a_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_port_a_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_port_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_port_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_port_a_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RVALID : IN STD_LOGIC;
    m_axi_port_a_RREADY : OUT STD_LOGIC;
    m_axi_port_a_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_port_a_RLAST : IN STD_LOGIC;
    m_axi_port_a_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_port_a_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BVALID : IN STD_LOGIC;
    m_axi_port_a_BREADY : OUT STD_LOGIC;
    m_axi_port_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_port_a_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_port_a_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    a_line_02_out : OUT STD_LOGIC_VECTOR (511 downto 0);
    a_line_02_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_mm_readA_Pipeline_rd_a_pack is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln101_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal port_a_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln101_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln103_fu_113_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln103_reg_202 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln103_reg_202_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal port_a_addr_read_reg_207 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_line_02_fu_56 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal a_line_fu_163_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_03_fu_60 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal p_5_fu_101_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_p : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_125_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_fu_132_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln103_fu_136_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln103_fu_142_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln103_1_fu_154_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln103_fu_148_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln103_1_fu_157_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tiled_mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    a_line_02_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    a_line_02_fu_56 <= ap_const_lv512_lc_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    a_line_02_fu_56 <= a_line_fu_163_p2;
                end if;
            end if; 
        end if;
    end process;

    p_03_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln101_fu_95_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_03_fu_60 <= p_5_fu_101_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    p_03_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln101_reg_193 <= icmp_ln101_fu_95_p2;
                port_a_addr_read_reg_207 <= m_axi_port_a_RDATA;
                trunc_ln103_reg_202 <= trunc_ln103_fu_113_p1;
                trunc_ln103_reg_202_pp0_iter1_reg <= trunc_ln103_reg_202;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_line_02_out <= a_line_02_fu_56;

    a_line_02_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln101_reg_193)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_reg_193 = ap_const_lv1_1))) then 
            a_line_02_out_ap_vld <= ap_const_logic_1;
        else 
            a_line_02_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_line_fu_163_p2 <= (shl_ln103_1_fu_157_p2 or and_ln103_fu_148_p2);
    and_ln103_fu_148_p2 <= (xor_ln103_fu_142_p2 and a_line_02_fu_56);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_port_a_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_port_a_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln101_fu_95_p2)
    begin
        if (((icmp_ln101_fu_95_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, p_03_fu_60)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_p <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_p <= p_03_fu_60;
        end if; 
    end process;

    icmp_ln101_fu_95_p2 <= "1" when (ap_sig_allocacmp_p = ap_const_lv7_40) else "0";
    m_axi_port_a_ARADDR <= ap_const_lv64_0;
    m_axi_port_a_ARBURST <= ap_const_lv2_0;
    m_axi_port_a_ARCACHE <= ap_const_lv4_0;
    m_axi_port_a_ARID <= ap_const_lv1_0;
    m_axi_port_a_ARLEN <= ap_const_lv32_0;
    m_axi_port_a_ARLOCK <= ap_const_lv2_0;
    m_axi_port_a_ARPROT <= ap_const_lv3_0;
    m_axi_port_a_ARQOS <= ap_const_lv4_0;
    m_axi_port_a_ARREGION <= ap_const_lv4_0;
    m_axi_port_a_ARSIZE <= ap_const_lv3_0;
    m_axi_port_a_ARUSER <= ap_const_lv1_0;
    m_axi_port_a_ARVALID <= ap_const_logic_0;
    m_axi_port_a_AWADDR <= ap_const_lv64_0;
    m_axi_port_a_AWBURST <= ap_const_lv2_0;
    m_axi_port_a_AWCACHE <= ap_const_lv4_0;
    m_axi_port_a_AWID <= ap_const_lv1_0;
    m_axi_port_a_AWLEN <= ap_const_lv32_0;
    m_axi_port_a_AWLOCK <= ap_const_lv2_0;
    m_axi_port_a_AWPROT <= ap_const_lv3_0;
    m_axi_port_a_AWQOS <= ap_const_lv4_0;
    m_axi_port_a_AWREGION <= ap_const_lv4_0;
    m_axi_port_a_AWSIZE <= ap_const_lv3_0;
    m_axi_port_a_AWUSER <= ap_const_lv1_0;
    m_axi_port_a_AWVALID <= ap_const_logic_0;
    m_axi_port_a_BREADY <= ap_const_logic_0;

    m_axi_port_a_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_port_a_RREADY <= ap_const_logic_1;
        else 
            m_axi_port_a_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_port_a_WDATA <= ap_const_lv8_0;
    m_axi_port_a_WID <= ap_const_lv1_0;
    m_axi_port_a_WLAST <= ap_const_logic_0;
    m_axi_port_a_WSTRB <= ap_const_lv1_0;
    m_axi_port_a_WUSER <= ap_const_lv1_0;
    m_axi_port_a_WVALID <= ap_const_logic_0;
    p_5_fu_101_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_p) + unsigned(ap_const_lv7_1));

    port_a_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_port_a_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            port_a_blk_n_R <= m_axi_port_a_RVALID;
        else 
            port_a_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    shl_ln103_1_fu_157_p2 <= std_logic_vector(shift_left(unsigned(zext_ln103_1_fu_154_p1),to_integer(unsigned('0' & zext_ln103_fu_132_p1(31-1 downto 0)))));
    shl_ln103_fu_136_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln103_fu_132_p1(31-1 downto 0)))));
    shl_ln_fu_125_p3 <= (trunc_ln103_reg_202_pp0_iter1_reg & ap_const_lv3_0);
    trunc_ln103_fu_113_p1 <= ap_sig_allocacmp_p(6 - 1 downto 0);
    xor_ln103_fu_142_p2 <= (shl_ln103_fu_136_p2 xor ap_const_lv512_lc_3);
    zext_ln103_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(port_a_addr_read_reg_207),512));
    zext_ln103_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_125_p3),512));
end behav;
