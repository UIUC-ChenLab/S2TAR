-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_mm_writevfifo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_fifo_0_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_0_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_0_full_n : IN STD_LOGIC;
    v_fifo_0_0_write : OUT STD_LOGIC;
    v_fifo_0_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_0_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_1_full_n : IN STD_LOGIC;
    v_fifo_0_1_write : OUT STD_LOGIC;
    v_fifo_0_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_0_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_2_full_n : IN STD_LOGIC;
    v_fifo_0_2_write : OUT STD_LOGIC;
    v_fifo_0_3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_0_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_3_full_n : IN STD_LOGIC;
    v_fifo_0_3_write : OUT STD_LOGIC;
    v_fifo_0_4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_0_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_4_full_n : IN STD_LOGIC;
    v_fifo_0_4_write : OUT STD_LOGIC;
    v_fifo_0_5_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_fifo_0_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    v_fifo_0_5_full_n : IN STD_LOGIC;
    v_fifo_0_5_write : OUT STD_LOGIC;
    b_cache_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_0_ce0 : OUT STD_LOGIC;
    b_cache_0_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    b_cache_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_1_ce0 : OUT STD_LOGIC;
    b_cache_1_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    b_cache_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_2_ce0 : OUT STD_LOGIC;
    b_cache_2_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    b_cache_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_3_ce0 : OUT STD_LOGIC;
    b_cache_3_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    b_cache_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_4_ce0 : OUT STD_LOGIC;
    b_cache_4_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    b_cache_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_cache_5_ce0 : OUT STD_LOGIC;
    b_cache_5_q0 : IN STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of tiled_mm_writevfifo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_18000 : STD_LOGIC_VECTOR (16 downto 0) := "11000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv14_1800 : STD_LOGIC_VECTOR (13 downto 0) := "01100000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv10_180 : STD_LOGIC_VECTOR (9 downto 0) := "0110000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln163_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal v_fifo_0_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal v_fifo_0_1_blk_n : STD_LOGIC;
    signal v_fifo_0_2_blk_n : STD_LOGIC;
    signal v_fifo_0_3_blk_n : STD_LOGIC;
    signal v_fifo_0_4_blk_n : STD_LOGIC;
    signal v_fifo_0_5_blk_n : STD_LOGIC;
    signal icmp_ln166_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_703_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln169_1_fu_413_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln169_1_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln179_fu_421_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln179_reg_717 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln179_reg_717_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal Btmp_fu_531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_1_fu_541_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_1_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_2_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_2_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_3_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_3_reg_767 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_4_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_4_reg_772 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_5_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Btmp_5_reg_777 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast58_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_fu_98 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal p_1_fu_425_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_102 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln169_2_fu_437_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten12_fu_110 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal select_ln166_1_fu_302_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten12_load : STD_LOGIC_VECTOR (13 downto 0);
    signal tn_fu_114 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln163_fu_469_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init_pp0_iter2_reg : STD_LOGIC;
    signal ap_sig_allocacmp_tn_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten34_fu_118 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln163_fu_281_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_indvar_flatten34_load : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln166_fu_296_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln169_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln163_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln163_1_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln166_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln166_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln166_1_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln163_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln166_fu_357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln166_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln169_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln169_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln169_fu_405_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln169_1_fu_431_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tn_2_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln163_1_cast_fu_476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_508_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln179_fu_515_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln179_fu_521_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln179_fu_525_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln179_1_fu_535_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln179_2_fu_545_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln179_3_fu_555_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln179_4_fu_565_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln179_5_fu_575_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal B_pack_fu_585_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_pack_1_fu_597_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_pack_2_fu_609_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_pack_3_fu_621_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_pack_4_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_pack_5_fu_645_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_221 : BOOLEAN;
    signal ap_condition_243 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_mm_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_delay_pipe_U : component tiled_mm_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                i_fu_102 <= select_ln169_1_fu_413_p3;
            end if;
        end if;
    end process;

    indvar_flatten12_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_243)) then
                if ((icmp_ln163_fu_275_p2 = ap_const_lv1_0)) then 
                    indvar_flatten12_fu_110 <= select_ln166_1_fu_302_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_110 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten34_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_243)) then
                if ((icmp_ln163_fu_275_p2 = ap_const_lv1_0)) then 
                    indvar_flatten34_fu_118 <= add_ln163_fu_281_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten34_fu_118 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                indvar_flatten_fu_106 <= select_ln169_2_fu_437_p3;
            end if;
        end if;
    end process;

    p_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                p_fu_98 <= p_1_fu_425_p2;
            end if;
        end if;
    end process;

    tn_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tn_fu_114 <= select_ln163_fu_469_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Btmp_1_reg_757 <= Btmp_1_fu_541_p1;
                Btmp_2_reg_762 <= Btmp_2_fu_551_p1;
                Btmp_3_reg_767 <= Btmp_3_fu_561_p1;
                Btmp_4_reg_772 <= Btmp_4_fu_571_p1;
                Btmp_5_reg_777 <= Btmp_5_fu_581_p1;
                Btmp_reg_752 <= Btmp_fu_531_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                trunc_ln179_reg_717_pp0_iter2_reg <= trunc_ln179_reg_717;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
                icmp_ln166_reg_703 <= icmp_ln166_fu_290_p2;
                icmp_ln166_reg_703_pp0_iter1_reg <= icmp_ln166_reg_703;
                select_ln169_1_reg_712 <= select_ln169_1_fu_413_p3;
                trunc_ln179_reg_717 <= trunc_ln179_fu_421_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_pack_1_fu_597_p1 <= "XXXXXXXXXXXXXXXX";
    B_pack_2_fu_609_p1 <= "XXXXXXXXXXXXXXXX";
    B_pack_3_fu_621_p1 <= "XXXXXXXXXXXXXXXX";
    B_pack_4_fu_633_p1 <= "XXXXXXXXXXXXXXXX";
    B_pack_5_fu_645_p1 <= "XXXXXXXXXXXXXXXX";
    B_pack_fu_585_p1 <= "XXXXXXXXXXXXXXXX";
    Btmp_1_fu_541_p1 <= lshr_ln179_1_fu_535_p2(8 - 1 downto 0);
    Btmp_2_fu_551_p1 <= lshr_ln179_2_fu_545_p2(8 - 1 downto 0);
    Btmp_3_fu_561_p1 <= lshr_ln179_3_fu_555_p2(8 - 1 downto 0);
    Btmp_4_fu_571_p1 <= lshr_ln179_4_fu_565_p2(8 - 1 downto 0);
    Btmp_5_fu_581_p1 <= lshr_ln179_5_fu_575_p2(8 - 1 downto 0);
    Btmp_fu_531_p1 <= lshr_ln179_fu_525_p2(8 - 1 downto 0);
    add_ln163_fu_281_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten34_load) + unsigned(ap_const_lv17_1));
    add_ln166_fu_296_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten12_load) + unsigned(ap_const_lv14_1));
    add_ln169_1_fu_431_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    and_ln163_1_fu_346_p2 <= (xor_ln163_fu_329_p2 and icmp_ln169_fu_340_p2);
    and_ln163_fu_376_p2 <= (xor_ln163_fu_329_p2 and or_ln166_1_fu_371_p2);
    and_ln166_fu_382_p2 <= (icmp_ln171_fu_334_p2 and and_ln163_fu_376_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(v_fifo_0_0_full_n, v_fifo_0_1_full_n, v_fifo_0_2_full_n, v_fifo_0_3_full_n, v_fifo_0_4_full_n, v_fifo_0_5_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((v_fifo_0_5_full_n = ap_const_logic_0) or (v_fifo_0_4_full_n = ap_const_logic_0) or (v_fifo_0_3_full_n = ap_const_logic_0) or (v_fifo_0_2_full_n = ap_const_logic_0) or (v_fifo_0_1_full_n = ap_const_logic_0) or (v_fifo_0_0_full_n = ap_const_logic_0));
    end process;


    ap_condition_221_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_221 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_243_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_243 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln163_fu_275_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln163_fu_275_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_loop_init_pp0_iter1_reg, i_fu_102)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten12_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten12_fu_110, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten12_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten12_load <= indvar_flatten12_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten34_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten34_fu_118, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten34_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten34_load <= indvar_flatten34_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_loop_init_pp0_iter1_reg, indvar_flatten_fu_106)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, p_fu_98, ap_loop_init_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_p_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_p_load <= p_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_tn_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tn_fu_114, ap_loop_init_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_loop_init_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_tn_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_tn_load <= tn_fu_114;
        end if; 
    end process;

    b_cache_0_address0 <= p_cast58_fu_493_p1(8 - 1 downto 0);

    b_cache_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_cache_0_ce0 <= ap_const_logic_1;
        else 
            b_cache_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_1_address0 <= p_cast58_fu_493_p1(8 - 1 downto 0);

    b_cache_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_cache_1_ce0 <= ap_const_logic_1;
        else 
            b_cache_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_2_address0 <= p_cast58_fu_493_p1(8 - 1 downto 0);

    b_cache_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_cache_2_ce0 <= ap_const_logic_1;
        else 
            b_cache_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_3_address0 <= p_cast58_fu_493_p1(8 - 1 downto 0);

    b_cache_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_cache_3_ce0 <= ap_const_logic_1;
        else 
            b_cache_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_4_address0 <= p_cast58_fu_493_p1(8 - 1 downto 0);

    b_cache_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_cache_4_ce0 <= ap_const_logic_1;
        else 
            b_cache_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_cache_5_address0 <= p_cast58_fu_493_p1(8 - 1 downto 0);

    b_cache_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_cache_5_ce0 <= ap_const_logic_1;
        else 
            b_cache_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_487_p2 <= std_logic_vector(unsigned(tmp_fu_480_p3) + unsigned(select_ln163_1_cast_fu_476_p1));
    i_2_fu_388_p2 <= std_logic_vector(unsigned(select_ln166_fu_357_p3) + unsigned(ap_const_lv4_1));
    icmp_ln163_fu_275_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten34_load = ap_const_lv17_18000) else "0";
    icmp_ln166_fu_290_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten12_load = ap_const_lv14_1800) else "0";
    icmp_ln169_fu_340_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_180) else "0";
    icmp_ln171_fu_334_p2 <= "1" when (ap_sig_allocacmp_p_load = ap_const_lv6_20) else "0";
    lshr_ln179_1_fu_535_p2 <= std_logic_vector(shift_right(unsigned(b_cache_1_q0),to_integer(unsigned('0' & zext_ln179_fu_521_p1(31-1 downto 0)))));
    lshr_ln179_2_fu_545_p2 <= std_logic_vector(shift_right(unsigned(b_cache_2_q0),to_integer(unsigned('0' & zext_ln179_fu_521_p1(31-1 downto 0)))));
    lshr_ln179_3_fu_555_p2 <= std_logic_vector(shift_right(unsigned(b_cache_3_q0),to_integer(unsigned('0' & zext_ln179_fu_521_p1(31-1 downto 0)))));
    lshr_ln179_4_fu_565_p2 <= std_logic_vector(shift_right(unsigned(b_cache_4_q0),to_integer(unsigned('0' & zext_ln179_fu_521_p1(31-1 downto 0)))));
    lshr_ln179_5_fu_575_p2 <= std_logic_vector(shift_right(unsigned(b_cache_5_q0),to_integer(unsigned('0' & zext_ln179_fu_521_p1(31-1 downto 0)))));
    lshr_ln179_fu_525_p2 <= std_logic_vector(shift_right(unsigned(b_cache_0_q0),to_integer(unsigned('0' & zext_ln179_fu_521_p1(31-1 downto 0)))));
    or_ln166_1_fu_371_p2 <= (xor_ln166_fu_365_p2 or icmp_ln166_reg_703);
    or_ln166_fu_352_p2 <= (icmp_ln166_reg_703 or and_ln163_1_fu_346_p2);
    or_ln169_1_fu_400_p2 <= (or_ln169_fu_394_p2 or icmp_ln166_reg_703);
    or_ln169_fu_394_p2 <= (and_ln166_fu_382_p2 or and_ln163_1_fu_346_p2);
    or_ln179_fu_515_p2 <= (shl_ln_fu_508_p3 or ap_const_lv9_8);
    p_1_fu_425_p2 <= std_logic_vector(unsigned(select_ln169_fu_405_p3) + unsigned(ap_const_lv6_1));
    p_cast58_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_487_p2),64));
    select_ln163_1_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln163_fu_469_p3),8));
    select_ln163_fu_469_p3 <= 
        tn_2_fu_463_p2 when (icmp_ln166_reg_703_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_tn_load;
    select_ln166_1_fu_302_p3 <= 
        ap_const_lv14_1 when (icmp_ln166_fu_290_p2(0) = '1') else 
        add_ln166_fu_296_p2;
    select_ln166_fu_357_p3 <= 
        ap_const_lv4_0 when (or_ln166_fu_352_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln169_1_fu_413_p3 <= 
        i_2_fu_388_p2 when (and_ln166_fu_382_p2(0) = '1') else 
        select_ln166_fu_357_p3;
    select_ln169_2_fu_437_p3 <= 
        ap_const_lv10_1 when (or_ln166_fu_352_p2(0) = '1') else 
        add_ln169_1_fu_431_p2;
    select_ln169_fu_405_p3 <= 
        ap_const_lv6_0 when (or_ln169_1_fu_400_p2(0) = '1') else 
        ap_sig_allocacmp_p_load;
    shl_ln_fu_508_p3 <= (trunc_ln179_reg_717_pp0_iter2_reg & ap_const_lv4_0);
    tmp_fu_480_p3 <= (select_ln169_1_reg_712 & ap_const_lv4_0);
    tn_2_fu_463_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_tn_load) + unsigned(ap_const_lv5_1));
    trunc_ln179_fu_421_p1 <= select_ln169_fu_405_p3(5 - 1 downto 0);

    v_fifo_0_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, v_fifo_0_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            v_fifo_0_0_blk_n <= v_fifo_0_0_full_n;
        else 
            v_fifo_0_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    v_fifo_0_0_din <= (Btmp_reg_752 & B_pack_fu_585_p1(7 downto 0));

    v_fifo_0_0_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_fifo_0_0_write <= ap_const_logic_1;
        else 
            v_fifo_0_0_write <= ap_const_logic_0;
        end if; 
    end process;


    v_fifo_0_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, v_fifo_0_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            v_fifo_0_1_blk_n <= v_fifo_0_1_full_n;
        else 
            v_fifo_0_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    v_fifo_0_1_din <= (Btmp_1_reg_757 & B_pack_1_fu_597_p1(7 downto 0));

    v_fifo_0_1_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_fifo_0_1_write <= ap_const_logic_1;
        else 
            v_fifo_0_1_write <= ap_const_logic_0;
        end if; 
    end process;


    v_fifo_0_2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, v_fifo_0_2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            v_fifo_0_2_blk_n <= v_fifo_0_2_full_n;
        else 
            v_fifo_0_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    v_fifo_0_2_din <= (Btmp_2_reg_762 & B_pack_2_fu_609_p1(7 downto 0));

    v_fifo_0_2_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_fifo_0_2_write <= ap_const_logic_1;
        else 
            v_fifo_0_2_write <= ap_const_logic_0;
        end if; 
    end process;


    v_fifo_0_3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, v_fifo_0_3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            v_fifo_0_3_blk_n <= v_fifo_0_3_full_n;
        else 
            v_fifo_0_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    v_fifo_0_3_din <= (Btmp_3_reg_767 & B_pack_3_fu_621_p1(7 downto 0));

    v_fifo_0_3_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_fifo_0_3_write <= ap_const_logic_1;
        else 
            v_fifo_0_3_write <= ap_const_logic_0;
        end if; 
    end process;


    v_fifo_0_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, v_fifo_0_4_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            v_fifo_0_4_blk_n <= v_fifo_0_4_full_n;
        else 
            v_fifo_0_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    v_fifo_0_4_din <= (Btmp_4_reg_772 & B_pack_4_fu_633_p1(7 downto 0));

    v_fifo_0_4_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_fifo_0_4_write <= ap_const_logic_1;
        else 
            v_fifo_0_4_write <= ap_const_logic_0;
        end if; 
    end process;


    v_fifo_0_5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, v_fifo_0_5_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            v_fifo_0_5_blk_n <= v_fifo_0_5_full_n;
        else 
            v_fifo_0_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    v_fifo_0_5_din <= (Btmp_5_reg_777 & B_pack_5_fu_645_p1(7 downto 0));

    v_fifo_0_5_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v_fifo_0_5_write <= ap_const_logic_1;
        else 
            v_fifo_0_5_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln163_fu_329_p2 <= (icmp_ln166_reg_703 xor ap_const_lv1_1);
    xor_ln166_fu_365_p2 <= (icmp_ln169_fu_340_p2 xor ap_const_lv1_1);
    zext_ln179_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln179_fu_515_p2),512));
end behav;
