// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tiled_mm_writehfifo (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        h_fifo_0_0_din,
        h_fifo_0_0_num_data_valid,
        h_fifo_0_0_fifo_cap,
        h_fifo_0_0_full_n,
        h_fifo_0_0_write,
        h_fifo_1_0_din,
        h_fifo_1_0_num_data_valid,
        h_fifo_1_0_fifo_cap,
        h_fifo_1_0_full_n,
        h_fifo_1_0_write,
        h_fifo_2_0_din,
        h_fifo_2_0_num_data_valid,
        h_fifo_2_0_fifo_cap,
        h_fifo_2_0_full_n,
        h_fifo_2_0_write,
        h_fifo_3_0_din,
        h_fifo_3_0_num_data_valid,
        h_fifo_3_0_fifo_cap,
        h_fifo_3_0_full_n,
        h_fifo_3_0_write,
        h_fifo_4_0_din,
        h_fifo_4_0_num_data_valid,
        h_fifo_4_0_fifo_cap,
        h_fifo_4_0_full_n,
        h_fifo_4_0_write,
        h_fifo_5_0_din,
        h_fifo_5_0_num_data_valid,
        h_fifo_5_0_fifo_cap,
        h_fifo_5_0_full_n,
        h_fifo_5_0_write,
        start_out,
        start_write,
        a_cache_0_address0,
        a_cache_0_ce0,
        a_cache_0_q0,
        a_cache_1_address0,
        a_cache_1_ce0,
        a_cache_1_q0,
        a_cache_2_address0,
        a_cache_2_ce0,
        a_cache_2_q0,
        a_cache_3_address0,
        a_cache_3_ce0,
        a_cache_3_q0,
        a_cache_4_address0,
        a_cache_4_ce0,
        a_cache_4_q0,
        a_cache_5_address0,
        a_cache_5_ce0,
        a_cache_5_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] h_fifo_0_0_din;
input  [2:0] h_fifo_0_0_num_data_valid;
input  [2:0] h_fifo_0_0_fifo_cap;
input   h_fifo_0_0_full_n;
output   h_fifo_0_0_write;
output  [15:0] h_fifo_1_0_din;
input  [2:0] h_fifo_1_0_num_data_valid;
input  [2:0] h_fifo_1_0_fifo_cap;
input   h_fifo_1_0_full_n;
output   h_fifo_1_0_write;
output  [15:0] h_fifo_2_0_din;
input  [2:0] h_fifo_2_0_num_data_valid;
input  [2:0] h_fifo_2_0_fifo_cap;
input   h_fifo_2_0_full_n;
output   h_fifo_2_0_write;
output  [15:0] h_fifo_3_0_din;
input  [2:0] h_fifo_3_0_num_data_valid;
input  [2:0] h_fifo_3_0_fifo_cap;
input   h_fifo_3_0_full_n;
output   h_fifo_3_0_write;
output  [15:0] h_fifo_4_0_din;
input  [2:0] h_fifo_4_0_num_data_valid;
input  [2:0] h_fifo_4_0_fifo_cap;
input   h_fifo_4_0_full_n;
output   h_fifo_4_0_write;
output  [15:0] h_fifo_5_0_din;
input  [2:0] h_fifo_5_0_num_data_valid;
input  [2:0] h_fifo_5_0_fifo_cap;
input   h_fifo_5_0_full_n;
output   h_fifo_5_0_write;
output   start_out;
output   start_write;
output  [7:0] a_cache_0_address0;
output   a_cache_0_ce0;
input  [511:0] a_cache_0_q0;
output  [7:0] a_cache_1_address0;
output   a_cache_1_ce0;
input  [511:0] a_cache_1_q0;
output  [7:0] a_cache_2_address0;
output   a_cache_2_ce0;
input  [511:0] a_cache_2_q0;
output  [7:0] a_cache_3_address0;
output   a_cache_3_ce0;
input  [511:0] a_cache_3_q0;
output  [7:0] a_cache_4_address0;
output   a_cache_4_ce0;
input  [511:0] a_cache_4_q0;
output  [7:0] a_cache_5_address0;
output   a_cache_5_ce0;
input  [511:0] a_cache_5_q0;

reg ap_idle;
reg h_fifo_0_0_write;
reg h_fifo_1_0_write;
reg h_fifo_2_0_write;
reg h_fifo_3_0_write;
reg h_fifo_4_0_write;
reg h_fifo_5_0_write;
reg start_write;
reg a_cache_0_ce0;
reg a_cache_1_ce0;
reg a_cache_2_ce0;
reg a_cache_3_ce0;
reg a_cache_4_ce0;
reg a_cache_5_ce0;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_279_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_loop_exit_ready_delayed;
reg    h_fifo_0_0_blk_n;
wire    ap_block_pp0_stage0;
reg    h_fifo_1_0_blk_n;
reg    h_fifo_2_0_blk_n;
reg    h_fifo_3_0_blk_n;
reg    h_fifo_4_0_blk_n;
reg    h_fifo_5_0_blk_n;
wire   [0:0] icmp_ln115_fu_297_p2;
reg   [0:0] icmp_ln115_reg_734;
wire   [0:0] xor_ln112_fu_303_p2;
reg   [0:0] xor_ln112_reg_741;
wire   [0:0] icmp_ln118_fu_309_p2;
reg   [0:0] icmp_ln118_reg_746;
wire   [0:0] and_ln112_1_fu_315_p2;
reg   [0:0] and_ln112_1_reg_751;
wire   [0:0] or_ln115_fu_321_p2;
reg   [0:0] or_ln115_reg_757;
wire   [7:0] empty_37_fu_499_p2;
reg   [7:0] empty_37_reg_762;
wire   [4:0] trunc_ln128_fu_505_p1;
reg   [4:0] trunc_ln128_reg_767;
reg   [4:0] trunc_ln128_reg_767_pp0_iter2_reg;
wire   [7:0] Atmp_fu_562_p1;
reg   [7:0] Atmp_reg_802;
wire   [7:0] Atmp_1_fu_572_p1;
reg   [7:0] Atmp_1_reg_807;
wire   [7:0] Atmp_2_fu_582_p1;
reg   [7:0] Atmp_2_reg_812;
wire   [7:0] Atmp_3_fu_592_p1;
reg   [7:0] Atmp_3_reg_817;
wire   [7:0] Atmp_4_fu_602_p1;
reg   [7:0] Atmp_4_reg_822;
wire   [7:0] Atmp_5_fu_612_p1;
reg   [7:0] Atmp_5_reg_827;
wire   [63:0] p_cast56_fu_530_p1;
reg   [5:0] p_fu_102;
wire   [5:0] p_2_fu_509_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_p_load;
reg   [3:0] j_fu_106;
wire   [3:0] select_ln118_1_fu_461_p3;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [9:0] indvar_flatten_fu_110;
wire   [9:0] select_ln118_2_fu_333_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [4:0] tm_fu_114;
wire   [4:0] select_ln115_1_fu_426_p3;
reg   [4:0] ap_sig_allocacmp_tm_load;
reg   [13:0] indvar_flatten12_fu_118;
wire   [13:0] select_ln115_2_fu_347_p3;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [16:0] indvar_flatten33_fu_122;
wire   [16:0] add_ln112_fu_285_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten33_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln118_1_fu_327_p2;
wire   [13:0] add_ln115_1_fu_341_p2;
wire   [4:0] select_ln112_fu_379_p3;
wire   [0:0] xor_ln115_fu_405_p2;
wire   [0:0] or_ln115_1_fu_410_p2;
wire   [0:0] and_ln112_fu_415_p2;
wire   [0:0] icmp_ln120_fu_386_p2;
wire   [4:0] tm_2_fu_392_p2;
wire   [3:0] select_ln115_fu_398_p3;
wire   [0:0] or_ln118_fu_443_p2;
wire   [0:0] and_ln115_fu_420_p2;
wire   [0:0] or_ln118_1_fu_447_p2;
wire   [3:0] j_2_fu_437_p2;
wire   [3:0] trunc_ln118_fu_433_p1;
wire   [6:0] tmp_2_fu_477_p3;
wire   [7:0] tmp_fu_469_p3;
wire   [7:0] tmp_2_cast_fu_485_p1;
wire   [7:0] empty_fu_489_p2;
wire   [7:0] select_ln118_1_cast_fu_495_p1;
wire   [5:0] select_ln118_fu_453_p3;
wire   [8:0] shl_ln_fu_539_p3;
wire   [8:0] or_ln128_fu_546_p2;
wire   [511:0] zext_ln128_fu_552_p1;
wire   [511:0] lshr_ln128_fu_556_p2;
wire   [511:0] lshr_ln128_1_fu_566_p2;
wire   [511:0] lshr_ln128_2_fu_576_p2;
wire   [511:0] lshr_ln128_3_fu_586_p2;
wire   [511:0] lshr_ln128_4_fu_596_p2;
wire   [511:0] lshr_ln128_5_fu_606_p2;
wire   [15:0] A_pack_fu_616_p1;
wire   [15:0] A_pack_1_fu_628_p1;
wire   [15:0] A_pack_2_fu_640_p1;
wire   [15:0] A_pack_3_fu_652_p1;
wire   [15:0] A_pack_4_fu_664_p1;
wire   [15:0] A_pack_5_fu_676_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_259;
reg    ap_condition_238;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 p_fu_102 = 6'd0;
#0 j_fu_106 = 4'd0;
#0 indvar_flatten_fu_110 = 10'd0;
#0 tm_fu_114 = 5'd0;
#0 indvar_flatten12_fu_118 = 14'd0;
#0 indvar_flatten33_fu_122 = 17'd0;
end

tiled_mm_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_259)) begin
        if ((icmp_ln112_fu_279_p2 == 1'd0)) begin
            indvar_flatten12_fu_118 <= select_ln115_2_fu_347_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_118 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_259)) begin
        if ((icmp_ln112_fu_279_p2 == 1'd0)) begin
            indvar_flatten33_fu_122 <= add_ln112_fu_285_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten33_fu_122 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_259)) begin
        if ((icmp_ln112_fu_279_p2 == 1'd0)) begin
            indvar_flatten_fu_110 <= select_ln118_2_fu_333_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_238)) begin
        j_fu_106 <= select_ln118_1_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_238)) begin
    p_fu_102 <= p_2_fu_509_p2;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_238)) begin
    tm_fu_114 <= select_ln115_1_fu_426_p3;
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Atmp_1_reg_807 <= Atmp_1_fu_572_p1;
        Atmp_2_reg_812 <= Atmp_2_fu_582_p1;
        Atmp_3_reg_817 <= Atmp_3_fu_592_p1;
        Atmp_4_reg_822 <= Atmp_4_fu_602_p1;
        Atmp_5_reg_827 <= Atmp_5_fu_612_p1;
        Atmp_reg_802 <= Atmp_fu_562_p1;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        trunc_ln128_reg_767_pp0_iter2_reg <= trunc_ln128_reg_767;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln112_1_reg_751 <= and_ln112_1_fu_315_p2;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        empty_37_reg_762 <= empty_37_fu_499_p2;
        icmp_ln115_reg_734 <= icmp_ln115_fu_297_p2;
        icmp_ln118_reg_746 <= icmp_ln118_fu_309_p2;
        or_ln115_reg_757 <= or_ln115_fu_321_p2;
        trunc_ln128_reg_767 <= trunc_ln128_fu_505_p1;
        xor_ln112_reg_741 <= xor_ln112_fu_303_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_cache_0_ce0 = 1'b1;
    end else begin
        a_cache_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_cache_1_ce0 = 1'b1;
    end else begin
        a_cache_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_cache_2_ce0 = 1'b1;
    end else begin
        a_cache_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_cache_3_ce0 = 1'b1;
    end else begin
        a_cache_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_cache_4_ce0 = 1'b1;
    end else begin
        a_cache_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_cache_5_ce0 = 1'b1;
    end else begin
        a_cache_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_279_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_118;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_122;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_110;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_106;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load = 6'd0;
    end else begin
        ap_sig_allocacmp_p_load = p_fu_102;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_tm_load = 5'd0;
    end else begin
        ap_sig_allocacmp_tm_load = tm_fu_114;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        h_fifo_0_0_blk_n = h_fifo_0_0_full_n;
    end else begin
        h_fifo_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fifo_0_0_write = 1'b1;
    end else begin
        h_fifo_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        h_fifo_1_0_blk_n = h_fifo_1_0_full_n;
    end else begin
        h_fifo_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fifo_1_0_write = 1'b1;
    end else begin
        h_fifo_1_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        h_fifo_2_0_blk_n = h_fifo_2_0_full_n;
    end else begin
        h_fifo_2_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fifo_2_0_write = 1'b1;
    end else begin
        h_fifo_2_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        h_fifo_3_0_blk_n = h_fifo_3_0_full_n;
    end else begin
        h_fifo_3_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fifo_3_0_write = 1'b1;
    end else begin
        h_fifo_3_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        h_fifo_4_0_blk_n = h_fifo_4_0_full_n;
    end else begin
        h_fifo_4_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fifo_4_0_write = 1'b1;
    end else begin
        h_fifo_4_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        h_fifo_5_0_blk_n = h_fifo_5_0_full_n;
    end else begin
        h_fifo_5_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fifo_5_0_write = 1'b1;
    end else begin
        h_fifo_5_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_pack_1_fu_628_p1 = 'bx;

assign A_pack_2_fu_640_p1 = 'bx;

assign A_pack_3_fu_652_p1 = 'bx;

assign A_pack_4_fu_664_p1 = 'bx;

assign A_pack_5_fu_676_p1 = 'bx;

assign A_pack_fu_616_p1 = 'bx;

assign Atmp_1_fu_572_p1 = lshr_ln128_1_fu_566_p2[7:0];

assign Atmp_2_fu_582_p1 = lshr_ln128_2_fu_576_p2[7:0];

assign Atmp_3_fu_592_p1 = lshr_ln128_3_fu_586_p2[7:0];

assign Atmp_4_fu_602_p1 = lshr_ln128_4_fu_596_p2[7:0];

assign Atmp_5_fu_612_p1 = lshr_ln128_5_fu_606_p2[7:0];

assign Atmp_fu_562_p1 = lshr_ln128_fu_556_p2[7:0];

assign a_cache_0_address0 = p_cast56_fu_530_p1;

assign a_cache_1_address0 = p_cast56_fu_530_p1;

assign a_cache_2_address0 = p_cast56_fu_530_p1;

assign a_cache_3_address0 = p_cast56_fu_530_p1;

assign a_cache_4_address0 = p_cast56_fu_530_p1;

assign a_cache_5_address0 = p_cast56_fu_530_p1;

assign add_ln112_fu_285_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 17'd1);

assign add_ln115_1_fu_341_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln118_1_fu_327_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign and_ln112_1_fu_315_p2 = (xor_ln112_fu_303_p2 & icmp_ln118_fu_309_p2);

assign and_ln112_fu_415_p2 = (xor_ln112_reg_741 & or_ln115_1_fu_410_p2);

assign and_ln115_fu_420_p2 = (icmp_ln120_fu_386_p2 & and_ln112_fu_415_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((h_fifo_5_0_full_n == 1'b0) | (h_fifo_4_0_full_n == 1'b0) | (h_fifo_3_0_full_n == 1'b0) | (h_fifo_2_0_full_n == 1'b0) | (h_fifo_1_0_full_n == 1'b0) | (h_fifo_0_0_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_238 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_259 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign empty_37_fu_499_p2 = (empty_fu_489_p2 + select_ln118_1_cast_fu_495_p1);

assign empty_fu_489_p2 = (tmp_fu_469_p3 - tmp_2_cast_fu_485_p1);

assign h_fifo_0_0_din = {{Atmp_reg_802}, {A_pack_fu_616_p1[7:0]}};

assign h_fifo_1_0_din = {{Atmp_1_reg_807}, {A_pack_1_fu_628_p1[7:0]}};

assign h_fifo_2_0_din = {{Atmp_2_reg_812}, {A_pack_2_fu_640_p1[7:0]}};

assign h_fifo_3_0_din = {{Atmp_3_reg_817}, {A_pack_3_fu_652_p1[7:0]}};

assign h_fifo_4_0_din = {{Atmp_4_reg_822}, {A_pack_4_fu_664_p1[7:0]}};

assign h_fifo_5_0_din = {{Atmp_5_reg_827}, {A_pack_5_fu_676_p1[7:0]}};

assign icmp_ln112_fu_279_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 17'd98304) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_297_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd6144) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_309_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd384) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_386_p2 = ((ap_sig_allocacmp_p_load == 6'd32) ? 1'b1 : 1'b0);

assign j_2_fu_437_p2 = (select_ln115_fu_398_p3 + 4'd1);

assign lshr_ln128_1_fu_566_p2 = a_cache_1_q0 >> zext_ln128_fu_552_p1;

assign lshr_ln128_2_fu_576_p2 = a_cache_2_q0 >> zext_ln128_fu_552_p1;

assign lshr_ln128_3_fu_586_p2 = a_cache_3_q0 >> zext_ln128_fu_552_p1;

assign lshr_ln128_4_fu_596_p2 = a_cache_4_q0 >> zext_ln128_fu_552_p1;

assign lshr_ln128_5_fu_606_p2 = a_cache_5_q0 >> zext_ln128_fu_552_p1;

assign lshr_ln128_fu_556_p2 = a_cache_0_q0 >> zext_ln128_fu_552_p1;

assign or_ln115_1_fu_410_p2 = (xor_ln115_fu_405_p2 | icmp_ln115_reg_734);

assign or_ln115_fu_321_p2 = (icmp_ln115_fu_297_p2 | and_ln112_1_fu_315_p2);

assign or_ln118_1_fu_447_p2 = (or_ln118_fu_443_p2 | and_ln115_fu_420_p2);

assign or_ln118_fu_443_p2 = (icmp_ln115_reg_734 | and_ln112_1_reg_751);

assign or_ln128_fu_546_p2 = (shl_ln_fu_539_p3 | 9'd8);

assign p_2_fu_509_p2 = (select_ln118_fu_453_p3 + 6'd1);

assign p_cast56_fu_530_p1 = empty_37_reg_762;

assign select_ln112_fu_379_p3 = ((icmp_ln115_reg_734[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_tm_load);

assign select_ln115_1_fu_426_p3 = ((and_ln112_1_reg_751[0:0] == 1'b1) ? tm_2_fu_392_p2 : select_ln112_fu_379_p3);

assign select_ln115_2_fu_347_p3 = ((icmp_ln115_fu_297_p2[0:0] == 1'b1) ? 14'd1 : add_ln115_1_fu_341_p2);

assign select_ln115_fu_398_p3 = ((or_ln115_reg_757[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln118_1_cast_fu_495_p1 = select_ln118_1_fu_461_p3;

assign select_ln118_1_fu_461_p3 = ((and_ln115_fu_420_p2[0:0] == 1'b1) ? j_2_fu_437_p2 : select_ln115_fu_398_p3);

assign select_ln118_2_fu_333_p3 = ((or_ln115_fu_321_p2[0:0] == 1'b1) ? 10'd1 : add_ln118_1_fu_327_p2);

assign select_ln118_fu_453_p3 = ((or_ln118_1_fu_447_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_p_load);

assign shl_ln_fu_539_p3 = {{trunc_ln128_reg_767_pp0_iter2_reg}, {4'd0}};

assign start_out = real_start;

assign tm_2_fu_392_p2 = (select_ln112_fu_379_p3 + 5'd1);

assign tmp_2_cast_fu_485_p1 = tmp_2_fu_477_p3;

assign tmp_2_fu_477_p3 = {{select_ln115_1_fu_426_p3}, {2'd0}};

assign tmp_fu_469_p3 = {{trunc_ln118_fu_433_p1}, {4'd0}};

assign trunc_ln118_fu_433_p1 = select_ln115_1_fu_426_p3[3:0];

assign trunc_ln128_fu_505_p1 = select_ln118_fu_453_p3[4:0];

assign xor_ln112_fu_303_p2 = (icmp_ln115_fu_297_p2 ^ 1'd1);

assign xor_ln115_fu_405_p2 = (icmp_ln118_reg_746 ^ 1'd1);

assign zext_ln128_fu_552_p1 = or_ln128_fu_546_p2;

endmodule //tiled_mm_writehfifo
