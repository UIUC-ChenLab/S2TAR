// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tiled_mm_stream_out_block (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Cstream_din,
        Cstream_num_data_valid,
        Cstream_fifo_cap,
        Cstream_full_n,
        Cstream_write,
        out_block_read,
        out_block_read_107,
        out_block_read_108,
        out_block_read_109,
        out_block_read_110,
        out_block_read_111,
        out_block_read_112,
        out_block_read_113,
        out_block_read_114,
        out_block_read_115,
        out_block_read_116,
        out_block_read_117,
        out_block_read_118,
        out_block_read_119,
        out_block_read_120,
        out_block_read_121,
        out_block_read_122,
        out_block_read_123,
        out_block_read_124,
        out_block_read_125,
        out_block_read_126,
        out_block_read_127,
        out_block_read_128,
        out_block_read_129,
        out_block_read_130,
        out_block_read_131,
        out_block_read_132,
        out_block_read_133,
        out_block_read_134,
        out_block_read_135,
        out_block_read_136,
        out_block_read_137,
        out_block_read_138,
        out_block_read_139,
        out_block_read_140,
        out_block_read_141
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] Cstream_din;
input  [2:0] Cstream_num_data_valid;
input  [2:0] Cstream_fifo_cap;
input   Cstream_full_n;
output   Cstream_write;
input  [7:0] out_block_read;
input  [7:0] out_block_read_107;
input  [7:0] out_block_read_108;
input  [7:0] out_block_read_109;
input  [7:0] out_block_read_110;
input  [7:0] out_block_read_111;
input  [7:0] out_block_read_112;
input  [7:0] out_block_read_113;
input  [7:0] out_block_read_114;
input  [7:0] out_block_read_115;
input  [7:0] out_block_read_116;
input  [7:0] out_block_read_117;
input  [7:0] out_block_read_118;
input  [7:0] out_block_read_119;
input  [7:0] out_block_read_120;
input  [7:0] out_block_read_121;
input  [7:0] out_block_read_122;
input  [7:0] out_block_read_123;
input  [7:0] out_block_read_124;
input  [7:0] out_block_read_125;
input  [7:0] out_block_read_126;
input  [7:0] out_block_read_127;
input  [7:0] out_block_read_128;
input  [7:0] out_block_read_129;
input  [7:0] out_block_read_130;
input  [7:0] out_block_read_131;
input  [7:0] out_block_read_132;
input  [7:0] out_block_read_133;
input  [7:0] out_block_read_134;
input  [7:0] out_block_read_135;
input  [7:0] out_block_read_136;
input  [7:0] out_block_read_137;
input  [7:0] out_block_read_138;
input  [7:0] out_block_read_139;
input  [7:0] out_block_read_140;
input  [7:0] out_block_read_141;

reg ap_idle;
reg Cstream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln84_fu_377_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Cstream_blk_n;
wire    ap_block_pp0_stage0;
wire   [7:0] tmp_6_fu_615_p15;
reg   [7:0] tmp_6_reg_692;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] j_3_fu_124;
wire   [2:0] j_fu_647_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_3_load;
reg   [2:0] i_4_fu_128;
wire   [2:0] select_ln84_1_fu_415_p3;
reg   [2:0] ap_sig_allocacmp_i_4_load;
reg   [5:0] indvar_flatten_fu_132;
wire   [5:0] add_ln84_fu_383_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln86_fu_401_p2;
wire   [2:0] i_fu_395_p2;
wire   [7:0] tmp_fu_423_p13;
wire   [2:0] select_ln84_fu_407_p3;
wire   [7:0] tmp_1_fu_455_p13;
wire   [7:0] tmp_2_fu_487_p13;
wire   [7:0] tmp_3_fu_519_p13;
wire   [7:0] tmp_4_fu_551_p13;
wire   [7:0] tmp_5_fu_583_p13;
wire   [7:0] tmp_fu_423_p15;
wire   [7:0] tmp_1_fu_455_p15;
wire   [7:0] tmp_2_fu_487_p15;
wire   [7:0] tmp_3_fu_519_p15;
wire   [7:0] tmp_4_fu_551_p15;
wire   [7:0] tmp_5_fu_583_p15;
wire   [7:0] tmp_6_fu_615_p13;
wire   [2:0] tmp_6_fu_615_p14;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_119;
wire   [2:0] tmp_fu_423_p1;
wire   [2:0] tmp_fu_423_p3;
wire   [2:0] tmp_fu_423_p5;
wire   [2:0] tmp_fu_423_p7;
wire  signed [2:0] tmp_fu_423_p9;
wire  signed [2:0] tmp_fu_423_p11;
wire   [2:0] tmp_1_fu_455_p1;
wire   [2:0] tmp_1_fu_455_p3;
wire   [2:0] tmp_1_fu_455_p5;
wire   [2:0] tmp_1_fu_455_p7;
wire  signed [2:0] tmp_1_fu_455_p9;
wire  signed [2:0] tmp_1_fu_455_p11;
wire   [2:0] tmp_2_fu_487_p1;
wire   [2:0] tmp_2_fu_487_p3;
wire   [2:0] tmp_2_fu_487_p5;
wire   [2:0] tmp_2_fu_487_p7;
wire  signed [2:0] tmp_2_fu_487_p9;
wire  signed [2:0] tmp_2_fu_487_p11;
wire   [2:0] tmp_3_fu_519_p1;
wire   [2:0] tmp_3_fu_519_p3;
wire   [2:0] tmp_3_fu_519_p5;
wire   [2:0] tmp_3_fu_519_p7;
wire  signed [2:0] tmp_3_fu_519_p9;
wire  signed [2:0] tmp_3_fu_519_p11;
wire   [2:0] tmp_4_fu_551_p1;
wire   [2:0] tmp_4_fu_551_p3;
wire   [2:0] tmp_4_fu_551_p5;
wire   [2:0] tmp_4_fu_551_p7;
wire  signed [2:0] tmp_4_fu_551_p9;
wire  signed [2:0] tmp_4_fu_551_p11;
wire   [2:0] tmp_5_fu_583_p1;
wire   [2:0] tmp_5_fu_583_p3;
wire   [2:0] tmp_5_fu_583_p5;
wire   [2:0] tmp_5_fu_583_p7;
wire  signed [2:0] tmp_5_fu_583_p9;
wire  signed [2:0] tmp_5_fu_583_p11;
wire   [2:0] tmp_6_fu_615_p1;
wire   [2:0] tmp_6_fu_615_p3;
wire   [2:0] tmp_6_fu_615_p5;
wire   [2:0] tmp_6_fu_615_p7;
wire  signed [2:0] tmp_6_fu_615_p9;
wire  signed [2:0] tmp_6_fu_615_p11;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 j_3_fu_124 = 3'd0;
#0 i_4_fu_128 = 3'd0;
#0 indvar_flatten_fu_132 = 6'd0;
end

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U338(
    .din0(out_block_read),
    .din1(out_block_read_107),
    .din2(out_block_read_108),
    .din3(out_block_read_109),
    .din4(out_block_read_110),
    .din5(out_block_read_111),
    .def(tmp_fu_423_p13),
    .sel(select_ln84_fu_407_p3),
    .dout(tmp_fu_423_p15)
);

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U339(
    .din0(out_block_read_112),
    .din1(out_block_read_113),
    .din2(out_block_read_114),
    .din3(out_block_read_115),
    .din4(out_block_read_116),
    .din5(out_block_read_117),
    .def(tmp_1_fu_455_p13),
    .sel(select_ln84_fu_407_p3),
    .dout(tmp_1_fu_455_p15)
);

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U340(
    .din0(out_block_read_118),
    .din1(out_block_read_119),
    .din2(out_block_read_120),
    .din3(out_block_read_121),
    .din4(out_block_read_122),
    .din5(out_block_read_123),
    .def(tmp_2_fu_487_p13),
    .sel(select_ln84_fu_407_p3),
    .dout(tmp_2_fu_487_p15)
);

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U341(
    .din0(out_block_read_124),
    .din1(out_block_read_125),
    .din2(out_block_read_126),
    .din3(out_block_read_127),
    .din4(out_block_read_128),
    .din5(out_block_read_129),
    .def(tmp_3_fu_519_p13),
    .sel(select_ln84_fu_407_p3),
    .dout(tmp_3_fu_519_p15)
);

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U342(
    .din0(out_block_read_130),
    .din1(out_block_read_131),
    .din2(out_block_read_132),
    .din3(out_block_read_133),
    .din4(out_block_read_134),
    .din5(out_block_read_135),
    .def(tmp_4_fu_551_p13),
    .sel(select_ln84_fu_407_p3),
    .dout(tmp_4_fu_551_p15)
);

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U343(
    .din0(out_block_read_136),
    .din1(out_block_read_137),
    .din2(out_block_read_138),
    .din3(out_block_read_139),
    .din4(out_block_read_140),
    .din5(out_block_read_141),
    .def(tmp_5_fu_583_p13),
    .sel(select_ln84_fu_407_p3),
    .dout(tmp_5_fu_583_p15)
);

tiled_mm_sparsemux_13_3_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
sparsemux_13_3_8_1_1_U344(
    .din0(tmp_fu_423_p15),
    .din1(tmp_1_fu_455_p15),
    .din2(tmp_2_fu_487_p15),
    .din3(tmp_3_fu_519_p15),
    .din4(tmp_4_fu_551_p15),
    .din5(tmp_5_fu_583_p15),
    .def(tmp_6_fu_615_p13),
    .sel(tmp_6_fu_615_p14),
    .dout(tmp_6_fu_615_p15)
);

tiled_mm_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_119)) begin
        if ((icmp_ln84_fu_377_p2 == 1'd0)) begin
            i_4_fu_128 <= select_ln84_1_fu_415_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_4_fu_128 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_119)) begin
        if ((icmp_ln84_fu_377_p2 == 1'd0)) begin
            indvar_flatten_fu_132 <= add_ln84_fu_383_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_132 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_119)) begin
        if ((icmp_ln84_fu_377_p2 == 1'd0)) begin
            j_3_fu_124 <= j_fu_647_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_3_fu_124 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_reg_692 <= tmp_6_fu_615_p15;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Cstream_blk_n = Cstream_full_n;
    end else begin
        Cstream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Cstream_write = 1'b1;
    end else begin
        Cstream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln84_fu_377_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_4_load = i_4_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_3_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_3_load = j_3_fu_124;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cstream_din = tmp_6_reg_692;

assign add_ln84_fu_383_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == Cstream_full_n);
end

always @ (*) begin
    ap_condition_119 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_fu_395_p2 = (ap_sig_allocacmp_i_4_load + 3'd1);

assign icmp_ln84_fu_377_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_401_p2 = ((ap_sig_allocacmp_j_3_load == 3'd6) ? 1'b1 : 1'b0);

assign j_fu_647_p2 = (select_ln84_fu_407_p3 + 3'd1);

assign select_ln84_1_fu_415_p3 = ((icmp_ln86_fu_401_p2[0:0] == 1'b1) ? i_fu_395_p2 : ap_sig_allocacmp_i_4_load);

assign select_ln84_fu_407_p3 = ((icmp_ln86_fu_401_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_3_load);

assign tmp_1_fu_455_p13 = 'bx;

assign tmp_2_fu_487_p13 = 'bx;

assign tmp_3_fu_519_p13 = 'bx;

assign tmp_4_fu_551_p13 = 'bx;

assign tmp_5_fu_583_p13 = 'bx;

assign tmp_6_fu_615_p13 = 'bx;

assign tmp_6_fu_615_p14 = ((icmp_ln86_fu_401_p2[0:0] == 1'b1) ? i_fu_395_p2 : ap_sig_allocacmp_i_4_load);

assign tmp_fu_423_p13 = 'bx;

endmodule //tiled_mm_stream_out_block
